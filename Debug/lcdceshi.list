
lcdceshi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093f4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  08009508  08009508  0000a508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099a8  080099a8  0000b214  2**0
                  CONTENTS
  4 .ARM          00000008  080099a8  080099a8  0000a9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099b0  080099b0  0000b214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099b0  080099b0  0000a9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099b4  080099b4  0000a9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  080099b8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000214  08009bcc  0000b214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  08009bcc  0000b470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e58  00000000  00000000  0000b23d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003071  00000000  00000000  0001c095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  0001f108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c16  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a718  00000000  00000000  00020cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015999  00000000  00000000  0003b40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091c87  00000000  00000000  00050da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2a2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000533c  00000000  00000000  000e2a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000e7db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000214 	.word	0x20000214
 800012c:	00000000 	.word	0x00000000
 8000130:	080094ec 	.word	0x080094ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000218 	.word	0x20000218
 800014c:	080094ec 	.word	0x080094ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2uiz>:
 8000b74:	004a      	lsls	r2, r1, #1
 8000b76:	d211      	bcs.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b7c:	d211      	bcs.n	8000ba2 <__aeabi_d2uiz+0x2e>
 8000b7e:	d50d      	bpl.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d40e      	bmi.n	8000ba8 <__aeabi_d2uiz+0x34>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_d2uiz+0x3a>
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0000 	mov.w	r0, #0
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2f>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bbc:	bf24      	itt	cs
 8000bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bc6:	d90d      	bls.n	8000be4 <__aeabi_d2f+0x30>
 8000bc8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be8:	d121      	bne.n	8000c2e <__aeabi_d2f+0x7a>
 8000bea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bee:	bfbc      	itt	lt
 8000bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf4:	4770      	bxlt	lr
 8000bf6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfe:	f1c2 0218 	rsb	r2, r2, #24
 8000c02:	f1c2 0c20 	rsb	ip, r2, #32
 8000c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0e:	bf18      	it	ne
 8000c10:	f040 0001 	orrne.w	r0, r0, #1
 8000c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c20:	ea40 000c 	orr.w	r0, r0, ip
 8000c24:	fa23 f302 	lsr.w	r3, r3, r2
 8000c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c2c:	e7cc      	b.n	8000bc8 <__aeabi_d2f+0x14>
 8000c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c32:	d107      	bne.n	8000c44 <__aeabi_d2f+0x90>
 8000c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c38:	bf1e      	ittt	ne
 8000c3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c42:	4770      	bxne	lr
 8000c44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_frsub>:
 8000c54:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	e002      	b.n	8000c60 <__addsf3>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_fsub>:
 8000c5c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c60 <__addsf3>:
 8000c60:	0042      	lsls	r2, r0, #1
 8000c62:	bf1f      	itttt	ne
 8000c64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c68:	ea92 0f03 	teqne	r2, r3
 8000c6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c74:	d06a      	beq.n	8000d4c <__addsf3+0xec>
 8000c76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c7e:	bfc1      	itttt	gt
 8000c80:	18d2      	addgt	r2, r2, r3
 8000c82:	4041      	eorgt	r1, r0
 8000c84:	4048      	eorgt	r0, r1
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	bfb8      	it	lt
 8000c8a:	425b      	neglt	r3, r3
 8000c8c:	2b19      	cmp	r3, #25
 8000c8e:	bf88      	it	hi
 8000c90:	4770      	bxhi	lr
 8000c92:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c9a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c9e:	bf18      	it	ne
 8000ca0:	4240      	negne	r0, r0
 8000ca2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ca6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000caa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cae:	bf18      	it	ne
 8000cb0:	4249      	negne	r1, r1
 8000cb2:	ea92 0f03 	teq	r2, r3
 8000cb6:	d03f      	beq.n	8000d38 <__addsf3+0xd8>
 8000cb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cbc:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc0:	eb10 000c 	adds.w	r0, r0, ip
 8000cc4:	f1c3 0320 	rsb	r3, r3, #32
 8000cc8:	fa01 f103 	lsl.w	r1, r1, r3
 8000ccc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__addsf3+0x78>
 8000cd2:	4249      	negs	r1, r1
 8000cd4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cd8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cdc:	d313      	bcc.n	8000d06 <__addsf3+0xa6>
 8000cde:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ce2:	d306      	bcc.n	8000cf2 <__addsf3+0x92>
 8000ce4:	0840      	lsrs	r0, r0, #1
 8000ce6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cea:	f102 0201 	add.w	r2, r2, #1
 8000cee:	2afe      	cmp	r2, #254	@ 0xfe
 8000cf0:	d251      	bcs.n	8000d96 <__addsf3+0x136>
 8000cf2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfa:	bf08      	it	eq
 8000cfc:	f020 0001 	biceq.w	r0, r0, #1
 8000d00:	ea40 0003 	orr.w	r0, r0, r3
 8000d04:	4770      	bx	lr
 8000d06:	0049      	lsls	r1, r1, #1
 8000d08:	eb40 0000 	adc.w	r0, r0, r0
 8000d0c:	3a01      	subs	r2, #1
 8000d0e:	bf28      	it	cs
 8000d10:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d14:	d2ed      	bcs.n	8000cf2 <__addsf3+0x92>
 8000d16:	fab0 fc80 	clz	ip, r0
 8000d1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d26:	bfaa      	itet	ge
 8000d28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d2c:	4252      	neglt	r2, r2
 8000d2e:	4318      	orrge	r0, r3
 8000d30:	bfbc      	itt	lt
 8000d32:	40d0      	lsrlt	r0, r2
 8000d34:	4318      	orrlt	r0, r3
 8000d36:	4770      	bx	lr
 8000d38:	f092 0f00 	teq	r2, #0
 8000d3c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d40:	bf06      	itte	eq
 8000d42:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d46:	3201      	addeq	r2, #1
 8000d48:	3b01      	subne	r3, #1
 8000d4a:	e7b5      	b.n	8000cb8 <__addsf3+0x58>
 8000d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d54:	bf18      	it	ne
 8000d56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5a:	d021      	beq.n	8000da0 <__addsf3+0x140>
 8000d5c:	ea92 0f03 	teq	r2, r3
 8000d60:	d004      	beq.n	8000d6c <__addsf3+0x10c>
 8000d62:	f092 0f00 	teq	r2, #0
 8000d66:	bf08      	it	eq
 8000d68:	4608      	moveq	r0, r1
 8000d6a:	4770      	bx	lr
 8000d6c:	ea90 0f01 	teq	r0, r1
 8000d70:	bf1c      	itt	ne
 8000d72:	2000      	movne	r0, #0
 8000d74:	4770      	bxne	lr
 8000d76:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d7a:	d104      	bne.n	8000d86 <__addsf3+0x126>
 8000d7c:	0040      	lsls	r0, r0, #1
 8000d7e:	bf28      	it	cs
 8000d80:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d8a:	bf3c      	itt	cc
 8000d8c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d90:	4770      	bxcc	lr
 8000d92:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d96:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d9e:	4770      	bx	lr
 8000da0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da4:	bf16      	itet	ne
 8000da6:	4608      	movne	r0, r1
 8000da8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dac:	4601      	movne	r1, r0
 8000dae:	0242      	lsls	r2, r0, #9
 8000db0:	bf06      	itte	eq
 8000db2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000db6:	ea90 0f01 	teqeq	r0, r1
 8000dba:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_ui2f>:
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e004      	b.n	8000dd0 <__aeabi_i2f+0x8>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_i2f>:
 8000dc8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dcc:	bf48      	it	mi
 8000dce:	4240      	negmi	r0, r0
 8000dd0:	ea5f 0c00 	movs.w	ip, r0
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ddc:	4601      	mov	r1, r0
 8000dde:	f04f 0000 	mov.w	r0, #0
 8000de2:	e01c      	b.n	8000e1e <__aeabi_l2f+0x2a>

08000de4 <__aeabi_ul2f>:
 8000de4:	ea50 0201 	orrs.w	r2, r0, r1
 8000de8:	bf08      	it	eq
 8000dea:	4770      	bxeq	lr
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e00a      	b.n	8000e08 <__aeabi_l2f+0x14>
 8000df2:	bf00      	nop

08000df4 <__aeabi_l2f>:
 8000df4:	ea50 0201 	orrs.w	r2, r0, r1
 8000df8:	bf08      	it	eq
 8000dfa:	4770      	bxeq	lr
 8000dfc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e00:	d502      	bpl.n	8000e08 <__aeabi_l2f+0x14>
 8000e02:	4240      	negs	r0, r0
 8000e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e08:	ea5f 0c01 	movs.w	ip, r1
 8000e0c:	bf02      	ittt	eq
 8000e0e:	4684      	moveq	ip, r0
 8000e10:	4601      	moveq	r1, r0
 8000e12:	2000      	moveq	r0, #0
 8000e14:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e18:	bf08      	it	eq
 8000e1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e1e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e22:	fabc f28c 	clz	r2, ip
 8000e26:	3a08      	subs	r2, #8
 8000e28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e2c:	db10      	blt.n	8000e50 <__aeabi_l2f+0x5c>
 8000e2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e32:	4463      	add	r3, ip
 8000e34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e38:	f1c2 0220 	rsb	r2, r2, #32
 8000e3c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e40:	fa20 f202 	lsr.w	r2, r0, r2
 8000e44:	eb43 0002 	adc.w	r0, r3, r2
 8000e48:	bf08      	it	eq
 8000e4a:	f020 0001 	biceq.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	f102 0220 	add.w	r2, r2, #32
 8000e54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e58:	f1c2 0220 	rsb	r2, r2, #32
 8000e5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e60:	fa21 f202 	lsr.w	r2, r1, r2
 8000e64:	eb43 0002 	adc.w	r0, r3, r2
 8000e68:	bf08      	it	eq
 8000e6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e6e:	4770      	bx	lr

08000e70 <__gesf2>:
 8000e70:	f04f 3cff 	mov.w	ip, #4294967295
 8000e74:	e006      	b.n	8000e84 <__cmpsf2+0x4>
 8000e76:	bf00      	nop

08000e78 <__lesf2>:
 8000e78:	f04f 0c01 	mov.w	ip, #1
 8000e7c:	e002      	b.n	8000e84 <__cmpsf2+0x4>
 8000e7e:	bf00      	nop

08000e80 <__cmpsf2>:
 8000e80:	f04f 0c01 	mov.w	ip, #1
 8000e84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e88:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e94:	bf18      	it	ne
 8000e96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e9a:	d011      	beq.n	8000ec0 <__cmpsf2+0x40>
 8000e9c:	b001      	add	sp, #4
 8000e9e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ea2:	bf18      	it	ne
 8000ea4:	ea90 0f01 	teqne	r0, r1
 8000ea8:	bf58      	it	pl
 8000eaa:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eae:	bf88      	it	hi
 8000eb0:	17c8      	asrhi	r0, r1, #31
 8000eb2:	bf38      	it	cc
 8000eb4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000eb8:	bf18      	it	ne
 8000eba:	f040 0001 	orrne.w	r0, r0, #1
 8000ebe:	4770      	bx	lr
 8000ec0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec4:	d102      	bne.n	8000ecc <__cmpsf2+0x4c>
 8000ec6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eca:	d105      	bne.n	8000ed8 <__cmpsf2+0x58>
 8000ecc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ed0:	d1e4      	bne.n	8000e9c <__cmpsf2+0x1c>
 8000ed2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ed6:	d0e1      	beq.n	8000e9c <__cmpsf2+0x1c>
 8000ed8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__aeabi_cfrcmple>:
 8000ee0:	4684      	mov	ip, r0
 8000ee2:	4608      	mov	r0, r1
 8000ee4:	4661      	mov	r1, ip
 8000ee6:	e7ff      	b.n	8000ee8 <__aeabi_cfcmpeq>

08000ee8 <__aeabi_cfcmpeq>:
 8000ee8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000eea:	f7ff ffc9 	bl	8000e80 <__cmpsf2>
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	bf48      	it	mi
 8000ef2:	f110 0f00 	cmnmi.w	r0, #0
 8000ef6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ef8 <__aeabi_fcmpeq>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff fff4 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f00:	bf0c      	ite	eq
 8000f02:	2001      	moveq	r0, #1
 8000f04:	2000      	movne	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmplt>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffea 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f14:	bf34      	ite	cc
 8000f16:	2001      	movcc	r0, #1
 8000f18:	2000      	movcs	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmple>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffe0 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f28:	bf94      	ite	ls
 8000f2a:	2001      	movls	r0, #1
 8000f2c:	2000      	movhi	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmpge>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffd2 	bl	8000ee0 <__aeabi_cfrcmple>
 8000f3c:	bf94      	ite	ls
 8000f3e:	2001      	movls	r0, #1
 8000f40:	2000      	movhi	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmpgt>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffc8 	bl	8000ee0 <__aeabi_cfrcmple>
 8000f50:	bf34      	ite	cc
 8000f52:	2001      	movcc	r0, #1
 8000f54:	2000      	movcs	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_f2iz>:
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f64:	d30f      	bcc.n	8000f86 <__aeabi_f2iz+0x2a>
 8000f66:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6e:	d90d      	bls.n	8000f8c <__aeabi_f2iz+0x30>
 8000f70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f78:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f7c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f80:	bf18      	it	ne
 8000f82:	4240      	negne	r0, r0
 8000f84:	4770      	bx	lr
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4770      	bx	lr
 8000f8c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f90:	d101      	bne.n	8000f96 <__aeabi_f2iz+0x3a>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	d105      	bne.n	8000fa2 <__aeabi_f2iz+0x46>
 8000f96:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f9a:	bf08      	it	eq
 8000f9c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000fa0:	4770      	bx	lr
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4770      	bx	lr

08000fa8 <__aeabi_d2lz>:
 8000fa8:	b538      	push	{r3, r4, r5, lr}
 8000faa:	2200      	movs	r2, #0
 8000fac:	2300      	movs	r3, #0
 8000fae:	4604      	mov	r4, r0
 8000fb0:	460d      	mov	r5, r1
 8000fb2:	f7ff fdb7 	bl	8000b24 <__aeabi_dcmplt>
 8000fb6:	b928      	cbnz	r0, 8000fc4 <__aeabi_d2lz+0x1c>
 8000fb8:	4620      	mov	r0, r4
 8000fba:	4629      	mov	r1, r5
 8000fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fc0:	f000 b80a 	b.w	8000fd8 <__aeabi_d2ulz>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000fca:	f000 f805 	bl	8000fd8 <__aeabi_d2ulz>
 8000fce:	4240      	negs	r0, r0
 8000fd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fd4:	bd38      	pop	{r3, r4, r5, pc}
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_d2ulz>:
 8000fd8:	b5d0      	push	{r4, r6, r7, lr}
 8000fda:	2200      	movs	r2, #0
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <__aeabi_d2ulz+0x34>)
 8000fde:	4606      	mov	r6, r0
 8000fe0:	460f      	mov	r7, r1
 8000fe2:	f7ff fb2d 	bl	8000640 <__aeabi_dmul>
 8000fe6:	f7ff fdc5 	bl	8000b74 <__aeabi_d2uiz>
 8000fea:	4604      	mov	r4, r0
 8000fec:	f7ff faae 	bl	800054c <__aeabi_ui2d>
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <__aeabi_d2ulz+0x38>)
 8000ff4:	f7ff fb24 	bl	8000640 <__aeabi_dmul>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4630      	mov	r0, r6
 8000ffe:	4639      	mov	r1, r7
 8001000:	f7ff f966 	bl	80002d0 <__aeabi_dsub>
 8001004:	f7ff fdb6 	bl	8000b74 <__aeabi_d2uiz>
 8001008:	4621      	mov	r1, r4
 800100a:	bdd0      	pop	{r4, r6, r7, pc}
 800100c:	3df00000 	.word	0x3df00000
 8001010:	41f00000 	.word	0x41f00000

08001014 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001024:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <MX_ADC1_Init+0x74>)
 8001026:	4a19      	ldr	r2, [pc, #100]	@ (800108c <MX_ADC1_Init+0x78>)
 8001028:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800102a:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <MX_ADC1_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001030:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <MX_ADC1_Init+0x74>)
 8001032:	2201      	movs	r2, #1
 8001034:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001036:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <MX_ADC1_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <MX_ADC1_Init+0x74>)
 800103e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001042:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001044:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <MX_ADC1_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800104a:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <MX_ADC1_Init+0x74>)
 800104c:	2201      	movs	r2, #1
 800104e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001050:	480d      	ldr	r0, [pc, #52]	@ (8001088 <MX_ADC1_Init+0x74>)
 8001052:	f001 f899 	bl	8002188 <HAL_ADC_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800105c:	f000 fdba 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001060:	2308      	movs	r3, #8
 8001062:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001064:	2301      	movs	r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	@ (8001088 <MX_ADC1_Init+0x74>)
 8001072:	f001 fb21 	bl	80026b8 <HAL_ADC_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800107c:	f000 fdaa 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000230 	.word	0x20000230
 800108c:	40012400 	.word	0x40012400

08001090 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a14      	ldr	r2, [pc, #80]	@ (80010fc <HAL_ADC_MspInit+0x6c>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d121      	bne.n	80010f4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010b0:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <HAL_ADC_MspInit+0x70>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a12      	ldr	r2, [pc, #72]	@ (8001100 <HAL_ADC_MspInit+0x70>)
 80010b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <HAL_ADC_MspInit+0x70>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <HAL_ADC_MspInit+0x70>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001100 <HAL_ADC_MspInit+0x70>)
 80010ce:	f043 0308 	orr.w	r3, r3, #8
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <HAL_ADC_MspInit+0x70>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0308 	and.w	r3, r3, #8
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010e0:	2301      	movs	r3, #1
 80010e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e4:	2303      	movs	r3, #3
 80010e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4619      	mov	r1, r3
 80010ee:	4805      	ldr	r0, [pc, #20]	@ (8001104 <HAL_ADC_MspInit+0x74>)
 80010f0:	f001 fee4 	bl	8002ebc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010f4:	bf00      	nop
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40012400 	.word	0x40012400
 8001100:	40021000 	.word	0x40021000
 8001104:	40010c00 	.word	0x40010c00

08001108 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111c:	4b3e      	ldr	r3, [pc, #248]	@ (8001218 <MX_GPIO_Init+0x110>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a3d      	ldr	r2, [pc, #244]	@ (8001218 <MX_GPIO_Init+0x110>)
 8001122:	f043 0310 	orr.w	r3, r3, #16
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b3b      	ldr	r3, [pc, #236]	@ (8001218 <MX_GPIO_Init+0x110>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0310 	and.w	r3, r3, #16
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001134:	4b38      	ldr	r3, [pc, #224]	@ (8001218 <MX_GPIO_Init+0x110>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	4a37      	ldr	r2, [pc, #220]	@ (8001218 <MX_GPIO_Init+0x110>)
 800113a:	f043 0320 	orr.w	r3, r3, #32
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	4b35      	ldr	r3, [pc, #212]	@ (8001218 <MX_GPIO_Init+0x110>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0320 	and.w	r3, r3, #32
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	4b32      	ldr	r3, [pc, #200]	@ (8001218 <MX_GPIO_Init+0x110>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	4a31      	ldr	r2, [pc, #196]	@ (8001218 <MX_GPIO_Init+0x110>)
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	4b2f      	ldr	r3, [pc, #188]	@ (8001218 <MX_GPIO_Init+0x110>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001164:	4b2c      	ldr	r3, [pc, #176]	@ (8001218 <MX_GPIO_Init+0x110>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a2b      	ldr	r2, [pc, #172]	@ (8001218 <MX_GPIO_Init+0x110>)
 800116a:	f043 0308 	orr.w	r3, r3, #8
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b29      	ldr	r3, [pc, #164]	@ (8001218 <MX_GPIO_Init+0x110>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f003 0308 	and.w	r3, r3, #8
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001182:	4826      	ldr	r0, [pc, #152]	@ (800121c <MX_GPIO_Init+0x114>)
 8001184:	f002 f835 	bl	80031f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001188:	2200      	movs	r2, #0
 800118a:	21fc      	movs	r1, #252	@ 0xfc
 800118c:	4824      	ldr	r0, [pc, #144]	@ (8001220 <MX_GPIO_Init+0x118>)
 800118e:	f002 f830 	bl	80031f2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 4172 	mov.w	r1, #61952	@ 0xf200
 8001198:	4822      	ldr	r0, [pc, #136]	@ (8001224 <MX_GPIO_Init+0x11c>)
 800119a:	f002 f82a 	bl	80031f2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800119e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	4619      	mov	r1, r3
 80011b6:	4819      	ldr	r0, [pc, #100]	@ (800121c <MX_GPIO_Init+0x114>)
 80011b8:	f001 fe80 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80011bc:	23fc      	movs	r3, #252	@ 0xfc
 80011be:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2302      	movs	r3, #2
 80011ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4619      	mov	r1, r3
 80011d2:	4813      	ldr	r0, [pc, #76]	@ (8001220 <MX_GPIO_Init+0x118>)
 80011d4:	f001 fe72 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011d8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e6:	f107 0310 	add.w	r3, r7, #16
 80011ea:	4619      	mov	r1, r3
 80011ec:	480d      	ldr	r0, [pc, #52]	@ (8001224 <MX_GPIO_Init+0x11c>)
 80011ee:	f001 fe65 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80011f2:	f44f 4372 	mov.w	r3, #61952	@ 0xf200
 80011f6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2302      	movs	r3, #2
 8001202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	4619      	mov	r1, r3
 800120a:	4806      	ldr	r0, [pc, #24]	@ (8001224 <MX_GPIO_Init+0x11c>)
 800120c:	f001 fe56 	bl	8002ebc <HAL_GPIO_Init>

}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40021000 	.word	0x40021000
 800121c:	40011000 	.word	0x40011000
 8001220:	40010800 	.word	0x40010800
 8001224:	40010c00 	.word	0x40010c00

08001228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{ 
 8001228:	b580      	push	{r7, lr}
 800122a:	b0a6      	sub	sp, #152	@ 0x98
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint16_t AD_RES = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
  uint16_t last_AD_RES = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
  uint8_t Stepper1_Dir = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001240:	f000 ff1c 	bl	800207c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001244:	f000 fc60 	bl	8001b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001248:	f7ff ff5e 	bl	8001108 <MX_GPIO_Init>
  MX_ADC1_Init();
 800124c:	f7ff fee2 	bl	8001014 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001250:	f000 fe00 	bl	8001e54 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001254:	f000 fe6e 	bl	8001f34 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // 初始化步进电机
  STEPPERS_Init();
 8001258:	f004 fcc8 	bl	8005bec <STEPPERS_Init>
  STEPPER_SetSpeed(0, 14); // 设置步进电机速度
 800125c:	210e      	movs	r1, #14
 800125e:	2000      	movs	r0, #0
 8001260:	f004 fdd6 	bl	8005e10 <STEPPER_SetSpeed>

  LCD16X2_Init(MyLCD);
 8001264:	2000      	movs	r0, #0
 8001266:	f004 fa09 	bl	800567c <LCD16X2_Init>
  LCD16X2_Clear(MyLCD);
 800126a:	2000      	movs	r0, #0
 800126c:	f004 f986 	bl	800557c <LCD16X2_Clear>
  int value = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	667b      	str	r3, [r7, #100]	@ 0x64
  float measuredValue;  // 测量到的值
  measuredValue = 0.0f; // 初始化变量
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	663b      	str	r3, [r7, #96]	@ 0x60
  float voltage = 0.00;
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int alarm_active = 0;  // �Ƿ񱨾�״̬   0 for paused, 1 for active
 8001280:	2300      	movs	r3, #0
 8001282:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  int led_state = 0;     // LED��״̬  0 for OFF, 1 for ON
 8001286:	2300      	movs	r3, #0
 8001288:	65bb      	str	r3, [r7, #88]	@ 0x58
  int system_active = 1; // ϵͳ��������ͣ��1 for running,0 for stopped
 800128a:	2301      	movs	r3, #1
 800128c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  float alarm_value_high = 2.00;
 8001290:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001294:	657b      	str	r3, [r7, #84]	@ 0x54
  float alarm_value_low = 1.00;
 8001296:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800129a:	653b      	str	r3, [r7, #80]	@ 0x50
  int loop_counter = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 receiveData[1] = '1';
 80012a2:	4bc3      	ldr	r3, [pc, #780]	@ (80015b0 <main+0x388>)
 80012a4:	2231      	movs	r2, #49	@ 0x31
 80012a6:	705a      	strb	r2, [r3, #1]
        receiveData[2] = '1';
 80012a8:	4bc1      	ldr	r3, [pc, #772]	@ (80015b0 <main+0x388>)
 80012aa:	2231      	movs	r2, #49	@ 0x31
 80012ac:	709a      	strb	r2, [r3, #2]
        receiveData[3] = '2';
 80012ae:	4bc0      	ldr	r3, [pc, #768]	@ (80015b0 <main+0x388>)
 80012b0:	2232      	movs	r2, #50	@ 0x32
 80012b2:	70da      	strb	r2, [r3, #3]
        receiveData[4] = '.';
 80012b4:	4bbe      	ldr	r3, [pc, #760]	@ (80015b0 <main+0x388>)
 80012b6:	222e      	movs	r2, #46	@ 0x2e
 80012b8:	711a      	strb	r2, [r3, #4]
        receiveData[5] = '3';
 80012ba:	4bbd      	ldr	r3, [pc, #756]	@ (80015b0 <main+0x388>)
 80012bc:	2233      	movs	r2, #51	@ 0x33
 80012be:	715a      	strb	r2, [r3, #5]
        receiveData[6] = '1';
 80012c0:	4bbb      	ldr	r3, [pc, #748]	@ (80015b0 <main+0x388>)
 80012c2:	2231      	movs	r2, #49	@ 0x31
 80012c4:	719a      	strb	r2, [r3, #6]
        receiveData[7] = '.';
 80012c6:	4bba      	ldr	r3, [pc, #744]	@ (80015b0 <main+0x388>)
 80012c8:	222e      	movs	r2, #46	@ 0x2e
 80012ca:	71da      	strb	r2, [r3, #7]
        receiveData[8] = '4';
 80012cc:	4bb8      	ldr	r3, [pc, #736]	@ (80015b0 <main+0x388>)
 80012ce:	2234      	movs	r2, #52	@ 0x34
 80012d0:	721a      	strb	r2, [r3, #8]
   
  HAL_ADCEx_Calibration_Start(&hadc1);
 80012d2:	48b8      	ldr	r0, [pc, #736]	@ (80015b4 <main+0x38c>)
 80012d4:	f001 fb84 	bl	80029e0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 80012d8:	48b6      	ldr	r0, [pc, #728]	@ (80015b4 <main+0x38c>)
 80012da:	f001 f82d 	bl	8002338 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80012de:	f04f 31ff 	mov.w	r1, #4294967295
 80012e2:	48b4      	ldr	r0, [pc, #720]	@ (80015b4 <main+0x38c>)
 80012e4:	f001 f8d6 	bl	8002494 <HAL_ADC_PollForConversion>
     HAL_UART_Receive_IT(&huart1, (uint8_t *)receivedData, strlen(receivedData));
 80012e8:	48b3      	ldr	r0, [pc, #716]	@ (80015b8 <main+0x390>)
 80012ea:	f7fe ff31 	bl	8000150 <strlen>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	49b0      	ldr	r1, [pc, #704]	@ (80015b8 <main+0x390>)
 80012f6:	48b1      	ldr	r0, [pc, #708]	@ (80015bc <main+0x394>)
 80012f8:	f003 fa20 	bl	800473c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  { HAL_UART_Receive(&huart1, (uint8_t *)receiveData, sizeof(receiveData),500);
 80012fc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001300:	220a      	movs	r2, #10
 8001302:	49ab      	ldr	r1, [pc, #684]	@ (80015b0 <main+0x388>)
 8001304:	48ad      	ldr	r0, [pc, #692]	@ (80015bc <main+0x394>)
 8001306:	f003 f982 	bl	800460e <HAL_UART_Receive>
    system_active = (receiveData[1] == '1') ? 1 : 0;
 800130a:	4ba9      	ldr	r3, [pc, #676]	@ (80015b0 <main+0x388>)
 800130c:	785b      	ldrb	r3, [r3, #1]
 800130e:	2b31      	cmp	r3, #49	@ 0x31
 8001310:	bf0c      	ite	eq
 8001312:	2301      	moveq	r3, #1
 8001314:	2300      	movne	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    alarm_active = (receiveData[2] == '1') ? 1 : 0;
 800131c:	4ba4      	ldr	r3, [pc, #656]	@ (80015b0 <main+0x388>)
 800131e:	789b      	ldrb	r3, [r3, #2]
 8001320:	2b31      	cmp	r3, #49	@ 0x31
 8001322:	bf0c      	ite	eq
 8001324:	2301      	moveq	r3, #1
 8001326:	2300      	movne	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == GPIO_PIN_RESET)
 800132e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001332:	48a3      	ldr	r0, [pc, #652]	@ (80015c0 <main+0x398>)
 8001334:	f001 ff46 	bl	80031c4 <HAL_GPIO_ReadPin>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d103      	bne.n	8001346 <main+0x11e>
    {                    // Check if button is pressed (PB11 is low)
      system_active = 1; // Start the system
 800133e:	2301      	movs	r3, #1
 8001340:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001344:	e002      	b.n	800134c <main+0x124>
    }
    else
    {
      system_active = 0; // Stop the system
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    }

    value = HAL_ADC_GetValue(&hadc1);
 800134c:	4899      	ldr	r0, [pc, #612]	@ (80015b4 <main+0x38c>)
 800134e:	f001 f9a7 	bl	80026a0 <HAL_ADC_GetValue>
 8001352:	4603      	mov	r3, r0
 8001354:	667b      	str	r3, [r7, #100]	@ 0x64
    measuredValue = (value / 4095.0) * 3.3; // 生成0到3.3之间的电压
 8001356:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001358:	f7ff f908 	bl	800056c <__aeabi_i2d>
 800135c:	a390      	add	r3, pc, #576	@ (adr r3, 80015a0 <main+0x378>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	f7ff fa97 	bl	8000894 <__aeabi_ddiv>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	a38e      	add	r3, pc, #568	@ (adr r3, 80015a8 <main+0x380>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7ff f964 	bl	8000640 <__aeabi_dmul>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f7ff fc18 	bl	8000bb4 <__aeabi_d2f>
 8001384:	4603      	mov	r3, r0
 8001386:	663b      	str	r3, [r7, #96]	@ 0x60
    voltage = (value / 4095.0) * 3.3;
 8001388:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800138a:	f7ff f8ef 	bl	800056c <__aeabi_i2d>
 800138e:	a384      	add	r3, pc, #528	@ (adr r3, 80015a0 <main+0x378>)
 8001390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001394:	f7ff fa7e 	bl	8000894 <__aeabi_ddiv>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	a381      	add	r3, pc, #516	@ (adr r3, 80015a8 <main+0x380>)
 80013a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a6:	f7ff f94b 	bl	8000640 <__aeabi_dmul>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff fbff 	bl	8000bb4 <__aeabi_d2f>
 80013b6:	4603      	mov	r3, r0
 80013b8:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_RESET) // ????��鱨����PB10
 80013ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013be:	4880      	ldr	r0, [pc, #512]	@ (80015c0 <main+0x398>)
 80013c0:	f001 ff00 	bl	80031c4 <HAL_GPIO_ReadPin>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d103      	bne.n	80013d2 <main+0x1aa>
    {
      alarm_active = 1; // ????
 80013ca:	2301      	movs	r3, #1
 80013cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80013d0:	e002      	b.n	80013d8 <main+0x1b0>
    }
    else
    {
      alarm_active = 0; // ????
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  




    char alarmHighStr[3] = {receiveData[3], receiveData[4], receiveData[5]};
 80013d8:	4b75      	ldr	r3, [pc, #468]	@ (80015b0 <main+0x388>)
 80013da:	78db      	ldrb	r3, [r3, #3]
 80013dc:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 80013e0:	4b73      	ldr	r3, [pc, #460]	@ (80015b0 <main+0x388>)
 80013e2:	791b      	ldrb	r3, [r3, #4]
 80013e4:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 80013e8:	4b71      	ldr	r3, [pc, #452]	@ (80015b0 <main+0x388>)
 80013ea:	795b      	ldrb	r3, [r3, #5]
 80013ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    char alarmLowStr[3] = {receiveData[6], receiveData[7], receiveData[8]};
 80013f0:	4b6f      	ldr	r3, [pc, #444]	@ (80015b0 <main+0x388>)
 80013f2:	799b      	ldrb	r3, [r3, #6]
 80013f4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 80013f8:	4b6d      	ldr	r3, [pc, #436]	@ (80015b0 <main+0x388>)
 80013fa:	79db      	ldrb	r3, [r3, #7]
 80013fc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8001400:	4b6b      	ldr	r3, [pc, #428]	@ (80015b0 <main+0x388>)
 8001402:	7a1b      	ldrb	r3, [r3, #8]
 8001404:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

    alarm_value_high = atof(alarmHighStr);
 8001408:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800140c:	4618      	mov	r0, r3
 800140e:	f005 f8bb 	bl	8006588 <atof>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f7ff fbcb 	bl	8000bb4 <__aeabi_d2f>
 800141e:	4603      	mov	r3, r0
 8001420:	657b      	str	r3, [r7, #84]	@ 0x54
    alarm_value_low = atof(alarmLowStr);
 8001422:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001426:	4618      	mov	r0, r3
 8001428:	f005 f8ae 	bl	8006588 <atof>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff fbbe 	bl	8000bb4 <__aeabi_d2f>
 8001438:	4603      	mov	r3, r0
 800143a:	653b      	str	r3, [r7, #80]	@ 0x50
    // ??????2V??????,LED????
    if (system_active)
 800143c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 831f 	beq.w	8001a84 <main+0x85c>
    { // If system is running

      // If voltage > alarm_value_high||voltage < alarm_value_low, blink the LED
      char uhbuffer[10]; // 3个字符 + 小数点 + 结束符
      char ulbuffer[10]; // 3个字符 + 小数点 + 结束符
      uhbuffer[0] = receiveData[3];
 8001446:	4b5a      	ldr	r3, [pc, #360]	@ (80015b0 <main+0x388>)
 8001448:	78db      	ldrb	r3, [r3, #3]
 800144a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
      uhbuffer[1] = '.';
 800144e:	232e      	movs	r3, #46	@ 0x2e
 8001450:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
      uhbuffer[2] = receiveData[5];
 8001454:	4b56      	ldr	r3, [pc, #344]	@ (80015b0 <main+0x388>)
 8001456:	795b      	ldrb	r3, [r3, #5]
 8001458:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
      uhbuffer[3] = '\0';
 800145c:	2300      	movs	r3, #0
 800145e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      ulbuffer[0] = receiveData[6];
 8001462:	4b53      	ldr	r3, [pc, #332]	@ (80015b0 <main+0x388>)
 8001464:	799b      	ldrb	r3, [r3, #6]
 8001466:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
      ulbuffer[1] = '.';
 800146a:	232e      	movs	r3, #46	@ 0x2e
 800146c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      ulbuffer[2] = receiveData[8];
 8001470:	4b4f      	ldr	r3, [pc, #316]	@ (80015b0 <main+0x388>)
 8001472:	7a1b      	ldrb	r3, [r3, #8]
 8001474:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
      ulbuffer[3] = '\0';
 8001478:	2300      	movs	r3, #0
 800147a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

      LCD16X2_Set_Cursor(MyLCD, 2, 7);
 800147e:	2207      	movs	r2, #7
 8001480:	2102      	movs	r1, #2
 8001482:	2000      	movs	r0, #0
 8001484:	f004 f8ba 	bl	80055fc <LCD16X2_Set_Cursor>
      LCD16X2_Write_String(MyLCD, "UH");
 8001488:	494e      	ldr	r1, [pc, #312]	@ (80015c4 <main+0x39c>)
 800148a:	2000      	movs	r0, #0
 800148c:	f004 fb68 	bl	8005b60 <LCD16X2_Write_String>

      LCD16X2_Set_Cursor(MyLCD, 2, 12);
 8001490:	220c      	movs	r2, #12
 8001492:	2102      	movs	r1, #2
 8001494:	2000      	movs	r0, #0
 8001496:	f004 f8b1 	bl	80055fc <LCD16X2_Set_Cursor>
      LCD16X2_Write_String(MyLCD, "UL");
 800149a:	494b      	ldr	r1, [pc, #300]	@ (80015c8 <main+0x3a0>)
 800149c:	2000      	movs	r0, #0
 800149e:	f004 fb5f 	bl	8005b60 <LCD16X2_Write_String>
      // 在 LCD 上显示 uhbuffer 和 ulbuffer
      LCD16X2_Set_Cursor(MyLCD, 2, 9);
 80014a2:	2209      	movs	r2, #9
 80014a4:	2102      	movs	r1, #2
 80014a6:	2000      	movs	r0, #0
 80014a8:	f004 f8a8 	bl	80055fc <LCD16X2_Set_Cursor>
      LCD16X2_Write_String(MyLCD, uhbuffer);
 80014ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014b0:	4619      	mov	r1, r3
 80014b2:	2000      	movs	r0, #0
 80014b4:	f004 fb54 	bl	8005b60 <LCD16X2_Write_String>

      LCD16X2_Set_Cursor(MyLCD, 2, 14);
 80014b8:	220e      	movs	r2, #14
 80014ba:	2102      	movs	r1, #2
 80014bc:	2000      	movs	r0, #0
 80014be:	f004 f89d 	bl	80055fc <LCD16X2_Set_Cursor>
      LCD16X2_Write_String(MyLCD, ulbuffer);
 80014c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c6:	4619      	mov	r1, r3
 80014c8:	2000      	movs	r0, #0
 80014ca:	f004 fb49 	bl	8005b60 <LCD16X2_Write_String>
      if (system_active)
 80014ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d009      	beq.n	80014ea <main+0x2c2>
      {
        LCD16X2_Set_Cursor(MyLCD, 1, 15);
 80014d6:	220f      	movs	r2, #15
 80014d8:	2101      	movs	r1, #1
 80014da:	2000      	movs	r0, #0
 80014dc:	f004 f88e 	bl	80055fc <LCD16X2_Set_Cursor>
        LCD16X2_Write_String(MyLCD, "s");
 80014e0:	493a      	ldr	r1, [pc, #232]	@ (80015cc <main+0x3a4>)
 80014e2:	2000      	movs	r0, #0
 80014e4:	f004 fb3c 	bl	8005b60 <LCD16X2_Write_String>
 80014e8:	e008      	b.n	80014fc <main+0x2d4>
      }
      else
      {
        LCD16X2_Set_Cursor(MyLCD, 1, 15);
 80014ea:	220f      	movs	r2, #15
 80014ec:	2101      	movs	r1, #1
 80014ee:	2000      	movs	r0, #0
 80014f0:	f004 f884 	bl	80055fc <LCD16X2_Set_Cursor>
        LCD16X2_Write_String(MyLCD, " ");
 80014f4:	4936      	ldr	r1, [pc, #216]	@ (80015d0 <main+0x3a8>)
 80014f6:	2000      	movs	r0, #0
 80014f8:	f004 fb32 	bl	8005b60 <LCD16X2_Write_String>
      }

      if (alarm_active)
 80014fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001500:	2b00      	cmp	r3, #0
 8001502:	d009      	beq.n	8001518 <main+0x2f0>
      {
        LCD16X2_Set_Cursor(MyLCD, 1, 16);
 8001504:	2210      	movs	r2, #16
 8001506:	2101      	movs	r1, #1
 8001508:	2000      	movs	r0, #0
 800150a:	f004 f877 	bl	80055fc <LCD16X2_Set_Cursor>
        LCD16X2_Write_String(MyLCD, "a");
 800150e:	4931      	ldr	r1, [pc, #196]	@ (80015d4 <main+0x3ac>)
 8001510:	2000      	movs	r0, #0
 8001512:	f004 fb25 	bl	8005b60 <LCD16X2_Write_String>
 8001516:	e008      	b.n	800152a <main+0x302>
      }
      else
      {
        LCD16X2_Set_Cursor(MyLCD, 1, 16);
 8001518:	2210      	movs	r2, #16
 800151a:	2101      	movs	r1, #1
 800151c:	2000      	movs	r0, #0
 800151e:	f004 f86d 	bl	80055fc <LCD16X2_Set_Cursor>
        LCD16X2_Write_String(MyLCD, " ");
 8001522:	492b      	ldr	r1, [pc, #172]	@ (80015d0 <main+0x3a8>)
 8001524:	2000      	movs	r0, #0
 8001526:	f004 fb1b 	bl	8005b60 <LCD16X2_Write_String>
      }
      HAL_Delay(1);
 800152a:	2001      	movs	r0, #1
 800152c:	f000 fe08 	bl	8002140 <HAL_Delay>

      LCD16X2_Set_Cursor(MyLCD, 1, 1);
 8001530:	2201      	movs	r2, #1
 8001532:	2101      	movs	r1, #1
 8001534:	2000      	movs	r0, #0
 8001536:	f004 f861 	bl	80055fc <LCD16X2_Set_Cursor>
      LCD16X2_Write_String(MyLCD, "U=");
 800153a:	4927      	ldr	r1, [pc, #156]	@ (80015d8 <main+0x3b0>)
 800153c:	2000      	movs	r0, #0
 800153e:	f004 fb0f 	bl	8005b60 <LCD16X2_Write_String>

      char buffer[10];
      int intPart = (int)measuredValue;                      // 整数部分
 8001542:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001544:	f7ff fd0a 	bl	8000f5c <__aeabi_f2iz>
 8001548:	4603      	mov	r3, r0
 800154a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      int fracPart = (int)((measuredValue - intPart) * 100); // 小数部分，保留两位小数
 800154e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001552:	f7ff fc39 	bl	8000dc8 <__aeabi_i2f>
 8001556:	4603      	mov	r3, r0
 8001558:	4619      	mov	r1, r3
 800155a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800155c:	f7ff fb7e 	bl	8000c5c <__aeabi_fsub>
 8001560:	4603      	mov	r3, r0
 8001562:	491e      	ldr	r1, [pc, #120]	@ (80015dc <main+0x3b4>)
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe fdfb 	bl	8000160 <__aeabi_fmul>
 800156a:	4603      	mov	r3, r0
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fcf5 	bl	8000f5c <__aeabi_f2iz>
 8001572:	4603      	mov	r3, r0
 8001574:	64fb      	str	r3, [r7, #76]	@ 0x4c

      // 将整数部分转换为字符串
      int i = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      if (intPart == 0)
 800157c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001580:	2b00      	cmp	r3, #0
 8001582:	d150      	bne.n	8001626 <main+0x3fe>
      {
        buffer[i++] = '0';
 8001584:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800158e:	3398      	adds	r3, #152	@ 0x98
 8001590:	443b      	add	r3, r7
 8001592:	2230      	movs	r2, #48	@ 0x30
 8001594:	f803 2c80 	strb.w	r2, [r3, #-128]
 8001598:	e079      	b.n	800168e <main+0x466>
 800159a:	bf00      	nop
 800159c:	f3af 8000 	nop.w
 80015a0:	00000000 	.word	0x00000000
 80015a4:	40affe00 	.word	0x40affe00
 80015a8:	66666666 	.word	0x66666666
 80015ac:	400a6666 	.word	0x400a6666
 80015b0:	20000260 	.word	0x20000260
 80015b4:	20000230 	.word	0x20000230
 80015b8:	2000026c 	.word	0x2000026c
 80015bc:	200002c4 	.word	0x200002c4
 80015c0:	40010c00 	.word	0x40010c00
 80015c4:	08009508 	.word	0x08009508
 80015c8:	0800950c 	.word	0x0800950c
 80015cc:	08009510 	.word	0x08009510
 80015d0:	08009514 	.word	0x08009514
 80015d4:	08009518 	.word	0x08009518
 80015d8:	0800951c 	.word	0x0800951c
 80015dc:	42c80000 	.word	0x42c80000
      }
      else
      {
        while (intPart > 0)
        {
          buffer[i++] = (intPart % 10) + '0';
 80015e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80015e4:	4bb7      	ldr	r3, [pc, #732]	@ (80018c4 <main+0x69c>)
 80015e6:	fb83 1302 	smull	r1, r3, r3, r2
 80015ea:	1099      	asrs	r1, r3, #2
 80015ec:	17d3      	asrs	r3, r2, #31
 80015ee:	1ac9      	subs	r1, r1, r3
 80015f0:	460b      	mov	r3, r1
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	1ad1      	subs	r1, r2, r3
 80015fa:	b2ca      	uxtb	r2, r1
 80015fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001600:	1c59      	adds	r1, r3, #1
 8001602:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8001606:	3230      	adds	r2, #48	@ 0x30
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	3398      	adds	r3, #152	@ 0x98
 800160c:	443b      	add	r3, r7
 800160e:	f803 2c80 	strb.w	r2, [r3, #-128]
          intPart /= 10;
 8001612:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001616:	4aab      	ldr	r2, [pc, #684]	@ (80018c4 <main+0x69c>)
 8001618:	fb82 1203 	smull	r1, r2, r2, r3
 800161c:	1092      	asrs	r2, r2, #2
 800161e:	17db      	asrs	r3, r3, #31
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        while (intPart > 0)
 8001626:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800162a:	2b00      	cmp	r3, #0
 800162c:	dcd8      	bgt.n	80015e0 <main+0x3b8>
        }
        // 反转整数部分字符串
        for (int j = 0; j < i / 2; j++)
 800162e:	2300      	movs	r3, #0
 8001630:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001632:	e023      	b.n	800167c <main+0x454>
        {
          char temp = buffer[j];
 8001634:	f107 0218 	add.w	r2, r7, #24
 8001638:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800163a:	4413      	add	r3, r2
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
          buffer[j] = buffer[i - j - 1];
 8001642:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001646:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	3b01      	subs	r3, #1
 800164c:	3398      	adds	r3, #152	@ 0x98
 800164e:	443b      	add	r3, r7
 8001650:	f813 1c80 	ldrb.w	r1, [r3, #-128]
 8001654:	f107 0218 	add.w	r2, r7, #24
 8001658:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800165a:	4413      	add	r3, r2
 800165c:	460a      	mov	r2, r1
 800165e:	701a      	strb	r2, [r3, #0]
          buffer[i - j - 1] = temp;
 8001660:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001664:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	3b01      	subs	r3, #1
 800166a:	3398      	adds	r3, #152	@ 0x98
 800166c:	443b      	add	r3, r7
 800166e:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8001672:	f803 2c80 	strb.w	r2, [r3, #-128]
        for (int j = 0; j < i / 2; j++)
 8001676:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001678:	3301      	adds	r3, #1
 800167a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800167c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001680:	0fda      	lsrs	r2, r3, #31
 8001682:	4413      	add	r3, r2
 8001684:	105b      	asrs	r3, r3, #1
 8001686:	461a      	mov	r2, r3
 8001688:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800168a:	4293      	cmp	r3, r2
 800168c:	dbd2      	blt.n	8001634 <main+0x40c>
        }
      }

      buffer[i++] = '.'; // 添加小数点
 800168e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001698:	3398      	adds	r3, #152	@ 0x98
 800169a:	443b      	add	r3, r7
 800169c:	222e      	movs	r2, #46	@ 0x2e
 800169e:	f803 2c80 	strb.w	r2, [r3, #-128]

      // 将小数部分转换为字符串
      buffer[i++] = (fracPart / 10) + '0'; // 十位
 80016a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016a4:	4a87      	ldr	r2, [pc, #540]	@ (80018c4 <main+0x69c>)
 80016a6:	fb82 1203 	smull	r1, r2, r2, r3
 80016aa:	1092      	asrs	r2, r2, #2
 80016ac:	17db      	asrs	r3, r3, #31
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016b6:	1c59      	adds	r1, r3, #1
 80016b8:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80016bc:	3230      	adds	r2, #48	@ 0x30
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	3398      	adds	r3, #152	@ 0x98
 80016c2:	443b      	add	r3, r7
 80016c4:	f803 2c80 	strb.w	r2, [r3, #-128]
      buffer[i++] = (fracPart % 10) + '0'; // 个位
 80016c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80016ca:	4b7e      	ldr	r3, [pc, #504]	@ (80018c4 <main+0x69c>)
 80016cc:	fb83 1302 	smull	r1, r3, r3, r2
 80016d0:	1099      	asrs	r1, r3, #2
 80016d2:	17d3      	asrs	r3, r2, #31
 80016d4:	1ac9      	subs	r1, r1, r3
 80016d6:	460b      	mov	r3, r1
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	1ad1      	subs	r1, r2, r3
 80016e0:	b2ca      	uxtb	r2, r1
 80016e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016e6:	1c59      	adds	r1, r3, #1
 80016e8:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80016ec:	3230      	adds	r2, #48	@ 0x30
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	3398      	adds	r3, #152	@ 0x98
 80016f2:	443b      	add	r3, r7
 80016f4:	f803 2c80 	strb.w	r2, [r3, #-128]

      buffer[i++] = 'V'; // 添加单位 "V"
 80016f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001702:	3398      	adds	r3, #152	@ 0x98
 8001704:	443b      	add	r3, r7
 8001706:	2256      	movs	r2, #86	@ 0x56
 8001708:	f803 2c80 	strb.w	r2, [r3, #-128]
      buffer[i] = '\0';
 800170c:	f107 0218 	add.w	r2, r7, #24
 8001710:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001714:	4413      	add	r3, r2
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]

      LCD16X2_Set_Cursor(MyLCD, 1, 3);
 800171a:	2203      	movs	r2, #3
 800171c:	2101      	movs	r1, #1
 800171e:	2000      	movs	r0, #0
 8001720:	f003 ff6c 	bl	80055fc <LCD16X2_Set_Cursor>
      LCD16X2_Write_String(MyLCD, buffer);
 8001724:	f107 0318 	add.w	r3, r7, #24
 8001728:	4619      	mov	r1, r3
 800172a:	2000      	movs	r0, #0
 800172c:	f004 fa18 	bl	8005b60 <LCD16X2_Write_String>

      LCD16X2_Set_Cursor(MyLCD, 2, 1);
 8001730:	2201      	movs	r2, #1
 8001732:	2102      	movs	r1, #2
 8001734:	2000      	movs	r0, #0
 8001736:	f003 ff61 	bl	80055fc <LCD16X2_Set_Cursor>
      LCD16X2_Write_String(MyLCD, "A=");
 800173a:	4963      	ldr	r1, [pc, #396]	@ (80018c8 <main+0x6a0>)
 800173c:	2000      	movs	r0, #0
 800173e:	f004 fa0f 	bl	8005b60 <LCD16X2_Write_String>
      int angle = value * 180 / 4095;
 8001742:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001744:	22b4      	movs	r2, #180	@ 0xb4
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	4a60      	ldr	r2, [pc, #384]	@ (80018cc <main+0x6a4>)
 800174c:	fb82 1203 	smull	r1, r2, r2, r3
 8001750:	441a      	add	r2, r3
 8001752:	12d2      	asrs	r2, r2, #11
 8001754:	17db      	asrs	r3, r3, #31
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	647b      	str	r3, [r7, #68]	@ 0x44
      char angleBuffer[10];     // 根据需要的大小进行声明
      int angleIntPart = angle; // 整数部分
 800175a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800175c:	67bb      	str	r3, [r7, #120]	@ 0x78
      int angleIndex = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	677b      	str	r3, [r7, #116]	@ 0x74
      if (angleIntPart == 0)
 8001762:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001764:	2b00      	cmp	r3, #0
 8001766:	d126      	bne.n	80017b6 <main+0x58e>
      {
        angleBuffer[angleIndex++] = '0';
 8001768:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	677a      	str	r2, [r7, #116]	@ 0x74
 800176e:	3398      	adds	r3, #152	@ 0x98
 8001770:	443b      	add	r3, r7
 8001772:	2230      	movs	r2, #48	@ 0x30
 8001774:	f803 2c8c 	strb.w	r2, [r3, #-140]
 8001778:	e068      	b.n	800184c <main+0x624>
      else
      {

        while (angleIntPart > 0)
        {
          angleBuffer[angleIndex++] = (angleIntPart % 10) + '0';
 800177a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800177c:	4b51      	ldr	r3, [pc, #324]	@ (80018c4 <main+0x69c>)
 800177e:	fb83 1302 	smull	r1, r3, r3, r2
 8001782:	1099      	asrs	r1, r3, #2
 8001784:	17d3      	asrs	r3, r2, #31
 8001786:	1ac9      	subs	r1, r1, r3
 8001788:	460b      	mov	r3, r1
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	1ad1      	subs	r1, r2, r3
 8001792:	b2ca      	uxtb	r2, r1
 8001794:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001796:	1c59      	adds	r1, r3, #1
 8001798:	6779      	str	r1, [r7, #116]	@ 0x74
 800179a:	3230      	adds	r2, #48	@ 0x30
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	3398      	adds	r3, #152	@ 0x98
 80017a0:	443b      	add	r3, r7
 80017a2:	f803 2c8c 	strb.w	r2, [r3, #-140]
          angleIntPart /= 10;
 80017a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80017a8:	4a46      	ldr	r2, [pc, #280]	@ (80018c4 <main+0x69c>)
 80017aa:	fb82 1203 	smull	r1, r2, r2, r3
 80017ae:	1092      	asrs	r2, r2, #2
 80017b0:	17db      	asrs	r3, r3, #31
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	67bb      	str	r3, [r7, #120]	@ 0x78
        while (angleIntPart > 0)
 80017b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	dcde      	bgt.n	800177a <main+0x552>
        }
        // 反转整数部分字符串
        for (int j = 0; j < angleIndex / 2; j++)
 80017bc:	2300      	movs	r3, #0
 80017be:	673b      	str	r3, [r7, #112]	@ 0x70
 80017c0:	e021      	b.n	8001806 <main+0x5de>
        {
          char temp = angleBuffer[j];
 80017c2:	f107 020c 	add.w	r2, r7, #12
 80017c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017c8:	4413      	add	r3, r2
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
          angleBuffer[j] = angleBuffer[angleIndex - j - 1];
 80017d0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80017d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	3b01      	subs	r3, #1
 80017d8:	3398      	adds	r3, #152	@ 0x98
 80017da:	443b      	add	r3, r7
 80017dc:	f813 1c8c 	ldrb.w	r1, [r3, #-140]
 80017e0:	f107 020c 	add.w	r2, r7, #12
 80017e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017e6:	4413      	add	r3, r2
 80017e8:	460a      	mov	r2, r1
 80017ea:	701a      	strb	r2, [r3, #0]
          angleBuffer[angleIndex - j - 1] = temp;
 80017ec:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80017ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	3b01      	subs	r3, #1
 80017f4:	3398      	adds	r3, #152	@ 0x98
 80017f6:	443b      	add	r3, r7
 80017f8:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80017fc:	f803 2c8c 	strb.w	r2, [r3, #-140]
        for (int j = 0; j < angleIndex / 2; j++)
 8001800:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001802:	3301      	adds	r3, #1
 8001804:	673b      	str	r3, [r7, #112]	@ 0x70
 8001806:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001808:	0fda      	lsrs	r2, r3, #31
 800180a:	4413      	add	r3, r2
 800180c:	105b      	asrs	r3, r3, #1
 800180e:	461a      	mov	r2, r3
 8001810:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001812:	4293      	cmp	r3, r2
 8001814:	dbd5      	blt.n	80017c2 <main+0x59a>
        }
      }
      while (angleIndex < 3)
 8001816:	e019      	b.n	800184c <main+0x624>
      {
        for (int j = angleIndex; j > 0; j--)
 8001818:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800181a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800181c:	e00e      	b.n	800183c <main+0x614>
        {
          angleBuffer[j] = angleBuffer[j - 1];
 800181e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001820:	3b01      	subs	r3, #1
 8001822:	3398      	adds	r3, #152	@ 0x98
 8001824:	443b      	add	r3, r7
 8001826:	f813 1c8c 	ldrb.w	r1, [r3, #-140]
 800182a:	f107 020c 	add.w	r2, r7, #12
 800182e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001830:	4413      	add	r3, r2
 8001832:	460a      	mov	r2, r1
 8001834:	701a      	strb	r2, [r3, #0]
        for (int j = angleIndex; j > 0; j--)
 8001836:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001838:	3b01      	subs	r3, #1
 800183a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800183c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800183e:	2b00      	cmp	r3, #0
 8001840:	dced      	bgt.n	800181e <main+0x5f6>
        }
        angleBuffer[0] = '0';
 8001842:	2330      	movs	r3, #48	@ 0x30
 8001844:	733b      	strb	r3, [r7, #12]
        angleIndex++;
 8001846:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001848:	3301      	adds	r3, #1
 800184a:	677b      	str	r3, [r7, #116]	@ 0x74
      while (angleIndex < 3)
 800184c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800184e:	2b02      	cmp	r3, #2
 8001850:	dde2      	ble.n	8001818 <main+0x5f0>
      }
      sprintf(angleBuffer, "%03d", angle);
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001858:	491d      	ldr	r1, [pc, #116]	@ (80018d0 <main+0x6a8>)
 800185a:	4618      	mov	r0, r3
 800185c:	f005 fd5e 	bl	800731c <siprintf>

                // 发送组合后的字符串
                HAL_UART_Transmit(&huart1, (uint8_t *)combinedBuffer, strlen(combinedBuffer), 100);
            // 添加字符串结束符 */

      LCD16X2_Set_Cursor(MyLCD, 2, 3);
 8001860:	2203      	movs	r2, #3
 8001862:	2102      	movs	r1, #2
 8001864:	2000      	movs	r0, #0
 8001866:	f003 fec9 	bl	80055fc <LCD16X2_Set_Cursor>
      LCD16X2_Write_String(MyLCD, angleBuffer);
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	4619      	mov	r1, r3
 8001870:	2000      	movs	r0, #0
 8001872:	f004 f975 	bl	8005b60 <LCD16X2_Write_String>
      LCD16X2_Set_Cursor(MyLCD, 2, 6);
 8001876:	2206      	movs	r2, #6
 8001878:	2102      	movs	r1, #2
 800187a:	2000      	movs	r0, #0
 800187c:	f003 febe 	bl	80055fc <LCD16X2_Set_Cursor>
      LCD16X2_Write_String(MyLCD, "d");
 8001880:	4914      	ldr	r1, [pc, #80]	@ (80018d4 <main+0x6ac>)
 8001882:	2000      	movs	r0, #0
 8001884:	f004 f96c 	bl	8005b60 <LCD16X2_Write_String>

      AD_RES = value;
 8001888:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800188a:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a

      if (AD_RES > last_AD_RES + 30)
 800188e:	f8b7 206a 	ldrh.w	r2, [r7, #106]	@ 0x6a
 8001892:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001896:	331e      	adds	r3, #30
 8001898:	429a      	cmp	r2, r3
 800189a:	dd1d      	ble.n	80018d8 <main+0x6b0>
      {
        // 电压变大，顺时针转动
        Stepper1_Dir = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
        STEPPER_Step_Blocking(0, (AD_RES - last_AD_RES) / 4, Stepper1_Dir);
 80018a2:	f8b7 206a 	ldrh.w	r2, [r7, #106]	@ 0x6a
 80018a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	da00      	bge.n	80018b2 <main+0x68a>
 80018b0:	3303      	adds	r3, #3
 80018b2:	109b      	asrs	r3, r3, #2
 80018b4:	4619      	mov	r1, r3
 80018b6:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 80018ba:	461a      	mov	r2, r3
 80018bc:	2000      	movs	r0, #0
 80018be:	f004 fd61 	bl	8006384 <STEPPER_Step_Blocking>
 80018c2:	e023      	b.n	800190c <main+0x6e4>
 80018c4:	66666667 	.word	0x66666667
 80018c8:	08009520 	.word	0x08009520
 80018cc:	80080081 	.word	0x80080081
 80018d0:	08009524 	.word	0x08009524
 80018d4:	0800952c 	.word	0x0800952c
      }
      else if (AD_RES < last_AD_RES - 30)
 80018d8:	f8b7 206a 	ldrh.w	r2, [r7, #106]	@ 0x6a
 80018dc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80018e0:	3b1e      	subs	r3, #30
 80018e2:	429a      	cmp	r2, r3
 80018e4:	da12      	bge.n	800190c <main+0x6e4>
      {
        // 电压变小，逆时针转动
        Stepper1_Dir = 1;
 80018e6:	2301      	movs	r3, #1
 80018e8:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
        STEPPER_Step_Blocking(0, (last_AD_RES - AD_RES) / 4, Stepper1_Dir);
 80018ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 80018f0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	da00      	bge.n	80018fc <main+0x6d4>
 80018fa:	3303      	adds	r3, #3
 80018fc:	109b      	asrs	r3, r3, #2
 80018fe:	4619      	mov	r1, r3
 8001900:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8001904:	461a      	mov	r2, r3
 8001906:	2000      	movs	r0, #0
 8001908:	f004 fd3c 	bl	8006384 <STEPPER_Step_Blocking>
      }

      last_AD_RES = AD_RES;
 800190c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8001910:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

      char valuebuffer[10];
      sprintf(valuebuffer, "%04d", value);
 8001914:	463b      	mov	r3, r7
 8001916:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001918:	4973      	ldr	r1, [pc, #460]	@ (8001ae8 <main+0x8c0>)
 800191a:	4618      	mov	r0, r3
 800191c:	f005 fcfe 	bl	800731c <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)valuebuffer, strlen(valuebuffer), 100);
 8001920:	463b      	mov	r3, r7
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fc14 	bl	8000150 <strlen>
 8001928:	4603      	mov	r3, r0
 800192a:	b29a      	uxth	r2, r3
 800192c:	4639      	mov	r1, r7
 800192e:	2364      	movs	r3, #100	@ 0x64
 8001930:	486e      	ldr	r0, [pc, #440]	@ (8001aec <main+0x8c4>)
 8001932:	f002 fde1 	bl	80044f8 <HAL_UART_Transmit>

      HAL_Delay(100);
 8001936:	2064      	movs	r0, #100	@ 0x64
 8001938:	f000 fc02 	bl	8002140 <HAL_Delay>

      if (alarm_active)
 800193c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 8098 	beq.w	8001a76 <main+0x84e>
      {

        // 根据 measuredValue 的值显示 "low!" 或 "high!"
        LCD16X2_Set_Cursor(MyLCD, 1, 9);
 8001946:	2209      	movs	r2, #9
 8001948:	2101      	movs	r1, #1
 800194a:	2000      	movs	r0, #0
 800194c:	f003 fe56 	bl	80055fc <LCD16X2_Set_Cursor>
        LCD16X2_Write_String(MyLCD, "     ");
 8001950:	4967      	ldr	r1, [pc, #412]	@ (8001af0 <main+0x8c8>)
 8001952:	2000      	movs	r0, #0
 8001954:	f004 f904 	bl	8005b60 <LCD16X2_Write_String>
        if (measuredValue > alarm_value_high)
 8001958:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800195a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800195c:	f7ff faf4 	bl	8000f48 <__aeabi_fcmpgt>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00c      	beq.n	8001980 <main+0x758>
        {
          LCD16X2_Set_Cursor(MyLCD, 1, 9);
 8001966:	2209      	movs	r2, #9
 8001968:	2101      	movs	r1, #1
 800196a:	2000      	movs	r0, #0
 800196c:	f003 fe46 	bl	80055fc <LCD16X2_Set_Cursor>
          LCD16X2_Write_String(MyLCD, "high!");
 8001970:	4960      	ldr	r1, [pc, #384]	@ (8001af4 <main+0x8cc>)
 8001972:	2000      	movs	r0, #0
 8001974:	f004 f8f4 	bl	8005b60 <LCD16X2_Write_String>
          HAL_Delay(50);
 8001978:	2032      	movs	r0, #50	@ 0x32
 800197a:	f000 fbe1 	bl	8002140 <HAL_Delay>
 800197e:	e01c      	b.n	80019ba <main+0x792>
        }
        else if (measuredValue < alarm_value_low)
 8001980:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001982:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001984:	f7ff fac2 	bl	8000f0c <__aeabi_fcmplt>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00c      	beq.n	80019a8 <main+0x780>
        {
          LCD16X2_Set_Cursor(MyLCD, 1, 9);
 800198e:	2209      	movs	r2, #9
 8001990:	2101      	movs	r1, #1
 8001992:	2000      	movs	r0, #0
 8001994:	f003 fe32 	bl	80055fc <LCD16X2_Set_Cursor>
          LCD16X2_Write_String(MyLCD, "low!!");
 8001998:	4957      	ldr	r1, [pc, #348]	@ (8001af8 <main+0x8d0>)
 800199a:	2000      	movs	r0, #0
 800199c:	f004 f8e0 	bl	8005b60 <LCD16X2_Write_String>
          HAL_Delay(50);
 80019a0:	2032      	movs	r0, #50	@ 0x32
 80019a2:	f000 fbcd 	bl	8002140 <HAL_Delay>
 80019a6:	e008      	b.n	80019ba <main+0x792>
        }
        else
        {
          LCD16X2_Set_Cursor(MyLCD, 1, 9);
 80019a8:	2209      	movs	r2, #9
 80019aa:	2101      	movs	r1, #1
 80019ac:	2000      	movs	r0, #0
 80019ae:	f003 fe25 	bl	80055fc <LCD16X2_Set_Cursor>
          LCD16X2_Write_String(MyLCD, "     "); // 清空显示
 80019b2:	494f      	ldr	r1, [pc, #316]	@ (8001af0 <main+0x8c8>)
 80019b4:	2000      	movs	r0, #0
 80019b6:	f004 f8d3 	bl	8005b60 <LCD16X2_Write_String>
        }

        if (voltage > alarm_value_high || voltage < alarm_value_low)
 80019ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80019bc:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80019be:	f7ff fac3 	bl	8000f48 <__aeabi_fcmpgt>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d106      	bne.n	80019d6 <main+0x7ae>
 80019c8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80019ca:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80019cc:	f7ff fa9e 	bl	8000f0c <__aeabi_fcmplt>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d048      	beq.n	8001a68 <main+0x840>
        {
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  // Toggle LED state
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019dc:	4847      	ldr	r0, [pc, #284]	@ (8001afc <main+0x8d4>)
 80019de:	f001 fc08 	bl	80031f2 <HAL_GPIO_WritePin>
          HAL_Delay(5); // LED on time: 500ms
 80019e2:	2005      	movs	r0, #5
 80019e4:	f000 fbac 	bl	8002140 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80019e8:	2201      	movs	r2, #1
 80019ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019ee:	4843      	ldr	r0, [pc, #268]	@ (8001afc <main+0x8d4>)
 80019f0:	f001 fbff 	bl	80031f2 <HAL_GPIO_WritePin>
          HAL_Delay(5);
 80019f4:	2005      	movs	r0, #5
 80019f6:	f000 fba3 	bl	8002140 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  // Toggle LED state
 80019fa:	2200      	movs	r2, #0
 80019fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a00:	483e      	ldr	r0, [pc, #248]	@ (8001afc <main+0x8d4>)
 8001a02:	f001 fbf6 	bl	80031f2 <HAL_GPIO_WritePin>
          HAL_Delay(5); // LED on time: 500ms
 8001a06:	2005      	movs	r0, #5
 8001a08:	f000 fb9a 	bl	8002140 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a12:	483a      	ldr	r0, [pc, #232]	@ (8001afc <main+0x8d4>)
 8001a14:	f001 fbed 	bl	80031f2 <HAL_GPIO_WritePin>
          HAL_Delay(5);HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  // Toggle LED state
 8001a18:	2005      	movs	r0, #5
 8001a1a:	f000 fb91 	bl	8002140 <HAL_Delay>
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a24:	4835      	ldr	r0, [pc, #212]	@ (8001afc <main+0x8d4>)
 8001a26:	f001 fbe4 	bl	80031f2 <HAL_GPIO_WritePin>
          HAL_Delay(5); // LED on time: 500ms
 8001a2a:	2005      	movs	r0, #5
 8001a2c:	f000 fb88 	bl	8002140 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001a30:	2201      	movs	r2, #1
 8001a32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a36:	4831      	ldr	r0, [pc, #196]	@ (8001afc <main+0x8d4>)
 8001a38:	f001 fbdb 	bl	80031f2 <HAL_GPIO_WritePin>
          HAL_Delay(5);
 8001a3c:	2005      	movs	r0, #5
 8001a3e:	f000 fb7f 	bl	8002140 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);  // Toggle LED state
 8001a42:	2200      	movs	r2, #0
 8001a44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a48:	482c      	ldr	r0, [pc, #176]	@ (8001afc <main+0x8d4>)
 8001a4a:	f001 fbd2 	bl	80031f2 <HAL_GPIO_WritePin>
          HAL_Delay(5); // LED on time: 500ms
 8001a4e:	2005      	movs	r0, #5
 8001a50:	f000 fb76 	bl	8002140 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001a54:	2201      	movs	r2, #1
 8001a56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a5a:	4828      	ldr	r0, [pc, #160]	@ (8001afc <main+0x8d4>)
 8001a5c:	f001 fbc9 	bl	80031f2 <HAL_GPIO_WritePin>
          HAL_Delay(5);
 8001a60:	2005      	movs	r0, #5
 8001a62:	f000 fb6d 	bl	8002140 <HAL_Delay>
 8001a66:	e01c      	b.n	8001aa2 <main+0x87a>
        }
        else
        {
          // Ensure LED is off when voltage <= 2.0V or system is not active
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Turn off LED (PB15 is high)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a6e:	4823      	ldr	r0, [pc, #140]	@ (8001afc <main+0x8d4>)
 8001a70:	f001 fbbf 	bl	80031f2 <HAL_GPIO_WritePin>
 8001a74:	e015      	b.n	8001aa2 <main+0x87a>
        }
      }
      else
      {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Turn off LED (PB15 is high)
 8001a76:	2201      	movs	r2, #1
 8001a78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a7c:	481f      	ldr	r0, [pc, #124]	@ (8001afc <main+0x8d4>)
 8001a7e:	f001 fbb8 	bl	80031f2 <HAL_GPIO_WritePin>
 8001a82:	e00e      	b.n	8001aa2 <main+0x87a>
      }
    }
    else
    {
      LCD16X2_Set_Cursor(MyLCD, 1, 1);
 8001a84:	2201      	movs	r2, #1
 8001a86:	2101      	movs	r1, #1
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f003 fdb7 	bl	80055fc <LCD16X2_Set_Cursor>
      LCD16X2_Write_String(MyLCD, "System Stopped");
 8001a8e:	491c      	ldr	r1, [pc, #112]	@ (8001b00 <main+0x8d8>)
 8001a90:	2000      	movs	r0, #0
 8001a92:	f004 f865 	bl	8005b60 <LCD16X2_Write_String>
      // Ensure LED is off when system is not active or alarm is not active
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Turn off LED (PB15 is high)
 8001a96:	2201      	movs	r2, #1
 8001a98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a9c:	4817      	ldr	r0, [pc, #92]	@ (8001afc <main+0x8d4>)
 8001a9e:	f001 fba8 	bl	80031f2 <HAL_GPIO_WritePin>
    }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    LCD16X2_Set_Cursor(MyLCD, 1, 8);
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f003 fda8 	bl	80055fc <LCD16X2_Set_Cursor>
    LCD16X2_Write_String(MyLCD, " ");
 8001aac:	4915      	ldr	r1, [pc, #84]	@ (8001b04 <main+0x8dc>)
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f004 f856 	bl	8005b60 <LCD16X2_Write_String>
    LCD16X2_Set_Cursor(MyLCD, 1, 14);
 8001ab4:	220e      	movs	r2, #14
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f003 fd9f 	bl	80055fc <LCD16X2_Set_Cursor>
    LCD16X2_Write_String(MyLCD, " ");
 8001abe:	4911      	ldr	r1, [pc, #68]	@ (8001b04 <main+0x8dc>)
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f004 f84d 	bl	8005b60 <LCD16X2_Write_String>

    if (loop_counter >= 10)
 8001ac6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001aca:	2b09      	cmp	r3, #9
 8001acc:	dd06      	ble.n	8001adc <main+0x8b4>
    {
      LCD16X2_Clear(MyLCD);
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f003 fd54 	bl	800557c <LCD16X2_Clear>
      loop_counter = 0; // 重置计数器
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ada:	e40f      	b.n	80012fc <main+0xd4>
    }
    else
    {
      loop_counter++; // 增加计数器
 8001adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  { HAL_UART_Receive(&huart1, (uint8_t *)receiveData, sizeof(receiveData),500);
 8001ae6:	e409      	b.n	80012fc <main+0xd4>
 8001ae8:	08009530 	.word	0x08009530
 8001aec:	200002c4 	.word	0x200002c4
 8001af0:	08009538 	.word	0x08009538
 8001af4:	08009540 	.word	0x08009540
 8001af8:	08009548 	.word	0x08009548
 8001afc:	40011000 	.word	0x40011000
 8001b00:	08009550 	.word	0x08009550
 8001b04:	08009514 	.word	0x08009514

08001b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b094      	sub	sp, #80	@ 0x50
 8001b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b12:	2228      	movs	r2, #40	@ 0x28
 8001b14:	2100      	movs	r1, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f005 fc63 	bl	80073e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b46:	2301      	movs	r3, #1
 8001b48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b54:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f001 fb60 	bl	8003224 <HAL_RCC_OscConfig>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b6a:	f000 f833 	bl	8001bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b6e:	230f      	movs	r3, #15
 8001b70:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b72:	2302      	movs	r3, #2
 8001b74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b7e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	2102      	movs	r1, #2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f001 fdcc 	bl	8003728 <HAL_RCC_ClockConfig>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001b96:	f000 f81d 	bl	8001bd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001b9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ba2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f001 ff4c 	bl	8003a44 <HAL_RCCEx_PeriphCLKConfig>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001bb2:	f000 f80f 	bl	8001bd4 <Error_Handler>
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	3750      	adds	r7, #80	@ 0x50
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  STEPPER_TMR_OVF_ISR(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f004 fc3a 	bl	8006440 <STEPPER_TMR_OVF_ISR>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd8:	b672      	cpsid	i
}
 8001bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <Error_Handler+0x8>

08001be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001be6:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <HAL_MspInit+0x5c>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	4a14      	ldr	r2, [pc, #80]	@ (8001c3c <HAL_MspInit+0x5c>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6193      	str	r3, [r2, #24]
 8001bf2:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <HAL_MspInit+0x5c>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <HAL_MspInit+0x5c>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4a0e      	ldr	r2, [pc, #56]	@ (8001c3c <HAL_MspInit+0x5c>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c08:	61d3      	str	r3, [r2, #28]
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <HAL_MspInit+0x5c>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c16:	4b0a      	ldr	r3, [pc, #40]	@ (8001c40 <HAL_MspInit+0x60>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	4a04      	ldr	r2, [pc, #16]	@ (8001c40 <HAL_MspInit+0x60>)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010000 	.word	0x40010000

08001c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <NMI_Handler+0x4>

08001c4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <HardFault_Handler+0x4>

08001c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <MemManage_Handler+0x4>

08001c5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <BusFault_Handler+0x4>

08001c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <UsageFault_Handler+0x4>

08001c6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c94:	f000 fa38 	bl	8002108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ca0:	4802      	ldr	r0, [pc, #8]	@ (8001cac <TIM2_IRQHandler+0x10>)
 8001ca2:	f002 f88a 	bl	8003dba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000027c 	.word	0x2000027c

08001cb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cb4:	4802      	ldr	r0, [pc, #8]	@ (8001cc0 <USART1_IRQHandler+0x10>)
 8001cb6:	f002 fd67 	bl	8004788 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200002c4 	.word	0x200002c4

08001cc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return 1;
 8001cc8:	2301      	movs	r3, #1
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <_kill>:

int _kill(int pid, int sig)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cdc:	f005 fbe2 	bl	80074a4 <__errno>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2216      	movs	r2, #22
 8001ce4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_exit>:

void _exit (int status)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cfa:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff ffe7 	bl	8001cd2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <_exit+0x12>

08001d08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	e00a      	b.n	8001d30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d1a:	f3af 8000 	nop.w
 8001d1e:	4601      	mov	r1, r0
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	60ba      	str	r2, [r7, #8]
 8001d26:	b2ca      	uxtb	r2, r1
 8001d28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	dbf0      	blt.n	8001d1a <_read+0x12>
  }

  return len;
 8001d38:	687b      	ldr	r3, [r7, #4]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	e009      	b.n	8001d68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	60ba      	str	r2, [r7, #8]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3301      	adds	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dbf1      	blt.n	8001d54 <_write+0x12>
  }
  return len;
 8001d70:	687b      	ldr	r3, [r7, #4]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <_close>:

int _close(int file)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001da0:	605a      	str	r2, [r3, #4]
  return 0;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <_isatty>:

int _isatty(int file)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001db6:	2301      	movs	r3, #1
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
	...

08001ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de4:	4a14      	ldr	r2, [pc, #80]	@ (8001e38 <_sbrk+0x5c>)
 8001de6:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <_sbrk+0x60>)
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df0:	4b13      	ldr	r3, [pc, #76]	@ (8001e40 <_sbrk+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d102      	bne.n	8001dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df8:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <_sbrk+0x64>)
 8001dfa:	4a12      	ldr	r2, [pc, #72]	@ (8001e44 <_sbrk+0x68>)
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dfe:	4b10      	ldr	r3, [pc, #64]	@ (8001e40 <_sbrk+0x64>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d207      	bcs.n	8001e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e0c:	f005 fb4a 	bl	80074a4 <__errno>
 8001e10:	4603      	mov	r3, r0
 8001e12:	220c      	movs	r2, #12
 8001e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1a:	e009      	b.n	8001e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e22:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	4a05      	ldr	r2, [pc, #20]	@ (8001e40 <_sbrk+0x64>)
 8001e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20005000 	.word	0x20005000
 8001e3c:	00000400 	.word	0x00000400
 8001e40:	20000278 	.word	0x20000278
 8001e44:	20000470 	.word	0x20000470

08001e48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e5a:	f107 0308 	add.w	r3, r7, #8
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e68:	463b      	mov	r3, r7
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee8 <MX_TIM2_Init+0x94>)
 8001e72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001e78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee8 <MX_TIM2_Init+0x94>)
 8001e7a:	2247      	movs	r2, #71	@ 0x47
 8001e7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <MX_TIM2_Init+0x94>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001e84:	4b18      	ldr	r3, [pc, #96]	@ (8001ee8 <MX_TIM2_Init+0x94>)
 8001e86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8c:	4b16      	ldr	r3, [pc, #88]	@ (8001ee8 <MX_TIM2_Init+0x94>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e92:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <MX_TIM2_Init+0x94>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e98:	4813      	ldr	r0, [pc, #76]	@ (8001ee8 <MX_TIM2_Init+0x94>)
 8001e9a:	f001 ff3f 	bl	8003d1c <HAL_TIM_Base_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ea4:	f7ff fe96 	bl	8001bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001eae:	f107 0308 	add.w	r3, r7, #8
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480c      	ldr	r0, [pc, #48]	@ (8001ee8 <MX_TIM2_Init+0x94>)
 8001eb6:	f002 f870 	bl	8003f9a <HAL_TIM_ConfigClockSource>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ec0:	f7ff fe88 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ecc:	463b      	mov	r3, r7
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	@ (8001ee8 <MX_TIM2_Init+0x94>)
 8001ed2:	f002 fa51 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001edc:	f7ff fe7a 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	2000027c 	.word	0x2000027c

08001eec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001efc:	d113      	bne.n	8001f26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001efe:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <HAL_TIM_Base_MspInit+0x44>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	4a0b      	ldr	r2, [pc, #44]	@ (8001f30 <HAL_TIM_Base_MspInit+0x44>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	61d3      	str	r3, [r2, #28]
 8001f0a:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <HAL_TIM_Base_MspInit+0x44>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	201c      	movs	r0, #28
 8001f1c:	f000 fee5 	bl	8002cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f20:	201c      	movs	r0, #28
 8001f22:	f000 fefe 	bl	8002d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000

08001f34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <MX_USART1_UART_Init+0x4c>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	@ (8001f84 <MX_USART1_UART_Init+0x50>)
 8001f3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <MX_USART1_UART_Init+0x4c>)
 8001f40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	@ (8001f80 <MX_USART1_UART_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <MX_USART1_UART_Init+0x4c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <MX_USART1_UART_Init+0x4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f58:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <MX_USART1_UART_Init+0x4c>)
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <MX_USART1_UART_Init+0x4c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <MX_USART1_UART_Init+0x4c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	@ (8001f80 <MX_USART1_UART_Init+0x4c>)
 8001f6c:	f002 fa74 	bl	8004458 <HAL_UART_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f76:	f7ff fe2d 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200002c4 	.word	0x200002c4
 8001f84:	40013800 	.word	0x40013800

08001f88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a20      	ldr	r2, [pc, #128]	@ (8002024 <HAL_UART_MspInit+0x9c>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d139      	bne.n	800201c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8002028 <HAL_UART_MspInit+0xa0>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	4a1e      	ldr	r2, [pc, #120]	@ (8002028 <HAL_UART_MspInit+0xa0>)
 8001fae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fb2:	6193      	str	r3, [r2, #24]
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002028 <HAL_UART_MspInit+0xa0>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc0:	4b19      	ldr	r3, [pc, #100]	@ (8002028 <HAL_UART_MspInit+0xa0>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	4a18      	ldr	r2, [pc, #96]	@ (8002028 <HAL_UART_MspInit+0xa0>)
 8001fc6:	f043 0304 	orr.w	r3, r3, #4
 8001fca:	6193      	str	r3, [r2, #24]
 8001fcc:	4b16      	ldr	r3, [pc, #88]	@ (8002028 <HAL_UART_MspInit+0xa0>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe6:	f107 0310 	add.w	r3, r7, #16
 8001fea:	4619      	mov	r1, r3
 8001fec:	480f      	ldr	r0, [pc, #60]	@ (800202c <HAL_UART_MspInit+0xa4>)
 8001fee:	f000 ff65 	bl	8002ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ff6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002000:	f107 0310 	add.w	r3, r7, #16
 8002004:	4619      	mov	r1, r3
 8002006:	4809      	ldr	r0, [pc, #36]	@ (800202c <HAL_UART_MspInit+0xa4>)
 8002008:	f000 ff58 	bl	8002ebc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	2100      	movs	r1, #0
 8002010:	2025      	movs	r0, #37	@ 0x25
 8002012:	f000 fe6a 	bl	8002cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002016:	2025      	movs	r0, #37	@ 0x25
 8002018:	f000 fe83 	bl	8002d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800201c:	bf00      	nop
 800201e:	3720      	adds	r7, #32
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40013800 	.word	0x40013800
 8002028:	40021000 	.word	0x40021000
 800202c:	40010800 	.word	0x40010800

08002030 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002030:	f7ff ff0a 	bl	8001e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002034:	480b      	ldr	r0, [pc, #44]	@ (8002064 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002036:	490c      	ldr	r1, [pc, #48]	@ (8002068 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002038:	4a0c      	ldr	r2, [pc, #48]	@ (800206c <LoopFillZerobss+0x16>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800203c:	e002      	b.n	8002044 <LoopCopyDataInit>

0800203e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800203e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002042:	3304      	adds	r3, #4

08002044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002048:	d3f9      	bcc.n	800203e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204a:	4a09      	ldr	r2, [pc, #36]	@ (8002070 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800204c:	4c09      	ldr	r4, [pc, #36]	@ (8002074 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002050:	e001      	b.n	8002056 <LoopFillZerobss>

08002052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002054:	3204      	adds	r2, #4

08002056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002058:	d3fb      	bcc.n	8002052 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800205a:	f005 fa29 	bl	80074b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800205e:	f7ff f8e3 	bl	8001228 <main>
  bx lr
 8002062:	4770      	bx	lr
  ldr r0, =_sdata
 8002064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002068:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 800206c:	080099b8 	.word	0x080099b8
  ldr r2, =_sbss
 8002070:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8002074:	20000470 	.word	0x20000470

08002078 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002078:	e7fe      	b.n	8002078 <ADC1_2_IRQHandler>
	...

0800207c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002080:	4b08      	ldr	r3, [pc, #32]	@ (80020a4 <HAL_Init+0x28>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a07      	ldr	r2, [pc, #28]	@ (80020a4 <HAL_Init+0x28>)
 8002086:	f043 0310 	orr.w	r3, r3, #16
 800208a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800208c:	2003      	movs	r0, #3
 800208e:	f000 fe21 	bl	8002cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002092:	200f      	movs	r0, #15
 8002094:	f000 f808 	bl	80020a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002098:	f7ff fda2 	bl	8001be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40022000 	.word	0x40022000

080020a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b0:	4b12      	ldr	r3, [pc, #72]	@ (80020fc <HAL_InitTick+0x54>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b12      	ldr	r3, [pc, #72]	@ (8002100 <HAL_InitTick+0x58>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	4619      	mov	r1, r3
 80020ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020be:	fbb3 f3f1 	udiv	r3, r3, r1
 80020c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 fe39 	bl	8002d3e <HAL_SYSTICK_Config>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00e      	b.n	80020f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b0f      	cmp	r3, #15
 80020da:	d80a      	bhi.n	80020f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020dc:	2200      	movs	r2, #0
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
 80020e4:	f000 fe01 	bl	8002cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020e8:	4a06      	ldr	r2, [pc, #24]	@ (8002104 <HAL_InitTick+0x5c>)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e000      	b.n	80020f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000000 	.word	0x20000000
 8002100:	20000008 	.word	0x20000008
 8002104:	20000004 	.word	0x20000004

08002108 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800210c:	4b05      	ldr	r3, [pc, #20]	@ (8002124 <HAL_IncTick+0x1c>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	4b05      	ldr	r3, [pc, #20]	@ (8002128 <HAL_IncTick+0x20>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4413      	add	r3, r2
 8002118:	4a03      	ldr	r2, [pc, #12]	@ (8002128 <HAL_IncTick+0x20>)
 800211a:	6013      	str	r3, [r2, #0]
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	20000008 	.word	0x20000008
 8002128:	2000030c 	.word	0x2000030c

0800212c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return uwTick;
 8002130:	4b02      	ldr	r3, [pc, #8]	@ (800213c <HAL_GetTick+0x10>)
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	2000030c 	.word	0x2000030c

08002140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff fff0 	bl	800212c <HAL_GetTick>
 800214c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d005      	beq.n	8002166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800215a:	4b0a      	ldr	r3, [pc, #40]	@ (8002184 <HAL_Delay+0x44>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4413      	add	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002166:	bf00      	nop
 8002168:	f7ff ffe0 	bl	800212c <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	429a      	cmp	r2, r3
 8002176:	d8f7      	bhi.n	8002168 <HAL_Delay+0x28>
  {
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000008 	.word	0x20000008

08002188 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e0be      	b.n	8002328 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d109      	bne.n	80021cc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7fe ff62 	bl	8001090 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fbc5 	bl	800295c <ADC_ConversionStop_Disable>
 80021d2:	4603      	mov	r3, r0
 80021d4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f040 8099 	bne.w	8002316 <HAL_ADC_Init+0x18e>
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f040 8095 	bne.w	8002316 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021f4:	f023 0302 	bic.w	r3, r3, #2
 80021f8:	f043 0202 	orr.w	r2, r3, #2
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002208:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	7b1b      	ldrb	r3, [r3, #12]
 800220e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002210:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	4313      	orrs	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002220:	d003      	beq.n	800222a <HAL_ADC_Init+0xa2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d102      	bne.n	8002230 <HAL_ADC_Init+0xa8>
 800222a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800222e:	e000      	b.n	8002232 <HAL_ADC_Init+0xaa>
 8002230:	2300      	movs	r3, #0
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	7d1b      	ldrb	r3, [r3, #20]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d119      	bne.n	8002274 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7b1b      	ldrb	r3, [r3, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d109      	bne.n	800225c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	3b01      	subs	r3, #1
 800224e:	035a      	lsls	r2, r3, #13
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	e00b      	b.n	8002274 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002260:	f043 0220 	orr.w	r2, r3, #32
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226c:	f043 0201 	orr.w	r2, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	430a      	orrs	r2, r1
 8002286:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	4b28      	ldr	r3, [pc, #160]	@ (8002330 <HAL_ADC_Init+0x1a8>)
 8002290:	4013      	ands	r3, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	68b9      	ldr	r1, [r7, #8]
 8002298:	430b      	orrs	r3, r1
 800229a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022a4:	d003      	beq.n	80022ae <HAL_ADC_Init+0x126>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d104      	bne.n	80022b8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	051b      	lsls	r3, r3, #20
 80022b6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022be:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	4b18      	ldr	r3, [pc, #96]	@ (8002334 <HAL_ADC_Init+0x1ac>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d10b      	bne.n	80022f4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e6:	f023 0303 	bic.w	r3, r3, #3
 80022ea:	f043 0201 	orr.w	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022f2:	e018      	b.n	8002326 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f8:	f023 0312 	bic.w	r3, r3, #18
 80022fc:	f043 0210 	orr.w	r2, r3, #16
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002308:	f043 0201 	orr.w	r2, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002314:	e007      	b.n	8002326 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231a:	f043 0210 	orr.w	r2, r3, #16
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002326:	7dfb      	ldrb	r3, [r7, #23]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	ffe1f7fd 	.word	0xffe1f7fd
 8002334:	ff1f0efe 	.word	0xff1f0efe

08002338 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_ADC_Start+0x1a>
 800234e:	2302      	movs	r3, #2
 8002350:	e098      	b.n	8002484 <HAL_ADC_Start+0x14c>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 faa4 	bl	80028a8 <ADC_Enable>
 8002360:	4603      	mov	r3, r0
 8002362:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f040 8087 	bne.w	800247a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002370:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a41      	ldr	r2, [pc, #260]	@ (800248c <HAL_ADC_Start+0x154>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d105      	bne.n	8002396 <HAL_ADC_Start+0x5e>
 800238a:	4b41      	ldr	r3, [pc, #260]	@ (8002490 <HAL_ADC_Start+0x158>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d115      	bne.n	80023c2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d026      	beq.n	80023fe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023c0:	e01d      	b.n	80023fe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002490 <HAL_ADC_Start+0x158>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d004      	beq.n	80023e2 <HAL_ADC_Start+0xaa>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a2b      	ldr	r2, [pc, #172]	@ (800248c <HAL_ADC_Start+0x154>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d10d      	bne.n	80023fe <HAL_ADC_Start+0xc6>
 80023e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002490 <HAL_ADC_Start+0x158>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d007      	beq.n	80023fe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023f6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002402:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d006      	beq.n	8002418 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240e:	f023 0206 	bic.w	r2, r3, #6
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002416:	e002      	b.n	800241e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f06f 0202 	mvn.w	r2, #2
 800242e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800243a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800243e:	d113      	bne.n	8002468 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002444:	4a11      	ldr	r2, [pc, #68]	@ (800248c <HAL_ADC_Start+0x154>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d105      	bne.n	8002456 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800244a:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <HAL_ADC_Start+0x158>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002452:	2b00      	cmp	r3, #0
 8002454:	d108      	bne.n	8002468 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	e00c      	b.n	8002482 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	e003      	b.n	8002482 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002482:	7bfb      	ldrb	r3, [r7, #15]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40012800 	.word	0x40012800
 8002490:	40012400 	.word	0x40012400

08002494 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002494:	b590      	push	{r4, r7, lr}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80024aa:	f7ff fe3f 	bl	800212c <HAL_GetTick>
 80024ae:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c2:	f043 0220 	orr.w	r2, r3, #32
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e0d3      	b.n	800267e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d131      	bne.n	8002548 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ea:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d12a      	bne.n	8002548 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80024f2:	e021      	b.n	8002538 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fa:	d01d      	beq.n	8002538 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <HAL_ADC_PollForConversion+0x7e>
 8002502:	f7ff fe13 	bl	800212c <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d212      	bcs.n	8002538 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10b      	bne.n	8002538 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002524:	f043 0204 	orr.w	r2, r3, #4
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e0a2      	b.n	800267e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0d6      	beq.n	80024f4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002546:	e070      	b.n	800262a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002548:	4b4f      	ldr	r3, [pc, #316]	@ (8002688 <HAL_ADC_PollForConversion+0x1f4>)
 800254a:	681c      	ldr	r4, [r3, #0]
 800254c:	2002      	movs	r0, #2
 800254e:	f001 fb2f 	bl	8003bb0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002552:	4603      	mov	r3, r0
 8002554:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6919      	ldr	r1, [r3, #16]
 800255e:	4b4b      	ldr	r3, [pc, #300]	@ (800268c <HAL_ADC_PollForConversion+0x1f8>)
 8002560:	400b      	ands	r3, r1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d118      	bne.n	8002598 <HAL_ADC_PollForConversion+0x104>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68d9      	ldr	r1, [r3, #12]
 800256c:	4b48      	ldr	r3, [pc, #288]	@ (8002690 <HAL_ADC_PollForConversion+0x1fc>)
 800256e:	400b      	ands	r3, r1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d111      	bne.n	8002598 <HAL_ADC_PollForConversion+0x104>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6919      	ldr	r1, [r3, #16]
 800257a:	4b46      	ldr	r3, [pc, #280]	@ (8002694 <HAL_ADC_PollForConversion+0x200>)
 800257c:	400b      	ands	r3, r1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d108      	bne.n	8002594 <HAL_ADC_PollForConversion+0x100>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68d9      	ldr	r1, [r3, #12]
 8002588:	4b43      	ldr	r3, [pc, #268]	@ (8002698 <HAL_ADC_PollForConversion+0x204>)
 800258a:	400b      	ands	r3, r1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_ADC_PollForConversion+0x100>
 8002590:	2314      	movs	r3, #20
 8002592:	e020      	b.n	80025d6 <HAL_ADC_PollForConversion+0x142>
 8002594:	2329      	movs	r3, #41	@ 0x29
 8002596:	e01e      	b.n	80025d6 <HAL_ADC_PollForConversion+0x142>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6919      	ldr	r1, [r3, #16]
 800259e:	4b3d      	ldr	r3, [pc, #244]	@ (8002694 <HAL_ADC_PollForConversion+0x200>)
 80025a0:	400b      	ands	r3, r1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_ADC_PollForConversion+0x120>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68d9      	ldr	r1, [r3, #12]
 80025ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002698 <HAL_ADC_PollForConversion+0x204>)
 80025ae:	400b      	ands	r3, r1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00d      	beq.n	80025d0 <HAL_ADC_PollForConversion+0x13c>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6919      	ldr	r1, [r3, #16]
 80025ba:	4b38      	ldr	r3, [pc, #224]	@ (800269c <HAL_ADC_PollForConversion+0x208>)
 80025bc:	400b      	ands	r3, r1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d108      	bne.n	80025d4 <HAL_ADC_PollForConversion+0x140>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68d9      	ldr	r1, [r3, #12]
 80025c8:	4b34      	ldr	r3, [pc, #208]	@ (800269c <HAL_ADC_PollForConversion+0x208>)
 80025ca:	400b      	ands	r3, r1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_ADC_PollForConversion+0x140>
 80025d0:	2354      	movs	r3, #84	@ 0x54
 80025d2:	e000      	b.n	80025d6 <HAL_ADC_PollForConversion+0x142>
 80025d4:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80025dc:	e021      	b.n	8002622 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d01a      	beq.n	800261c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d007      	beq.n	80025fc <HAL_ADC_PollForConversion+0x168>
 80025ec:	f7ff fd9e 	bl	800212c <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d20f      	bcs.n	800261c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	429a      	cmp	r2, r3
 8002602:	d90b      	bls.n	800261c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002608:	f043 0204 	orr.w	r2, r3, #4
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e030      	b.n	800267e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3301      	adds	r3, #1
 8002620:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	429a      	cmp	r2, r3
 8002628:	d8d9      	bhi.n	80025de <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f06f 0212 	mvn.w	r2, #18
 8002632:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002638:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800264a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800264e:	d115      	bne.n	800267c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002654:	2b00      	cmp	r3, #0
 8002656:	d111      	bne.n	800267c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002668:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d105      	bne.n	800267c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002674:	f043 0201 	orr.w	r2, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	371c      	adds	r7, #28
 8002682:	46bd      	mov	sp, r7
 8002684:	bd90      	pop	{r4, r7, pc}
 8002686:	bf00      	nop
 8002688:	20000000 	.word	0x20000000
 800268c:	24924924 	.word	0x24924924
 8002690:	00924924 	.word	0x00924924
 8002694:	12492492 	.word	0x12492492
 8002698:	00492492 	.word	0x00492492
 800269c:	00249249 	.word	0x00249249

080026a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x20>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e0dc      	b.n	8002892 <HAL_ADC_ConfigChannel+0x1da>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b06      	cmp	r3, #6
 80026e6:	d81c      	bhi.n	8002722 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	3b05      	subs	r3, #5
 80026fa:	221f      	movs	r2, #31
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	4019      	ands	r1, r3
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	3b05      	subs	r3, #5
 8002714:	fa00 f203 	lsl.w	r2, r0, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002720:	e03c      	b.n	800279c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b0c      	cmp	r3, #12
 8002728:	d81c      	bhi.n	8002764 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	3b23      	subs	r3, #35	@ 0x23
 800273c:	221f      	movs	r2, #31
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	4019      	ands	r1, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	3b23      	subs	r3, #35	@ 0x23
 8002756:	fa00 f203 	lsl.w	r2, r0, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	631a      	str	r2, [r3, #48]	@ 0x30
 8002762:	e01b      	b.n	800279c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	3b41      	subs	r3, #65	@ 0x41
 8002776:	221f      	movs	r2, #31
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	4019      	ands	r1, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	3b41      	subs	r3, #65	@ 0x41
 8002790:	fa00 f203 	lsl.w	r2, r0, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b09      	cmp	r3, #9
 80027a2:	d91c      	bls.n	80027de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68d9      	ldr	r1, [r3, #12]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4613      	mov	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4413      	add	r3, r2
 80027b4:	3b1e      	subs	r3, #30
 80027b6:	2207      	movs	r2, #7
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	4019      	ands	r1, r3
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	6898      	ldr	r0, [r3, #8]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	3b1e      	subs	r3, #30
 80027d0:	fa00 f203 	lsl.w	r2, r0, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	60da      	str	r2, [r3, #12]
 80027dc:	e019      	b.n	8002812 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6919      	ldr	r1, [r3, #16]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4613      	mov	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4413      	add	r3, r2
 80027ee:	2207      	movs	r2, #7
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	4019      	ands	r1, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6898      	ldr	r0, [r3, #8]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	fa00 f203 	lsl.w	r2, r0, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b10      	cmp	r3, #16
 8002818:	d003      	beq.n	8002822 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800281e:	2b11      	cmp	r3, #17
 8002820:	d132      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a1d      	ldr	r2, [pc, #116]	@ (800289c <HAL_ADC_ConfigChannel+0x1e4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d125      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d126      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002848:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b10      	cmp	r3, #16
 8002850:	d11a      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002852:	4b13      	ldr	r3, [pc, #76]	@ (80028a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a13      	ldr	r2, [pc, #76]	@ (80028a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002858:	fba2 2303 	umull	r2, r3, r2, r3
 800285c:	0c9a      	lsrs	r2, r3, #18
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002868:	e002      	b.n	8002870 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	3b01      	subs	r3, #1
 800286e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f9      	bne.n	800286a <HAL_ADC_ConfigChannel+0x1b2>
 8002876:	e007      	b.n	8002888 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287c:	f043 0220 	orr.w	r2, r3, #32
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002890:	7bfb      	ldrb	r3, [r7, #15]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	40012400 	.word	0x40012400
 80028a0:	20000000 	.word	0x20000000
 80028a4:	431bde83 	.word	0x431bde83

080028a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d040      	beq.n	8002948 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0201 	orr.w	r2, r2, #1
 80028d4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002954 <ADC_Enable+0xac>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1f      	ldr	r2, [pc, #124]	@ (8002958 <ADC_Enable+0xb0>)
 80028dc:	fba2 2303 	umull	r2, r3, r2, r3
 80028e0:	0c9b      	lsrs	r3, r3, #18
 80028e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80028e4:	e002      	b.n	80028ec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f9      	bne.n	80028e6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028f2:	f7ff fc1b 	bl	800212c <HAL_GetTick>
 80028f6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028f8:	e01f      	b.n	800293a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028fa:	f7ff fc17 	bl	800212c <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d918      	bls.n	800293a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b01      	cmp	r3, #1
 8002914:	d011      	beq.n	800293a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291a:	f043 0210 	orr.w	r2, r3, #16
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002926:	f043 0201 	orr.w	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e007      	b.n	800294a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b01      	cmp	r3, #1
 8002946:	d1d8      	bne.n	80028fa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000000 	.word	0x20000000
 8002958:	431bde83 	.word	0x431bde83

0800295c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b01      	cmp	r3, #1
 8002974:	d12e      	bne.n	80029d4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002986:	f7ff fbd1 	bl	800212c <HAL_GetTick>
 800298a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800298c:	e01b      	b.n	80029c6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800298e:	f7ff fbcd 	bl	800212c <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d914      	bls.n	80029c6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d10d      	bne.n	80029c6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ae:	f043 0210 	orr.w	r2, r3, #16
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ba:	f043 0201 	orr.w	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e007      	b.n	80029d6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d0dc      	beq.n	800298e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80029e0:	b590      	push	{r4, r7, lr}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_ADCEx_Calibration_Start+0x1e>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e097      	b.n	8002b2e <HAL_ADCEx_Calibration_Start+0x14e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff ffa8 	bl	800295c <ADC_ConversionStop_Disable>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff ff49 	bl	80028a8 <ADC_Enable>
 8002a16:	4603      	mov	r3, r0
 8002a18:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f040 8081 	bne.w	8002b24 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a26:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a2a:	f023 0302 	bic.w	r3, r3, #2
 8002a2e:	f043 0202 	orr.w	r2, r3, #2
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002a36:	4b40      	ldr	r3, [pc, #256]	@ (8002b38 <HAL_ADCEx_Calibration_Start+0x158>)
 8002a38:	681c      	ldr	r4, [r3, #0]
 8002a3a:	2002      	movs	r0, #2
 8002a3c:	f001 f8b8 	bl	8003bb0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a40:	4603      	mov	r3, r0
 8002a42:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002a46:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002a48:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002a4a:	e002      	b.n	8002a52 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f9      	bne.n	8002a4c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0208 	orr.w	r2, r2, #8
 8002a66:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002a68:	f7ff fb60 	bl	800212c <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002a6e:	e01b      	b.n	8002aa8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002a70:	f7ff fb5c 	bl	800212c <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b0a      	cmp	r3, #10
 8002a7c:	d914      	bls.n	8002aa8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00d      	beq.n	8002aa8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a90:	f023 0312 	bic.w	r3, r3, #18
 8002a94:	f043 0210 	orr.w	r2, r3, #16
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e042      	b.n	8002b2e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1dc      	bne.n	8002a70 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0204 	orr.w	r2, r2, #4
 8002ac4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002ac6:	f7ff fb31 	bl	800212c <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002acc:	e01b      	b.n	8002b06 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002ace:	f7ff fb2d 	bl	800212c <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b0a      	cmp	r3, #10
 8002ada:	d914      	bls.n	8002b06 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00d      	beq.n	8002b06 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aee:	f023 0312 	bic.w	r3, r3, #18
 8002af2:	f043 0210 	orr.w	r2, r3, #16
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e013      	b.n	8002b2e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1dc      	bne.n	8002ace <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b18:	f023 0303 	bic.w	r3, r3, #3
 8002b1c:	f043 0201 	orr.w	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	371c      	adds	r7, #28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd90      	pop	{r4, r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000000 	.word	0x20000000

08002b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <__NVIC_SetPriorityGrouping+0x44>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b6e:	4a04      	ldr	r2, [pc, #16]	@ (8002b80 <__NVIC_SetPriorityGrouping+0x44>)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	60d3      	str	r3, [r2, #12]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b88:	4b04      	ldr	r3, [pc, #16]	@ (8002b9c <__NVIC_GetPriorityGrouping+0x18>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	0a1b      	lsrs	r3, r3, #8
 8002b8e:	f003 0307 	and.w	r3, r3, #7
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	db0b      	blt.n	8002bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	f003 021f 	and.w	r2, r3, #31
 8002bb8:	4906      	ldr	r1, [pc, #24]	@ (8002bd4 <__NVIC_EnableIRQ+0x34>)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr
 8002bd4:	e000e100 	.word	0xe000e100

08002bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	6039      	str	r1, [r7, #0]
 8002be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	db0a      	blt.n	8002c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	490c      	ldr	r1, [pc, #48]	@ (8002c24 <__NVIC_SetPriority+0x4c>)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	0112      	lsls	r2, r2, #4
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c00:	e00a      	b.n	8002c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	4908      	ldr	r1, [pc, #32]	@ (8002c28 <__NVIC_SetPriority+0x50>)
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	3b04      	subs	r3, #4
 8002c10:	0112      	lsls	r2, r2, #4
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	440b      	add	r3, r1
 8002c16:	761a      	strb	r2, [r3, #24]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000e100 	.word	0xe000e100
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	@ 0x24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f1c3 0307 	rsb	r3, r3, #7
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	bf28      	it	cs
 8002c4a:	2304      	movcs	r3, #4
 8002c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3304      	adds	r3, #4
 8002c52:	2b06      	cmp	r3, #6
 8002c54:	d902      	bls.n	8002c5c <NVIC_EncodePriority+0x30>
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3b03      	subs	r3, #3
 8002c5a:	e000      	b.n	8002c5e <NVIC_EncodePriority+0x32>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c60:	f04f 32ff 	mov.w	r2, #4294967295
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	401a      	ands	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c74:	f04f 31ff 	mov.w	r1, #4294967295
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	43d9      	mvns	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c84:	4313      	orrs	r3, r2
         );
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3724      	adds	r7, #36	@ 0x24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ca0:	d301      	bcc.n	8002ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e00f      	b.n	8002cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd0 <SysTick_Config+0x40>)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cae:	210f      	movs	r1, #15
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb4:	f7ff ff90 	bl	8002bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb8:	4b05      	ldr	r3, [pc, #20]	@ (8002cd0 <SysTick_Config+0x40>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cbe:	4b04      	ldr	r3, [pc, #16]	@ (8002cd0 <SysTick_Config+0x40>)
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	e000e010 	.word	0xe000e010

08002cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff ff2d 	bl	8002b3c <__NVIC_SetPriorityGrouping>
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b086      	sub	sp, #24
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cfc:	f7ff ff42 	bl	8002b84 <__NVIC_GetPriorityGrouping>
 8002d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	6978      	ldr	r0, [r7, #20]
 8002d08:	f7ff ff90 	bl	8002c2c <NVIC_EncodePriority>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff ff5f 	bl	8002bd8 <__NVIC_SetPriority>
}
 8002d1a:	bf00      	nop
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	4603      	mov	r3, r0
 8002d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ff35 	bl	8002ba0 <__NVIC_EnableIRQ>
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff ffa2 	bl	8002c90 <SysTick_Config>
 8002d4c:	4603      	mov	r3, r0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b085      	sub	sp, #20
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d008      	beq.n	8002d80 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2204      	movs	r2, #4
 8002d72:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e020      	b.n	8002dc2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 020e 	bic.w	r2, r2, #14
 8002d8e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da8:	2101      	movs	r1, #1
 8002daa:	fa01 f202 	lsl.w	r2, r1, r2
 8002dae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d005      	beq.n	8002df0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2204      	movs	r2, #4
 8002de8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
 8002dee:	e051      	b.n	8002e94 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 020e 	bic.w	r2, r2, #14
 8002dfe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0201 	bic.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a22      	ldr	r2, [pc, #136]	@ (8002ea0 <HAL_DMA_Abort_IT+0xd4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d029      	beq.n	8002e6e <HAL_DMA_Abort_IT+0xa2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a21      	ldr	r2, [pc, #132]	@ (8002ea4 <HAL_DMA_Abort_IT+0xd8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d022      	beq.n	8002e6a <HAL_DMA_Abort_IT+0x9e>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea8 <HAL_DMA_Abort_IT+0xdc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d01a      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x98>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a1e      	ldr	r2, [pc, #120]	@ (8002eac <HAL_DMA_Abort_IT+0xe0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d012      	beq.n	8002e5e <HAL_DMA_Abort_IT+0x92>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb0 <HAL_DMA_Abort_IT+0xe4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00a      	beq.n	8002e58 <HAL_DMA_Abort_IT+0x8c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb4 <HAL_DMA_Abort_IT+0xe8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d102      	bne.n	8002e52 <HAL_DMA_Abort_IT+0x86>
 8002e4c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002e50:	e00e      	b.n	8002e70 <HAL_DMA_Abort_IT+0xa4>
 8002e52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e56:	e00b      	b.n	8002e70 <HAL_DMA_Abort_IT+0xa4>
 8002e58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e5c:	e008      	b.n	8002e70 <HAL_DMA_Abort_IT+0xa4>
 8002e5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e62:	e005      	b.n	8002e70 <HAL_DMA_Abort_IT+0xa4>
 8002e64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e68:	e002      	b.n	8002e70 <HAL_DMA_Abort_IT+0xa4>
 8002e6a:	2310      	movs	r3, #16
 8002e6c:	e000      	b.n	8002e70 <HAL_DMA_Abort_IT+0xa4>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	4a11      	ldr	r2, [pc, #68]	@ (8002eb8 <HAL_DMA_Abort_IT+0xec>)
 8002e72:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4798      	blx	r3
    } 
  }
  return status;
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40020008 	.word	0x40020008
 8002ea4:	4002001c 	.word	0x4002001c
 8002ea8:	40020030 	.word	0x40020030
 8002eac:	40020044 	.word	0x40020044
 8002eb0:	40020058 	.word	0x40020058
 8002eb4:	4002006c 	.word	0x4002006c
 8002eb8:	40020000 	.word	0x40020000

08002ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b08b      	sub	sp, #44	@ 0x2c
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ece:	e169      	b.n	80031a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	f040 8158 	bne.w	800319e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	4a9a      	ldr	r2, [pc, #616]	@ (800315c <HAL_GPIO_Init+0x2a0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d05e      	beq.n	8002fb6 <HAL_GPIO_Init+0xfa>
 8002ef8:	4a98      	ldr	r2, [pc, #608]	@ (800315c <HAL_GPIO_Init+0x2a0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d875      	bhi.n	8002fea <HAL_GPIO_Init+0x12e>
 8002efe:	4a98      	ldr	r2, [pc, #608]	@ (8003160 <HAL_GPIO_Init+0x2a4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d058      	beq.n	8002fb6 <HAL_GPIO_Init+0xfa>
 8002f04:	4a96      	ldr	r2, [pc, #600]	@ (8003160 <HAL_GPIO_Init+0x2a4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d86f      	bhi.n	8002fea <HAL_GPIO_Init+0x12e>
 8002f0a:	4a96      	ldr	r2, [pc, #600]	@ (8003164 <HAL_GPIO_Init+0x2a8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d052      	beq.n	8002fb6 <HAL_GPIO_Init+0xfa>
 8002f10:	4a94      	ldr	r2, [pc, #592]	@ (8003164 <HAL_GPIO_Init+0x2a8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d869      	bhi.n	8002fea <HAL_GPIO_Init+0x12e>
 8002f16:	4a94      	ldr	r2, [pc, #592]	@ (8003168 <HAL_GPIO_Init+0x2ac>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d04c      	beq.n	8002fb6 <HAL_GPIO_Init+0xfa>
 8002f1c:	4a92      	ldr	r2, [pc, #584]	@ (8003168 <HAL_GPIO_Init+0x2ac>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d863      	bhi.n	8002fea <HAL_GPIO_Init+0x12e>
 8002f22:	4a92      	ldr	r2, [pc, #584]	@ (800316c <HAL_GPIO_Init+0x2b0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d046      	beq.n	8002fb6 <HAL_GPIO_Init+0xfa>
 8002f28:	4a90      	ldr	r2, [pc, #576]	@ (800316c <HAL_GPIO_Init+0x2b0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d85d      	bhi.n	8002fea <HAL_GPIO_Init+0x12e>
 8002f2e:	2b12      	cmp	r3, #18
 8002f30:	d82a      	bhi.n	8002f88 <HAL_GPIO_Init+0xcc>
 8002f32:	2b12      	cmp	r3, #18
 8002f34:	d859      	bhi.n	8002fea <HAL_GPIO_Init+0x12e>
 8002f36:	a201      	add	r2, pc, #4	@ (adr r2, 8002f3c <HAL_GPIO_Init+0x80>)
 8002f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3c:	08002fb7 	.word	0x08002fb7
 8002f40:	08002f91 	.word	0x08002f91
 8002f44:	08002fa3 	.word	0x08002fa3
 8002f48:	08002fe5 	.word	0x08002fe5
 8002f4c:	08002feb 	.word	0x08002feb
 8002f50:	08002feb 	.word	0x08002feb
 8002f54:	08002feb 	.word	0x08002feb
 8002f58:	08002feb 	.word	0x08002feb
 8002f5c:	08002feb 	.word	0x08002feb
 8002f60:	08002feb 	.word	0x08002feb
 8002f64:	08002feb 	.word	0x08002feb
 8002f68:	08002feb 	.word	0x08002feb
 8002f6c:	08002feb 	.word	0x08002feb
 8002f70:	08002feb 	.word	0x08002feb
 8002f74:	08002feb 	.word	0x08002feb
 8002f78:	08002feb 	.word	0x08002feb
 8002f7c:	08002feb 	.word	0x08002feb
 8002f80:	08002f99 	.word	0x08002f99
 8002f84:	08002fad 	.word	0x08002fad
 8002f88:	4a79      	ldr	r2, [pc, #484]	@ (8003170 <HAL_GPIO_Init+0x2b4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f8e:	e02c      	b.n	8002fea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	623b      	str	r3, [r7, #32]
          break;
 8002f96:	e029      	b.n	8002fec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	623b      	str	r3, [r7, #32]
          break;
 8002fa0:	e024      	b.n	8002fec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	3308      	adds	r3, #8
 8002fa8:	623b      	str	r3, [r7, #32]
          break;
 8002faa:	e01f      	b.n	8002fec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	330c      	adds	r3, #12
 8002fb2:	623b      	str	r3, [r7, #32]
          break;
 8002fb4:	e01a      	b.n	8002fec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d102      	bne.n	8002fc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fbe:	2304      	movs	r3, #4
 8002fc0:	623b      	str	r3, [r7, #32]
          break;
 8002fc2:	e013      	b.n	8002fec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d105      	bne.n	8002fd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fcc:	2308      	movs	r3, #8
 8002fce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69fa      	ldr	r2, [r7, #28]
 8002fd4:	611a      	str	r2, [r3, #16]
          break;
 8002fd6:	e009      	b.n	8002fec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fd8:	2308      	movs	r3, #8
 8002fda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69fa      	ldr	r2, [r7, #28]
 8002fe0:	615a      	str	r2, [r3, #20]
          break;
 8002fe2:	e003      	b.n	8002fec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	623b      	str	r3, [r7, #32]
          break;
 8002fe8:	e000      	b.n	8002fec <HAL_GPIO_Init+0x130>
          break;
 8002fea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	2bff      	cmp	r3, #255	@ 0xff
 8002ff0:	d801      	bhi.n	8002ff6 <HAL_GPIO_Init+0x13a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	e001      	b.n	8002ffa <HAL_GPIO_Init+0x13e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	2bff      	cmp	r3, #255	@ 0xff
 8003000:	d802      	bhi.n	8003008 <HAL_GPIO_Init+0x14c>
 8003002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	e002      	b.n	800300e <HAL_GPIO_Init+0x152>
 8003008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300a:	3b08      	subs	r3, #8
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	210f      	movs	r1, #15
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	401a      	ands	r2, r3
 8003020:	6a39      	ldr	r1, [r7, #32]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	fa01 f303 	lsl.w	r3, r1, r3
 8003028:	431a      	orrs	r2, r3
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 80b1 	beq.w	800319e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800303c:	4b4d      	ldr	r3, [pc, #308]	@ (8003174 <HAL_GPIO_Init+0x2b8>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	4a4c      	ldr	r2, [pc, #304]	@ (8003174 <HAL_GPIO_Init+0x2b8>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6193      	str	r3, [r2, #24]
 8003048:	4b4a      	ldr	r3, [pc, #296]	@ (8003174 <HAL_GPIO_Init+0x2b8>)
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003054:	4a48      	ldr	r2, [pc, #288]	@ (8003178 <HAL_GPIO_Init+0x2bc>)
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	089b      	lsrs	r3, r3, #2
 800305a:	3302      	adds	r3, #2
 800305c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003060:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	220f      	movs	r2, #15
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4013      	ands	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a40      	ldr	r2, [pc, #256]	@ (800317c <HAL_GPIO_Init+0x2c0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d013      	beq.n	80030a8 <HAL_GPIO_Init+0x1ec>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a3f      	ldr	r2, [pc, #252]	@ (8003180 <HAL_GPIO_Init+0x2c4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00d      	beq.n	80030a4 <HAL_GPIO_Init+0x1e8>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a3e      	ldr	r2, [pc, #248]	@ (8003184 <HAL_GPIO_Init+0x2c8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d007      	beq.n	80030a0 <HAL_GPIO_Init+0x1e4>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a3d      	ldr	r2, [pc, #244]	@ (8003188 <HAL_GPIO_Init+0x2cc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d101      	bne.n	800309c <HAL_GPIO_Init+0x1e0>
 8003098:	2303      	movs	r3, #3
 800309a:	e006      	b.n	80030aa <HAL_GPIO_Init+0x1ee>
 800309c:	2304      	movs	r3, #4
 800309e:	e004      	b.n	80030aa <HAL_GPIO_Init+0x1ee>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e002      	b.n	80030aa <HAL_GPIO_Init+0x1ee>
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <HAL_GPIO_Init+0x1ee>
 80030a8:	2300      	movs	r3, #0
 80030aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ac:	f002 0203 	and.w	r2, r2, #3
 80030b0:	0092      	lsls	r2, r2, #2
 80030b2:	4093      	lsls	r3, r2
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030ba:	492f      	ldr	r1, [pc, #188]	@ (8003178 <HAL_GPIO_Init+0x2bc>)
 80030bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030be:	089b      	lsrs	r3, r3, #2
 80030c0:	3302      	adds	r3, #2
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d006      	beq.n	80030e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030d4:	4b2d      	ldr	r3, [pc, #180]	@ (800318c <HAL_GPIO_Init+0x2d0>)
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	492c      	ldr	r1, [pc, #176]	@ (800318c <HAL_GPIO_Init+0x2d0>)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	4313      	orrs	r3, r2
 80030de:	608b      	str	r3, [r1, #8]
 80030e0:	e006      	b.n	80030f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030e2:	4b2a      	ldr	r3, [pc, #168]	@ (800318c <HAL_GPIO_Init+0x2d0>)
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	4928      	ldr	r1, [pc, #160]	@ (800318c <HAL_GPIO_Init+0x2d0>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d006      	beq.n	800310a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030fc:	4b23      	ldr	r3, [pc, #140]	@ (800318c <HAL_GPIO_Init+0x2d0>)
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	4922      	ldr	r1, [pc, #136]	@ (800318c <HAL_GPIO_Init+0x2d0>)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	4313      	orrs	r3, r2
 8003106:	60cb      	str	r3, [r1, #12]
 8003108:	e006      	b.n	8003118 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800310a:	4b20      	ldr	r3, [pc, #128]	@ (800318c <HAL_GPIO_Init+0x2d0>)
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	43db      	mvns	r3, r3
 8003112:	491e      	ldr	r1, [pc, #120]	@ (800318c <HAL_GPIO_Init+0x2d0>)
 8003114:	4013      	ands	r3, r2
 8003116:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d006      	beq.n	8003132 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003124:	4b19      	ldr	r3, [pc, #100]	@ (800318c <HAL_GPIO_Init+0x2d0>)
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	4918      	ldr	r1, [pc, #96]	@ (800318c <HAL_GPIO_Init+0x2d0>)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
 8003130:	e006      	b.n	8003140 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003132:	4b16      	ldr	r3, [pc, #88]	@ (800318c <HAL_GPIO_Init+0x2d0>)
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	43db      	mvns	r3, r3
 800313a:	4914      	ldr	r1, [pc, #80]	@ (800318c <HAL_GPIO_Init+0x2d0>)
 800313c:	4013      	ands	r3, r2
 800313e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d021      	beq.n	8003190 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800314c:	4b0f      	ldr	r3, [pc, #60]	@ (800318c <HAL_GPIO_Init+0x2d0>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	490e      	ldr	r1, [pc, #56]	@ (800318c <HAL_GPIO_Init+0x2d0>)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	4313      	orrs	r3, r2
 8003156:	600b      	str	r3, [r1, #0]
 8003158:	e021      	b.n	800319e <HAL_GPIO_Init+0x2e2>
 800315a:	bf00      	nop
 800315c:	10320000 	.word	0x10320000
 8003160:	10310000 	.word	0x10310000
 8003164:	10220000 	.word	0x10220000
 8003168:	10210000 	.word	0x10210000
 800316c:	10120000 	.word	0x10120000
 8003170:	10110000 	.word	0x10110000
 8003174:	40021000 	.word	0x40021000
 8003178:	40010000 	.word	0x40010000
 800317c:	40010800 	.word	0x40010800
 8003180:	40010c00 	.word	0x40010c00
 8003184:	40011000 	.word	0x40011000
 8003188:	40011400 	.word	0x40011400
 800318c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003190:	4b0b      	ldr	r3, [pc, #44]	@ (80031c0 <HAL_GPIO_Init+0x304>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	43db      	mvns	r3, r3
 8003198:	4909      	ldr	r1, [pc, #36]	@ (80031c0 <HAL_GPIO_Init+0x304>)
 800319a:	4013      	ands	r3, r2
 800319c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a0:	3301      	adds	r3, #1
 80031a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031aa:	fa22 f303 	lsr.w	r3, r2, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f47f ae8e 	bne.w	8002ed0 <HAL_GPIO_Init+0x14>
  }
}
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
 80031b8:	372c      	adds	r7, #44	@ 0x2c
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr
 80031c0:	40010400 	.word	0x40010400

080031c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	887b      	ldrh	r3, [r7, #2]
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
 80031e0:	e001      	b.n	80031e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031e2:	2300      	movs	r3, #0
 80031e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr

080031f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	460b      	mov	r3, r1
 80031fc:	807b      	strh	r3, [r7, #2]
 80031fe:	4613      	mov	r3, r2
 8003200:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003202:	787b      	ldrb	r3, [r7, #1]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003208:	887a      	ldrh	r2, [r7, #2]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800320e:	e003      	b.n	8003218 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003210:	887b      	ldrh	r3, [r7, #2]
 8003212:	041a      	lsls	r2, r3, #16
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	611a      	str	r2, [r3, #16]
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr
	...

08003224 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e272      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 8087 	beq.w	8003352 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003244:	4b92      	ldr	r3, [pc, #584]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b04      	cmp	r3, #4
 800324e:	d00c      	beq.n	800326a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003250:	4b8f      	ldr	r3, [pc, #572]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 030c 	and.w	r3, r3, #12
 8003258:	2b08      	cmp	r3, #8
 800325a:	d112      	bne.n	8003282 <HAL_RCC_OscConfig+0x5e>
 800325c:	4b8c      	ldr	r3, [pc, #560]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003268:	d10b      	bne.n	8003282 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326a:	4b89      	ldr	r3, [pc, #548]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d06c      	beq.n	8003350 <HAL_RCC_OscConfig+0x12c>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d168      	bne.n	8003350 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e24c      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800328a:	d106      	bne.n	800329a <HAL_RCC_OscConfig+0x76>
 800328c:	4b80      	ldr	r3, [pc, #512]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a7f      	ldr	r2, [pc, #508]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	e02e      	b.n	80032f8 <HAL_RCC_OscConfig+0xd4>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10c      	bne.n	80032bc <HAL_RCC_OscConfig+0x98>
 80032a2:	4b7b      	ldr	r3, [pc, #492]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a7a      	ldr	r2, [pc, #488]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	4b78      	ldr	r3, [pc, #480]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a77      	ldr	r2, [pc, #476]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	e01d      	b.n	80032f8 <HAL_RCC_OscConfig+0xd4>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCC_OscConfig+0xbc>
 80032c6:	4b72      	ldr	r3, [pc, #456]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a71      	ldr	r2, [pc, #452]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a6e      	ldr	r2, [pc, #440]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	e00b      	b.n	80032f8 <HAL_RCC_OscConfig+0xd4>
 80032e0:	4b6b      	ldr	r3, [pc, #428]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4b68      	ldr	r3, [pc, #416]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a67      	ldr	r2, [pc, #412]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d013      	beq.n	8003328 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fe ff14 	bl	800212c <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003308:	f7fe ff10 	bl	800212c <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b64      	cmp	r3, #100	@ 0x64
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e200      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	4b5d      	ldr	r3, [pc, #372]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0xe4>
 8003326:	e014      	b.n	8003352 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003328:	f7fe ff00 	bl	800212c <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003330:	f7fe fefc 	bl	800212c <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b64      	cmp	r3, #100	@ 0x64
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e1ec      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003342:	4b53      	ldr	r3, [pc, #332]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x10c>
 800334e:	e000      	b.n	8003352 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d063      	beq.n	8003426 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800335e:	4b4c      	ldr	r3, [pc, #304]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00b      	beq.n	8003382 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800336a:	4b49      	ldr	r3, [pc, #292]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b08      	cmp	r3, #8
 8003374:	d11c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x18c>
 8003376:	4b46      	ldr	r3, [pc, #280]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d116      	bne.n	80033b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003382:	4b43      	ldr	r3, [pc, #268]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d005      	beq.n	800339a <HAL_RCC_OscConfig+0x176>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d001      	beq.n	800339a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e1c0      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339a:	4b3d      	ldr	r3, [pc, #244]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4939      	ldr	r1, [pc, #228]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ae:	e03a      	b.n	8003426 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d020      	beq.n	80033fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b8:	4b36      	ldr	r3, [pc, #216]	@ (8003494 <HAL_RCC_OscConfig+0x270>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033be:	f7fe feb5 	bl	800212c <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c6:	f7fe feb1 	bl	800212c <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e1a1      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4927      	ldr	r1, [pc, #156]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	600b      	str	r3, [r1, #0]
 80033f8:	e015      	b.n	8003426 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fa:	4b26      	ldr	r3, [pc, #152]	@ (8003494 <HAL_RCC_OscConfig+0x270>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fe fe94 	bl	800212c <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003408:	f7fe fe90 	bl	800212c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e180      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341a:	4b1d      	ldr	r3, [pc, #116]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d03a      	beq.n	80034a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d019      	beq.n	800346e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800343a:	4b17      	ldr	r3, [pc, #92]	@ (8003498 <HAL_RCC_OscConfig+0x274>)
 800343c:	2201      	movs	r2, #1
 800343e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003440:	f7fe fe74 	bl	800212c <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003448:	f7fe fe70 	bl	800212c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e160      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345a:	4b0d      	ldr	r3, [pc, #52]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003466:	2001      	movs	r0, #1
 8003468:	f000 face 	bl	8003a08 <RCC_Delay>
 800346c:	e01c      	b.n	80034a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800346e:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <HAL_RCC_OscConfig+0x274>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003474:	f7fe fe5a 	bl	800212c <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800347a:	e00f      	b.n	800349c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800347c:	f7fe fe56 	bl	800212c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d908      	bls.n	800349c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e146      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
 800348e:	bf00      	nop
 8003490:	40021000 	.word	0x40021000
 8003494:	42420000 	.word	0x42420000
 8003498:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800349c:	4b92      	ldr	r3, [pc, #584]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1e9      	bne.n	800347c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80a6 	beq.w	8003602 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b6:	2300      	movs	r3, #0
 80034b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ba:	4b8b      	ldr	r3, [pc, #556]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10d      	bne.n	80034e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c6:	4b88      	ldr	r3, [pc, #544]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	4a87      	ldr	r2, [pc, #540]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034d0:	61d3      	str	r3, [r2, #28]
 80034d2:	4b85      	ldr	r3, [pc, #532]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034de:	2301      	movs	r3, #1
 80034e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e2:	4b82      	ldr	r3, [pc, #520]	@ (80036ec <HAL_RCC_OscConfig+0x4c8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d118      	bne.n	8003520 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ee:	4b7f      	ldr	r3, [pc, #508]	@ (80036ec <HAL_RCC_OscConfig+0x4c8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a7e      	ldr	r2, [pc, #504]	@ (80036ec <HAL_RCC_OscConfig+0x4c8>)
 80034f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034fa:	f7fe fe17 	bl	800212c <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003502:	f7fe fe13 	bl	800212c <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b64      	cmp	r3, #100	@ 0x64
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e103      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003514:	4b75      	ldr	r3, [pc, #468]	@ (80036ec <HAL_RCC_OscConfig+0x4c8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d106      	bne.n	8003536 <HAL_RCC_OscConfig+0x312>
 8003528:	4b6f      	ldr	r3, [pc, #444]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	4a6e      	ldr	r2, [pc, #440]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6213      	str	r3, [r2, #32]
 8003534:	e02d      	b.n	8003592 <HAL_RCC_OscConfig+0x36e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0x334>
 800353e:	4b6a      	ldr	r3, [pc, #424]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	4a69      	ldr	r2, [pc, #420]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	6213      	str	r3, [r2, #32]
 800354a:	4b67      	ldr	r3, [pc, #412]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	4a66      	ldr	r2, [pc, #408]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003550:	f023 0304 	bic.w	r3, r3, #4
 8003554:	6213      	str	r3, [r2, #32]
 8003556:	e01c      	b.n	8003592 <HAL_RCC_OscConfig+0x36e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b05      	cmp	r3, #5
 800355e:	d10c      	bne.n	800357a <HAL_RCC_OscConfig+0x356>
 8003560:	4b61      	ldr	r3, [pc, #388]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	4a60      	ldr	r2, [pc, #384]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003566:	f043 0304 	orr.w	r3, r3, #4
 800356a:	6213      	str	r3, [r2, #32]
 800356c:	4b5e      	ldr	r3, [pc, #376]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	4a5d      	ldr	r2, [pc, #372]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6213      	str	r3, [r2, #32]
 8003578:	e00b      	b.n	8003592 <HAL_RCC_OscConfig+0x36e>
 800357a:	4b5b      	ldr	r3, [pc, #364]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	4a5a      	ldr	r2, [pc, #360]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	6213      	str	r3, [r2, #32]
 8003586:	4b58      	ldr	r3, [pc, #352]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	4a57      	ldr	r2, [pc, #348]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	f023 0304 	bic.w	r3, r3, #4
 8003590:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d015      	beq.n	80035c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359a:	f7fe fdc7 	bl	800212c <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a0:	e00a      	b.n	80035b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a2:	f7fe fdc3 	bl	800212c <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e0b1      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b8:	4b4b      	ldr	r3, [pc, #300]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0ee      	beq.n	80035a2 <HAL_RCC_OscConfig+0x37e>
 80035c4:	e014      	b.n	80035f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c6:	f7fe fdb1 	bl	800212c <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035cc:	e00a      	b.n	80035e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7fe fdad 	bl	800212c <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e09b      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e4:	4b40      	ldr	r3, [pc, #256]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1ee      	bne.n	80035ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d105      	bne.n	8003602 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f6:	4b3c      	ldr	r3, [pc, #240]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	4a3b      	ldr	r2, [pc, #236]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003600:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 8087 	beq.w	800371a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800360c:	4b36      	ldr	r3, [pc, #216]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b08      	cmp	r3, #8
 8003616:	d061      	beq.n	80036dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d146      	bne.n	80036ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003620:	4b33      	ldr	r3, [pc, #204]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003626:	f7fe fd81 	bl	800212c <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362e:	f7fe fd7d 	bl	800212c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e06d      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003640:	4b29      	ldr	r3, [pc, #164]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f0      	bne.n	800362e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003654:	d108      	bne.n	8003668 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003656:	4b24      	ldr	r3, [pc, #144]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	4921      	ldr	r1, [pc, #132]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003668:	4b1f      	ldr	r3, [pc, #124]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a19      	ldr	r1, [r3, #32]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	430b      	orrs	r3, r1
 800367a:	491b      	ldr	r1, [pc, #108]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800367c:	4313      	orrs	r3, r2
 800367e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003680:	4b1b      	ldr	r3, [pc, #108]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003682:	2201      	movs	r2, #1
 8003684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003686:	f7fe fd51 	bl	800212c <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368e:	f7fe fd4d 	bl	800212c <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e03d      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036a0:	4b11      	ldr	r3, [pc, #68]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x46a>
 80036ac:	e035      	b.n	800371a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ae:	4b10      	ldr	r3, [pc, #64]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7fe fd3a 	bl	800212c <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036bc:	f7fe fd36 	bl	800212c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e026      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ce:	4b06      	ldr	r3, [pc, #24]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x498>
 80036da:	e01e      	b.n	800371a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d107      	bne.n	80036f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e019      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40007000 	.word	0x40007000
 80036f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003724 <HAL_RCC_OscConfig+0x500>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	429a      	cmp	r2, r3
 8003706:	d106      	bne.n	8003716 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d001      	beq.n	800371a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021000 	.word	0x40021000

08003728 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0d0      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800373c:	4b6a      	ldr	r3, [pc, #424]	@ (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d910      	bls.n	800376c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374a:	4b67      	ldr	r3, [pc, #412]	@ (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 0207 	bic.w	r2, r3, #7
 8003752:	4965      	ldr	r1, [pc, #404]	@ (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	4313      	orrs	r3, r2
 8003758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375a:	4b63      	ldr	r3, [pc, #396]	@ (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0b8      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d020      	beq.n	80037ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003784:	4b59      	ldr	r3, [pc, #356]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a58      	ldr	r2, [pc, #352]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800378e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800379c:	4b53      	ldr	r3, [pc, #332]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	4a52      	ldr	r2, [pc, #328]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80037a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a8:	4b50      	ldr	r3, [pc, #320]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	494d      	ldr	r1, [pc, #308]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d040      	beq.n	8003848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d107      	bne.n	80037de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	4b47      	ldr	r3, [pc, #284]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d115      	bne.n	8003806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e07f      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d107      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e6:	4b41      	ldr	r3, [pc, #260]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e073      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f6:	4b3d      	ldr	r3, [pc, #244]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e06b      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003806:	4b39      	ldr	r3, [pc, #228]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f023 0203 	bic.w	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	4936      	ldr	r1, [pc, #216]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003818:	f7fe fc88 	bl	800212c <HAL_GetTick>
 800381c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	e00a      	b.n	8003836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003820:	f7fe fc84 	bl	800212c <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e053      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003836:	4b2d      	ldr	r3, [pc, #180]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 020c 	and.w	r2, r3, #12
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	429a      	cmp	r2, r3
 8003846:	d1eb      	bne.n	8003820 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003848:	4b27      	ldr	r3, [pc, #156]	@ (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d210      	bcs.n	8003878 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b24      	ldr	r3, [pc, #144]	@ (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 0207 	bic.w	r2, r3, #7
 800385e:	4922      	ldr	r1, [pc, #136]	@ (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003866:	4b20      	ldr	r3, [pc, #128]	@ (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e032      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003884:	4b19      	ldr	r3, [pc, #100]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4916      	ldr	r1, [pc, #88]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	4313      	orrs	r3, r2
 8003894:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d009      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038a2:	4b12      	ldr	r3, [pc, #72]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	490e      	ldr	r1, [pc, #56]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038b6:	f000 f821 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 80038ba:	4602      	mov	r2, r0
 80038bc:	4b0b      	ldr	r3, [pc, #44]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	091b      	lsrs	r3, r3, #4
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	490a      	ldr	r1, [pc, #40]	@ (80038f0 <HAL_RCC_ClockConfig+0x1c8>)
 80038c8:	5ccb      	ldrb	r3, [r1, r3]
 80038ca:	fa22 f303 	lsr.w	r3, r2, r3
 80038ce:	4a09      	ldr	r2, [pc, #36]	@ (80038f4 <HAL_RCC_ClockConfig+0x1cc>)
 80038d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038d2:	4b09      	ldr	r3, [pc, #36]	@ (80038f8 <HAL_RCC_ClockConfig+0x1d0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fe fbe6 	bl	80020a8 <HAL_InitTick>

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40022000 	.word	0x40022000
 80038ec:	40021000 	.word	0x40021000
 80038f0:	08009560 	.word	0x08009560
 80038f4:	20000000 	.word	0x20000000
 80038f8:	20000004 	.word	0x20000004

080038fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	2300      	movs	r3, #0
 8003910:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003916:	4b1e      	ldr	r3, [pc, #120]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x94>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b04      	cmp	r3, #4
 8003924:	d002      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x30>
 8003926:	2b08      	cmp	r3, #8
 8003928:	d003      	beq.n	8003932 <HAL_RCC_GetSysClockFreq+0x36>
 800392a:	e027      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800392c:	4b19      	ldr	r3, [pc, #100]	@ (8003994 <HAL_RCC_GetSysClockFreq+0x98>)
 800392e:	613b      	str	r3, [r7, #16]
      break;
 8003930:	e027      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	0c9b      	lsrs	r3, r3, #18
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	4a17      	ldr	r2, [pc, #92]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x9c>)
 800393c:	5cd3      	ldrb	r3, [r2, r3]
 800393e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d010      	beq.n	800396c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800394a:	4b11      	ldr	r3, [pc, #68]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x94>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	0c5b      	lsrs	r3, r3, #17
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	4a11      	ldr	r2, [pc, #68]	@ (800399c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003956:	5cd3      	ldrb	r3, [r2, r3]
 8003958:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a0d      	ldr	r2, [pc, #52]	@ (8003994 <HAL_RCC_GetSysClockFreq+0x98>)
 800395e:	fb03 f202 	mul.w	r2, r3, r2
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	fbb2 f3f3 	udiv	r3, r2, r3
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	e004      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a0c      	ldr	r2, [pc, #48]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003970:	fb02 f303 	mul.w	r3, r2, r3
 8003974:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	613b      	str	r3, [r7, #16]
      break;
 800397a:	e002      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800397c:	4b05      	ldr	r3, [pc, #20]	@ (8003994 <HAL_RCC_GetSysClockFreq+0x98>)
 800397e:	613b      	str	r3, [r7, #16]
      break;
 8003980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003982:	693b      	ldr	r3, [r7, #16]
}
 8003984:	4618      	mov	r0, r3
 8003986:	371c      	adds	r7, #28
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40021000 	.word	0x40021000
 8003994:	007a1200 	.word	0x007a1200
 8003998:	08009578 	.word	0x08009578
 800399c:	08009588 	.word	0x08009588
 80039a0:	003d0900 	.word	0x003d0900

080039a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a8:	4b02      	ldr	r3, [pc, #8]	@ (80039b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80039aa:	681b      	ldr	r3, [r3, #0]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr
 80039b4:	20000000 	.word	0x20000000

080039b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039bc:	f7ff fff2 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b05      	ldr	r3, [pc, #20]	@ (80039d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	0a1b      	lsrs	r3, r3, #8
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	4903      	ldr	r1, [pc, #12]	@ (80039dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40021000 	.word	0x40021000
 80039dc:	08009570 	.word	0x08009570

080039e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039e4:	f7ff ffde 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 80039e8:	4602      	mov	r2, r0
 80039ea:	4b05      	ldr	r3, [pc, #20]	@ (8003a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	0adb      	lsrs	r3, r3, #11
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	4903      	ldr	r1, [pc, #12]	@ (8003a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039f6:	5ccb      	ldrb	r3, [r1, r3]
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40021000 	.word	0x40021000
 8003a04:	08009570 	.word	0x08009570

08003a08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a10:	4b0a      	ldr	r3, [pc, #40]	@ (8003a3c <RCC_Delay+0x34>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a0a      	ldr	r2, [pc, #40]	@ (8003a40 <RCC_Delay+0x38>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	0a5b      	lsrs	r3, r3, #9
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a24:	bf00      	nop
  }
  while (Delay --);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1e5a      	subs	r2, r3, #1
 8003a2a:	60fa      	str	r2, [r7, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1f9      	bne.n	8003a24 <RCC_Delay+0x1c>
}
 8003a30:	bf00      	nop
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	20000000 	.word	0x20000000
 8003a40:	10624dd3 	.word	0x10624dd3

08003a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	613b      	str	r3, [r7, #16]
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d07d      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a60:	2300      	movs	r3, #0
 8003a62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a64:	4b4f      	ldr	r3, [pc, #316]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10d      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a70:	4b4c      	ldr	r3, [pc, #304]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	4a4b      	ldr	r2, [pc, #300]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a7a:	61d3      	str	r3, [r2, #28]
 8003a7c:	4b49      	ldr	r3, [pc, #292]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8c:	4b46      	ldr	r3, [pc, #280]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d118      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a98:	4b43      	ldr	r3, [pc, #268]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a42      	ldr	r2, [pc, #264]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aa4:	f7fe fb42 	bl	800212c <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aaa:	e008      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aac:	f7fe fb3e 	bl	800212c <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	@ 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e06d      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abe:	4b3a      	ldr	r3, [pc, #232]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003aca:	4b36      	ldr	r3, [pc, #216]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d02e      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d027      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ae8:	4b2e      	ldr	r3, [pc, #184]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003af0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003af2:	4b2e      	ldr	r3, [pc, #184]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003af8:	4b2c      	ldr	r3, [pc, #176]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003afe:	4a29      	ldr	r2, [pc, #164]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d014      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0e:	f7fe fb0d 	bl	800212c <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b14:	e00a      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b16:	f7fe fb09 	bl	800212c <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e036      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0ee      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b38:	4b1a      	ldr	r3, [pc, #104]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	4917      	ldr	r1, [pc, #92]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d105      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b50:	4b14      	ldr	r3, [pc, #80]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	4a13      	ldr	r2, [pc, #76]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b68:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	490b      	ldr	r1, [pc, #44]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d008      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b86:	4b07      	ldr	r3, [pc, #28]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	4904      	ldr	r1, [pc, #16]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	40007000 	.word	0x40007000
 8003bac:	42420440 	.word	0x42420440

08003bb0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	61fb      	str	r3, [r7, #28]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b10      	cmp	r3, #16
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	f200 808a 	bhi.w	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d045      	beq.n	8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d075      	beq.n	8003cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003be6:	e082      	b.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003be8:	4b46      	ldr	r3, [pc, #280]	@ (8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003bee:	4b45      	ldr	r3, [pc, #276]	@ (8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d07b      	beq.n	8003cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	0c9b      	lsrs	r3, r3, #18
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	4a41      	ldr	r2, [pc, #260]	@ (8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003c04:	5cd3      	ldrb	r3, [r2, r3]
 8003c06:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d015      	beq.n	8003c3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c12:	4b3c      	ldr	r3, [pc, #240]	@ (8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	0c5b      	lsrs	r3, r3, #17
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	4a3b      	ldr	r2, [pc, #236]	@ (8003d0c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003c1e:	5cd3      	ldrb	r3, [r2, r3]
 8003c20:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00d      	beq.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003c2c:	4a38      	ldr	r2, [pc, #224]	@ (8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	fb02 f303 	mul.w	r3, r2, r3
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	e004      	b.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4a34      	ldr	r2, [pc, #208]	@ (8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003c42:	fb02 f303 	mul.w	r3, r2, r3
 8003c46:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003c48:	4b2e      	ldr	r3, [pc, #184]	@ (8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c54:	d102      	bne.n	8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	61bb      	str	r3, [r7, #24]
      break;
 8003c5a:	e04a      	b.n	8003cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	4a2d      	ldr	r2, [pc, #180]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	085b      	lsrs	r3, r3, #1
 8003c68:	61bb      	str	r3, [r7, #24]
      break;
 8003c6a:	e042      	b.n	8003cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003c6c:	4b25      	ldr	r3, [pc, #148]	@ (8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c7c:	d108      	bne.n	8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003c88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	e01f      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c9a:	d109      	bne.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003c9c:	4b19      	ldr	r3, [pc, #100]	@ (8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003ca8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	e00f      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cba:	d11c      	bne.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003cbc:	4b11      	ldr	r3, [pc, #68]	@ (8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d016      	beq.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003cc8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003ccc:	61bb      	str	r3, [r7, #24]
      break;
 8003cce:	e012      	b.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003cd0:	e011      	b.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003cd2:	f7ff fe85 	bl	80039e0 <HAL_RCC_GetPCLK2Freq>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8003d04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	0b9b      	lsrs	r3, r3, #14
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cea:	61bb      	str	r3, [r7, #24]
      break;
 8003cec:	e004      	b.n	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003cee:	bf00      	nop
 8003cf0:	e002      	b.n	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003cf2:	bf00      	nop
 8003cf4:	e000      	b.n	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003cf6:	bf00      	nop
    }
  }
  return (frequency);
 8003cf8:	69bb      	ldr	r3, [r7, #24]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3720      	adds	r7, #32
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40021000 	.word	0x40021000
 8003d08:	0800958c 	.word	0x0800958c
 8003d0c:	0800959c 	.word	0x0800959c
 8003d10:	007a1200 	.word	0x007a1200
 8003d14:	003d0900 	.word	0x003d0900
 8003d18:	aaaaaaab 	.word	0xaaaaaaab

08003d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e041      	b.n	8003db2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fe f8d2 	bl	8001eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	f000 fa08 	bl	8004170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d020      	beq.n	8003e1e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d01b      	beq.n	8003e1e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f06f 0202 	mvn.w	r2, #2
 8003dee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f998 	bl	800413a <HAL_TIM_IC_CaptureCallback>
 8003e0a:	e005      	b.n	8003e18 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f98b 	bl	8004128 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f99a 	bl	800414c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d020      	beq.n	8003e6a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d01b      	beq.n	8003e6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f06f 0204 	mvn.w	r2, #4
 8003e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f972 	bl	800413a <HAL_TIM_IC_CaptureCallback>
 8003e56:	e005      	b.n	8003e64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f965 	bl	8004128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f974 	bl	800414c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d020      	beq.n	8003eb6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d01b      	beq.n	8003eb6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f06f 0208 	mvn.w	r2, #8
 8003e86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2204      	movs	r2, #4
 8003e8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f94c 	bl	800413a <HAL_TIM_IC_CaptureCallback>
 8003ea2:	e005      	b.n	8003eb0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f93f 	bl	8004128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f94e 	bl	800414c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d020      	beq.n	8003f02 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f003 0310 	and.w	r3, r3, #16
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d01b      	beq.n	8003f02 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f06f 0210 	mvn.w	r2, #16
 8003ed2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2208      	movs	r2, #8
 8003ed8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f926 	bl	800413a <HAL_TIM_IC_CaptureCallback>
 8003eee:	e005      	b.n	8003efc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f919 	bl	8004128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f928 	bl	800414c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00c      	beq.n	8003f26 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d007      	beq.n	8003f26 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f06f 0201 	mvn.w	r2, #1
 8003f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7fd fe4c 	bl	8001bbe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00c      	beq.n	8003f4a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d007      	beq.n	8003f4a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fa7e 	bl	8004446 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00c      	beq.n	8003f6e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d007      	beq.n	8003f6e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f8f8 	bl	800415e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00c      	beq.n	8003f92 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d007      	beq.n	8003f92 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f06f 0220 	mvn.w	r2, #32
 8003f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fa51 	bl	8004434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_TIM_ConfigClockSource+0x1c>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e0b4      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x186>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003fd4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fdc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fee:	d03e      	beq.n	800406e <HAL_TIM_ConfigClockSource+0xd4>
 8003ff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ff4:	f200 8087 	bhi.w	8004106 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ffc:	f000 8086 	beq.w	800410c <HAL_TIM_ConfigClockSource+0x172>
 8004000:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004004:	d87f      	bhi.n	8004106 <HAL_TIM_ConfigClockSource+0x16c>
 8004006:	2b70      	cmp	r3, #112	@ 0x70
 8004008:	d01a      	beq.n	8004040 <HAL_TIM_ConfigClockSource+0xa6>
 800400a:	2b70      	cmp	r3, #112	@ 0x70
 800400c:	d87b      	bhi.n	8004106 <HAL_TIM_ConfigClockSource+0x16c>
 800400e:	2b60      	cmp	r3, #96	@ 0x60
 8004010:	d050      	beq.n	80040b4 <HAL_TIM_ConfigClockSource+0x11a>
 8004012:	2b60      	cmp	r3, #96	@ 0x60
 8004014:	d877      	bhi.n	8004106 <HAL_TIM_ConfigClockSource+0x16c>
 8004016:	2b50      	cmp	r3, #80	@ 0x50
 8004018:	d03c      	beq.n	8004094 <HAL_TIM_ConfigClockSource+0xfa>
 800401a:	2b50      	cmp	r3, #80	@ 0x50
 800401c:	d873      	bhi.n	8004106 <HAL_TIM_ConfigClockSource+0x16c>
 800401e:	2b40      	cmp	r3, #64	@ 0x40
 8004020:	d058      	beq.n	80040d4 <HAL_TIM_ConfigClockSource+0x13a>
 8004022:	2b40      	cmp	r3, #64	@ 0x40
 8004024:	d86f      	bhi.n	8004106 <HAL_TIM_ConfigClockSource+0x16c>
 8004026:	2b30      	cmp	r3, #48	@ 0x30
 8004028:	d064      	beq.n	80040f4 <HAL_TIM_ConfigClockSource+0x15a>
 800402a:	2b30      	cmp	r3, #48	@ 0x30
 800402c:	d86b      	bhi.n	8004106 <HAL_TIM_ConfigClockSource+0x16c>
 800402e:	2b20      	cmp	r3, #32
 8004030:	d060      	beq.n	80040f4 <HAL_TIM_ConfigClockSource+0x15a>
 8004032:	2b20      	cmp	r3, #32
 8004034:	d867      	bhi.n	8004106 <HAL_TIM_ConfigClockSource+0x16c>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d05c      	beq.n	80040f4 <HAL_TIM_ConfigClockSource+0x15a>
 800403a:	2b10      	cmp	r3, #16
 800403c:	d05a      	beq.n	80040f4 <HAL_TIM_ConfigClockSource+0x15a>
 800403e:	e062      	b.n	8004106 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004050:	f000 f973 	bl	800433a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004062:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	609a      	str	r2, [r3, #8]
      break;
 800406c:	e04f      	b.n	800410e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800407e:	f000 f95c 	bl	800433a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004090:	609a      	str	r2, [r3, #8]
      break;
 8004092:	e03c      	b.n	800410e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a0:	461a      	mov	r2, r3
 80040a2:	f000 f8d3 	bl	800424c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2150      	movs	r1, #80	@ 0x50
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 f92a 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 80040b2:	e02c      	b.n	800410e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040c0:	461a      	mov	r2, r3
 80040c2:	f000 f8f1 	bl	80042a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2160      	movs	r1, #96	@ 0x60
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 f91a 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 80040d2:	e01c      	b.n	800410e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040e0:	461a      	mov	r2, r3
 80040e2:	f000 f8b3 	bl	800424c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2140      	movs	r1, #64	@ 0x40
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 f90a 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 80040f2:	e00c      	b.n	800410e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4619      	mov	r1, r3
 80040fe:	4610      	mov	r0, r2
 8004100:	f000 f901 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8004104:	e003      	b.n	800410e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
      break;
 800410a:	e000      	b.n	800410e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800410c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800411e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr

0800413a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr

0800414c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr

0800415e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr

08004170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a2f      	ldr	r2, [pc, #188]	@ (8004240 <TIM_Base_SetConfig+0xd0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d00b      	beq.n	80041a0 <TIM_Base_SetConfig+0x30>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800418e:	d007      	beq.n	80041a0 <TIM_Base_SetConfig+0x30>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a2c      	ldr	r2, [pc, #176]	@ (8004244 <TIM_Base_SetConfig+0xd4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_Base_SetConfig+0x30>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a2b      	ldr	r2, [pc, #172]	@ (8004248 <TIM_Base_SetConfig+0xd8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d108      	bne.n	80041b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a22      	ldr	r2, [pc, #136]	@ (8004240 <TIM_Base_SetConfig+0xd0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00b      	beq.n	80041d2 <TIM_Base_SetConfig+0x62>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c0:	d007      	beq.n	80041d2 <TIM_Base_SetConfig+0x62>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004244 <TIM_Base_SetConfig+0xd4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d003      	beq.n	80041d2 <TIM_Base_SetConfig+0x62>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004248 <TIM_Base_SetConfig+0xd8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d108      	bne.n	80041e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a0d      	ldr	r2, [pc, #52]	@ (8004240 <TIM_Base_SetConfig+0xd0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d103      	bne.n	8004218 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f023 0201 	bic.w	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	611a      	str	r2, [r3, #16]
  }
}
 8004236:	bf00      	nop
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr
 8004240:	40012c00 	.word	0x40012c00
 8004244:	40000400 	.word	0x40000400
 8004248:	40000800 	.word	0x40000800

0800424c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	f023 0201 	bic.w	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f023 030a 	bic.w	r3, r3, #10
 8004288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	621a      	str	r2, [r3, #32]
}
 800429e:	bf00      	nop
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f023 0210 	bic.w	r2, r3, #16
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	031b      	lsls	r3, r3, #12
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80042e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	621a      	str	r2, [r3, #32]
}
 80042fc:	bf00      	nop
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr

08004306 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800431c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	f043 0307 	orr.w	r3, r3, #7
 8004328:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	609a      	str	r2, [r3, #8]
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr

0800433a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800433a:	b480      	push	{r7}
 800433c:	b087      	sub	sp, #28
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
 8004346:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004354:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	021a      	lsls	r2, r3, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	431a      	orrs	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4313      	orrs	r3, r2
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	609a      	str	r2, [r3, #8]
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800438c:	2302      	movs	r3, #2
 800438e:	e046      	b.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a16      	ldr	r2, [pc, #88]	@ (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00e      	beq.n	80043f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043dc:	d009      	beq.n	80043f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a12      	ldr	r2, [pc, #72]	@ (800442c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d004      	beq.n	80043f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a10      	ldr	r2, [pc, #64]	@ (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d10c      	bne.n	800440c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	4313      	orrs	r3, r2
 8004402:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800

08004434 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr

08004446 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e042      	b.n	80044f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fd fd82 	bl	8001f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2224      	movs	r2, #36	@ 0x24
 8004488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800449a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fe59 	bl	8005154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695a      	ldr	r2, [r3, #20]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08a      	sub	sp, #40	@ 0x28
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	4613      	mov	r3, r2
 8004506:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b20      	cmp	r3, #32
 8004516:	d175      	bne.n	8004604 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <HAL_UART_Transmit+0x2c>
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e06e      	b.n	8004606 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2221      	movs	r2, #33	@ 0x21
 8004532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004536:	f7fd fdf9 	bl	800212c <HAL_GetTick>
 800453a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	88fa      	ldrh	r2, [r7, #6]
 8004540:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	88fa      	ldrh	r2, [r7, #6]
 8004546:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004550:	d108      	bne.n	8004564 <HAL_UART_Transmit+0x6c>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d104      	bne.n	8004564 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800455a:	2300      	movs	r3, #0
 800455c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	61bb      	str	r3, [r7, #24]
 8004562:	e003      	b.n	800456c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004568:	2300      	movs	r3, #0
 800456a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800456c:	e02e      	b.n	80045cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2200      	movs	r2, #0
 8004576:	2180      	movs	r1, #128	@ 0x80
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 fbbd 	bl	8004cf8 <UART_WaitOnFlagUntilTimeout>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e03a      	b.n	8004606 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10b      	bne.n	80045ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	3302      	adds	r3, #2
 80045aa:	61bb      	str	r3, [r7, #24]
 80045ac:	e007      	b.n	80045be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	781a      	ldrb	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	3301      	adds	r3, #1
 80045bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1cb      	bne.n	800456e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2200      	movs	r2, #0
 80045de:	2140      	movs	r1, #64	@ 0x40
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 fb89 	bl	8004cf8 <UART_WaitOnFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e006      	b.n	8004606 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	e000      	b.n	8004606 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004604:	2302      	movs	r3, #2
  }
}
 8004606:	4618      	mov	r0, r3
 8004608:	3720      	adds	r7, #32
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b08a      	sub	sp, #40	@ 0x28
 8004612:	af02      	add	r7, sp, #8
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	603b      	str	r3, [r7, #0]
 800461a:	4613      	mov	r3, r2
 800461c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b20      	cmp	r3, #32
 800462c:	f040 8081 	bne.w	8004732 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <HAL_UART_Receive+0x2e>
 8004636:	88fb      	ldrh	r3, [r7, #6]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e079      	b.n	8004734 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2222      	movs	r2, #34	@ 0x22
 800464a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004654:	f7fd fd6a 	bl	800212c <HAL_GetTick>
 8004658:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	88fa      	ldrh	r2, [r7, #6]
 800465e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	88fa      	ldrh	r2, [r7, #6]
 8004664:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800466e:	d108      	bne.n	8004682 <HAL_UART_Receive+0x74>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d104      	bne.n	8004682 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	61bb      	str	r3, [r7, #24]
 8004680:	e003      	b.n	800468a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004686:	2300      	movs	r3, #0
 8004688:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800468a:	e047      	b.n	800471c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2200      	movs	r2, #0
 8004694:	2120      	movs	r1, #32
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 fb2e 	bl	8004cf8 <UART_WaitOnFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2220      	movs	r2, #32
 80046a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e042      	b.n	8004734 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10c      	bne.n	80046ce <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	3302      	adds	r3, #2
 80046ca:	61bb      	str	r3, [r7, #24]
 80046cc:	e01f      	b.n	800470e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046d6:	d007      	beq.n	80046e8 <HAL_UART_Receive+0xda>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <HAL_UART_Receive+0xe8>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d106      	bne.n	80046f6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	701a      	strb	r2, [r3, #0]
 80046f4:	e008      	b.n	8004708 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004702:	b2da      	uxtb	r2, r3
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	3301      	adds	r3, #1
 800470c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1b2      	bne.n	800468c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	e000      	b.n	8004734 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004732:	2302      	movs	r3, #2
  }
}
 8004734:	4618      	mov	r0, r3
 8004736:	3720      	adds	r7, #32
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	4613      	mov	r3, r2
 8004748:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b20      	cmp	r3, #32
 8004754:	d112      	bne.n	800477c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <HAL_UART_Receive_IT+0x26>
 800475c:	88fb      	ldrh	r3, [r7, #6]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e00b      	b.n	800477e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	461a      	mov	r2, r3
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 fb19 	bl	8004daa <UART_Start_Receive_IT>
 8004778:	4603      	mov	r3, r0
 800477a:	e000      	b.n	800477e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800477c:	2302      	movs	r3, #2
  }
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b0ba      	sub	sp, #232	@ 0xe8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80047c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10f      	bne.n	80047ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d009      	beq.n	80047ee <HAL_UART_IRQHandler+0x66>
 80047da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 fbf5 	bl	8004fd6 <UART_Receive_IT>
      return;
 80047ec:	e25b      	b.n	8004ca6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 80de 	beq.w	80049b4 <HAL_UART_IRQHandler+0x22c>
 80047f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d106      	bne.n	8004812 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004808:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80d1 	beq.w	80049b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00b      	beq.n	8004836 <HAL_UART_IRQHandler+0xae>
 800481e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004826:	2b00      	cmp	r3, #0
 8004828:	d005      	beq.n	8004836 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800482e:	f043 0201 	orr.w	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00b      	beq.n	800485a <HAL_UART_IRQHandler+0xd2>
 8004842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d005      	beq.n	800485a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004852:	f043 0202 	orr.w	r2, r3, #2
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800485a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00b      	beq.n	800487e <HAL_UART_IRQHandler+0xf6>
 8004866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004876:	f043 0204 	orr.w	r2, r3, #4
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800487e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b00      	cmp	r3, #0
 8004888:	d011      	beq.n	80048ae <HAL_UART_IRQHandler+0x126>
 800488a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b00      	cmp	r3, #0
 8004894:	d105      	bne.n	80048a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d005      	beq.n	80048ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a6:	f043 0208 	orr.w	r2, r3, #8
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 81f2 	beq.w	8004c9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048bc:	f003 0320 	and.w	r3, r3, #32
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d008      	beq.n	80048d6 <HAL_UART_IRQHandler+0x14e>
 80048c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048c8:	f003 0320 	and.w	r3, r3, #32
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fb80 	bl	8004fd6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	bf14      	ite	ne
 80048e4:	2301      	movne	r3, #1
 80048e6:	2300      	moveq	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d103      	bne.n	8004902 <HAL_UART_IRQHandler+0x17a>
 80048fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d04f      	beq.n	80049a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fa8a 	bl	8004e1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d041      	beq.n	800499a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3314      	adds	r3, #20
 800491c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004920:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004924:	e853 3f00 	ldrex	r3, [r3]
 8004928:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800492c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004930:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004934:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3314      	adds	r3, #20
 800493e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004942:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004946:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800494e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800495a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1d9      	bne.n	8004916 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d013      	beq.n	8004992 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800496e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b68 <HAL_UART_IRQHandler+0x3e0>)
 8004970:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004976:	4618      	mov	r0, r3
 8004978:	f7fe fa28 	bl	8002dcc <HAL_DMA_Abort_IT>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d016      	beq.n	80049b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800498c:	4610      	mov	r0, r2
 800498e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004990:	e00e      	b.n	80049b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f99c 	bl	8004cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004998:	e00a      	b.n	80049b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f998 	bl	8004cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a0:	e006      	b.n	80049b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f994 	bl	8004cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80049ae:	e175      	b.n	8004c9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b0:	bf00      	nop
    return;
 80049b2:	e173      	b.n	8004c9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	f040 814f 	bne.w	8004c5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 8148 	beq.w	8004c5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 8141 	beq.w	8004c5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049da:	2300      	movs	r3, #0
 80049dc:	60bb      	str	r3, [r7, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	60bb      	str	r3, [r7, #8]
 80049ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80b6 	beq.w	8004b6c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8145 	beq.w	8004ca0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	f080 813e 	bcs.w	8004ca0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	f000 8088 	beq.w	8004b48 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	330c      	adds	r3, #12
 8004a60:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004a64:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004a70:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1d9      	bne.n	8004a38 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3314      	adds	r3, #20
 8004a8a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a8e:	e853 3f00 	ldrex	r3, [r3]
 8004a92:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004a94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a96:	f023 0301 	bic.w	r3, r3, #1
 8004a9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3314      	adds	r3, #20
 8004aa4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004aa8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004aac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004ab0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004ab4:	e841 2300 	strex	r3, r2, [r1]
 8004ab8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004aba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e1      	bne.n	8004a84 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3314      	adds	r3, #20
 8004ac6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004aca:	e853 3f00 	ldrex	r3, [r3]
 8004ace:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004ad0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ad2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3314      	adds	r3, #20
 8004ae0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ae4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ae6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004aea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004af2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e3      	bne.n	8004ac0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	330c      	adds	r3, #12
 8004b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b18:	f023 0310 	bic.w	r3, r3, #16
 8004b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	330c      	adds	r3, #12
 8004b26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004b2a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b2c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e3      	bne.n	8004b06 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe f907 	bl	8002d56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f8bf 	bl	8004ce2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b64:	e09c      	b.n	8004ca0 <HAL_UART_IRQHandler+0x518>
 8004b66:	bf00      	nop
 8004b68:	08004ee1 	.word	0x08004ee1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 808e 	beq.w	8004ca4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004b88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 8089 	beq.w	8004ca4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	330c      	adds	r3, #12
 8004b98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ba8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004bb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004bb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1e3      	bne.n	8004b92 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3314      	adds	r3, #20
 8004bd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	e853 3f00 	ldrex	r3, [r3]
 8004bd8:	623b      	str	r3, [r7, #32]
   return(result);
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	f023 0301 	bic.w	r3, r3, #1
 8004be0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3314      	adds	r3, #20
 8004bea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004bee:	633a      	str	r2, [r7, #48]	@ 0x30
 8004bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e3      	bne.n	8004bca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	330c      	adds	r3, #12
 8004c16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 0310 	bic.w	r3, r3, #16
 8004c26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	330c      	adds	r3, #12
 8004c30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004c34:	61fa      	str	r2, [r7, #28]
 8004c36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c38:	69b9      	ldr	r1, [r7, #24]
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	e841 2300 	strex	r3, r2, [r1]
 8004c40:	617b      	str	r3, [r7, #20]
   return(result);
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1e3      	bne.n	8004c10 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c52:	4619      	mov	r1, r3
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f844 	bl	8004ce2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c5a:	e023      	b.n	8004ca4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d009      	beq.n	8004c7c <HAL_UART_IRQHandler+0x4f4>
 8004c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f947 	bl	8004f08 <UART_Transmit_IT>
    return;
 8004c7a:	e014      	b.n	8004ca6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00e      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x51e>
 8004c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d008      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f986 	bl	8004fa6 <UART_EndTransmit_IT>
    return;
 8004c9a:	e004      	b.n	8004ca6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004c9c:	bf00      	nop
 8004c9e:	e002      	b.n	8004ca6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ca0:	bf00      	nop
 8004ca2:	e000      	b.n	8004ca6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ca4:	bf00      	nop
  }
}
 8004ca6:	37e8      	adds	r7, #232	@ 0xe8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr

08004cbe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr

08004cd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	460b      	mov	r3, r1
 8004cec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr

08004cf8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	603b      	str	r3, [r7, #0]
 8004d04:	4613      	mov	r3, r2
 8004d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d08:	e03b      	b.n	8004d82 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d10:	d037      	beq.n	8004d82 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d12:	f7fd fa0b 	bl	800212c <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	6a3a      	ldr	r2, [r7, #32]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d302      	bcc.n	8004d28 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e03a      	b.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f003 0304 	and.w	r3, r3, #4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d023      	beq.n	8004d82 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b80      	cmp	r3, #128	@ 0x80
 8004d3e:	d020      	beq.n	8004d82 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b40      	cmp	r3, #64	@ 0x40
 8004d44:	d01d      	beq.n	8004d82 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d116      	bne.n	8004d82 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d54:	2300      	movs	r3, #0
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 f856 	bl	8004e1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2208      	movs	r2, #8
 8004d74:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e00f      	b.n	8004da2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	bf0c      	ite	eq
 8004d92:	2301      	moveq	r3, #1
 8004d94:	2300      	movne	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	79fb      	ldrb	r3, [r7, #7]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d0b4      	beq.n	8004d0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	60f8      	str	r0, [r7, #12]
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	4613      	mov	r3, r2
 8004db6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	88fa      	ldrh	r2, [r7, #6]
 8004dc2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	88fa      	ldrh	r2, [r7, #6]
 8004dc8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2222      	movs	r2, #34	@ 0x22
 8004dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695a      	ldr	r2, [r3, #20]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0201 	orr.w	r2, r2, #1
 8004dfe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0220 	orr.w	r2, r2, #32
 8004e0e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr

08004e1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b095      	sub	sp, #84	@ 0x54
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	330c      	adds	r3, #12
 8004e2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e2e:	e853 3f00 	ldrex	r3, [r3]
 8004e32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	330c      	adds	r3, #12
 8004e42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e44:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e4c:	e841 2300 	strex	r3, r2, [r1]
 8004e50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e5      	bne.n	8004e24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3314      	adds	r3, #20
 8004e5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f023 0301 	bic.w	r3, r3, #1
 8004e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3314      	adds	r3, #20
 8004e76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e80:	e841 2300 	strex	r3, r2, [r1]
 8004e84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e5      	bne.n	8004e58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d119      	bne.n	8004ec8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	330c      	adds	r3, #12
 8004e9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f023 0310 	bic.w	r3, r3, #16
 8004eaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	330c      	adds	r3, #12
 8004eb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004eb4:	61ba      	str	r2, [r7, #24]
 8004eb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	6979      	ldr	r1, [r7, #20]
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e5      	bne.n	8004e94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ed6:	bf00      	nop
 8004ed8:	3754      	adds	r7, #84	@ 0x54
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bc80      	pop	{r7}
 8004ede:	4770      	bx	lr

08004ee0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f7ff fee8 	bl	8004cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f00:	bf00      	nop
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b21      	cmp	r3, #33	@ 0x21
 8004f1a:	d13e      	bne.n	8004f9a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f24:	d114      	bne.n	8004f50 <UART_Transmit_IT+0x48>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d110      	bne.n	8004f50 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f42:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	1c9a      	adds	r2, r3, #2
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	621a      	str	r2, [r3, #32]
 8004f4e:	e008      	b.n	8004f62 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	1c59      	adds	r1, r3, #1
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6211      	str	r1, [r2, #32]
 8004f5a:	781a      	ldrb	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10f      	bne.n	8004f96 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	e000      	b.n	8004f9c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f9a:	2302      	movs	r3, #2
  }
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bc80      	pop	{r7}
 8004fa4:	4770      	bx	lr

08004fa6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b082      	sub	sp, #8
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fbc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7ff fe70 	bl	8004cac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b08c      	sub	sp, #48	@ 0x30
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b22      	cmp	r3, #34	@ 0x22
 8004fe8:	f040 80ae 	bne.w	8005148 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ff4:	d117      	bne.n	8005026 <UART_Receive_IT+0x50>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d113      	bne.n	8005026 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005006:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	b29b      	uxth	r3, r3
 8005010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005014:	b29a      	uxth	r2, r3
 8005016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005018:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501e:	1c9a      	adds	r2, r3, #2
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	629a      	str	r2, [r3, #40]	@ 0x28
 8005024:	e026      	b.n	8005074 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800502c:	2300      	movs	r3, #0
 800502e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005038:	d007      	beq.n	800504a <UART_Receive_IT+0x74>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10a      	bne.n	8005058 <UART_Receive_IT+0x82>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d106      	bne.n	8005058 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	b2da      	uxtb	r2, r3
 8005052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005054:	701a      	strb	r2, [r3, #0]
 8005056:	e008      	b.n	800506a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	b2db      	uxtb	r3, r3
 8005060:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005064:	b2da      	uxtb	r2, r3
 8005066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005068:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005078:	b29b      	uxth	r3, r3
 800507a:	3b01      	subs	r3, #1
 800507c:	b29b      	uxth	r3, r3
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	4619      	mov	r1, r3
 8005082:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005084:	2b00      	cmp	r3, #0
 8005086:	d15d      	bne.n	8005144 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0220 	bic.w	r2, r2, #32
 8005096:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695a      	ldr	r2, [r3, #20]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0201 	bic.w	r2, r2, #1
 80050b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d135      	bne.n	800513a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	330c      	adds	r3, #12
 80050da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	e853 3f00 	ldrex	r3, [r3]
 80050e2:	613b      	str	r3, [r7, #16]
   return(result);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f023 0310 	bic.w	r3, r3, #16
 80050ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	330c      	adds	r3, #12
 80050f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f4:	623a      	str	r2, [r7, #32]
 80050f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f8:	69f9      	ldr	r1, [r7, #28]
 80050fa:	6a3a      	ldr	r2, [r7, #32]
 80050fc:	e841 2300 	strex	r3, r2, [r1]
 8005100:	61bb      	str	r3, [r7, #24]
   return(result);
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1e5      	bne.n	80050d4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	2b10      	cmp	r3, #16
 8005114:	d10a      	bne.n	800512c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005130:	4619      	mov	r1, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff fdd5 	bl	8004ce2 <HAL_UARTEx_RxEventCallback>
 8005138:	e002      	b.n	8005140 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff fdbf 	bl	8004cbe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005140:	2300      	movs	r3, #0
 8005142:	e002      	b.n	800514a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	e000      	b.n	800514a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005148:	2302      	movs	r3, #2
  }
}
 800514a:	4618      	mov	r0, r3
 800514c:	3730      	adds	r7, #48	@ 0x30
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800518e:	f023 030c 	bic.w	r3, r3, #12
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	68b9      	ldr	r1, [r7, #8]
 8005198:	430b      	orrs	r3, r1
 800519a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005268 <UART_SetConfig+0x114>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d103      	bne.n	80051c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80051bc:	f7fe fc10 	bl	80039e0 <HAL_RCC_GetPCLK2Freq>
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	e002      	b.n	80051ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80051c4:	f7fe fbf8 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 80051c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4613      	mov	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	009a      	lsls	r2, r3, #2
 80051d4:	441a      	add	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e0:	4a22      	ldr	r2, [pc, #136]	@ (800526c <UART_SetConfig+0x118>)
 80051e2:	fba2 2303 	umull	r2, r3, r2, r3
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	0119      	lsls	r1, r3, #4
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	009a      	lsls	r2, r3, #2
 80051f4:	441a      	add	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005200:	4b1a      	ldr	r3, [pc, #104]	@ (800526c <UART_SetConfig+0x118>)
 8005202:	fba3 0302 	umull	r0, r3, r3, r2
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	2064      	movs	r0, #100	@ 0x64
 800520a:	fb00 f303 	mul.w	r3, r0, r3
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	011b      	lsls	r3, r3, #4
 8005212:	3332      	adds	r3, #50	@ 0x32
 8005214:	4a15      	ldr	r2, [pc, #84]	@ (800526c <UART_SetConfig+0x118>)
 8005216:	fba2 2303 	umull	r2, r3, r2, r3
 800521a:	095b      	lsrs	r3, r3, #5
 800521c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005220:	4419      	add	r1, r3
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	4613      	mov	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	009a      	lsls	r2, r3, #2
 800522c:	441a      	add	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	fbb2 f2f3 	udiv	r2, r2, r3
 8005238:	4b0c      	ldr	r3, [pc, #48]	@ (800526c <UART_SetConfig+0x118>)
 800523a:	fba3 0302 	umull	r0, r3, r3, r2
 800523e:	095b      	lsrs	r3, r3, #5
 8005240:	2064      	movs	r0, #100	@ 0x64
 8005242:	fb00 f303 	mul.w	r3, r0, r3
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	3332      	adds	r3, #50	@ 0x32
 800524c:	4a07      	ldr	r2, [pc, #28]	@ (800526c <UART_SetConfig+0x118>)
 800524e:	fba2 2303 	umull	r2, r3, r2, r3
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	f003 020f 	and.w	r2, r3, #15
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	440a      	add	r2, r1
 800525e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005260:	bf00      	nop
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40013800 	.word	0x40013800
 800526c:	51eb851f 	.word	0x51eb851f

08005270 <LCD16X2_DATA>:
#include "../../Util/Util.h"

//-----[ Alphanumeric LCD16X2 Functions ]-----

void LCD16X2_DATA(uint8_t LCD16X2_Index, unsigned char Data)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	4603      	mov	r3, r0
 8005278:	460a      	mov	r2, r1
 800527a:	71fb      	strb	r3, [r7, #7]
 800527c:	4613      	mov	r3, r2
 800527e:	71bb      	strb	r3, [r7, #6]
    if(Data & 1)
 8005280:	79bb      	ldrb	r3, [r7, #6]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d014      	beq.n	80052b4 <LCD16X2_DATA+0x44>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D4_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D4_PINx, 1);
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	4a5a      	ldr	r2, [pc, #360]	@ (80053f8 <LCD16X2_DATA+0x188>)
 800528e:	2134      	movs	r1, #52	@ 0x34
 8005290:	fb01 f303 	mul.w	r3, r1, r3
 8005294:	4413      	add	r3, r2
 8005296:	3304      	adds	r3, #4
 8005298:	6818      	ldr	r0, [r3, #0]
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	4a56      	ldr	r2, [pc, #344]	@ (80053f8 <LCD16X2_DATA+0x188>)
 800529e:	2134      	movs	r1, #52	@ 0x34
 80052a0:	fb01 f303 	mul.w	r3, r1, r3
 80052a4:	4413      	add	r3, r2
 80052a6:	3308      	adds	r3, #8
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	2201      	movs	r2, #1
 80052ac:	4619      	mov	r1, r3
 80052ae:	f7fd ffa0 	bl	80031f2 <HAL_GPIO_WritePin>
 80052b2:	e013      	b.n	80052dc <LCD16X2_DATA+0x6c>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D4_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D4_PINx, 0);
 80052b4:	79fb      	ldrb	r3, [r7, #7]
 80052b6:	4a50      	ldr	r2, [pc, #320]	@ (80053f8 <LCD16X2_DATA+0x188>)
 80052b8:	2134      	movs	r1, #52	@ 0x34
 80052ba:	fb01 f303 	mul.w	r3, r1, r3
 80052be:	4413      	add	r3, r2
 80052c0:	3304      	adds	r3, #4
 80052c2:	6818      	ldr	r0, [r3, #0]
 80052c4:	79fb      	ldrb	r3, [r7, #7]
 80052c6:	4a4c      	ldr	r2, [pc, #304]	@ (80053f8 <LCD16X2_DATA+0x188>)
 80052c8:	2134      	movs	r1, #52	@ 0x34
 80052ca:	fb01 f303 	mul.w	r3, r1, r3
 80052ce:	4413      	add	r3, r2
 80052d0:	3308      	adds	r3, #8
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	2200      	movs	r2, #0
 80052d6:	4619      	mov	r1, r3
 80052d8:	f7fd ff8b 	bl	80031f2 <HAL_GPIO_WritePin>
    if(Data & 2)
 80052dc:	79bb      	ldrb	r3, [r7, #6]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d014      	beq.n	8005310 <LCD16X2_DATA+0xa0>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D5_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D5_PINx, 1);
 80052e6:	79fb      	ldrb	r3, [r7, #7]
 80052e8:	4a43      	ldr	r2, [pc, #268]	@ (80053f8 <LCD16X2_DATA+0x188>)
 80052ea:	2134      	movs	r1, #52	@ 0x34
 80052ec:	fb01 f303 	mul.w	r3, r1, r3
 80052f0:	4413      	add	r3, r2
 80052f2:	330c      	adds	r3, #12
 80052f4:	6818      	ldr	r0, [r3, #0]
 80052f6:	79fb      	ldrb	r3, [r7, #7]
 80052f8:	4a3f      	ldr	r2, [pc, #252]	@ (80053f8 <LCD16X2_DATA+0x188>)
 80052fa:	2134      	movs	r1, #52	@ 0x34
 80052fc:	fb01 f303 	mul.w	r3, r1, r3
 8005300:	4413      	add	r3, r2
 8005302:	3310      	adds	r3, #16
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	2201      	movs	r2, #1
 8005308:	4619      	mov	r1, r3
 800530a:	f7fd ff72 	bl	80031f2 <HAL_GPIO_WritePin>
 800530e:	e013      	b.n	8005338 <LCD16X2_DATA+0xc8>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D5_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D5_PINx, 0);
 8005310:	79fb      	ldrb	r3, [r7, #7]
 8005312:	4a39      	ldr	r2, [pc, #228]	@ (80053f8 <LCD16X2_DATA+0x188>)
 8005314:	2134      	movs	r1, #52	@ 0x34
 8005316:	fb01 f303 	mul.w	r3, r1, r3
 800531a:	4413      	add	r3, r2
 800531c:	330c      	adds	r3, #12
 800531e:	6818      	ldr	r0, [r3, #0]
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	4a35      	ldr	r2, [pc, #212]	@ (80053f8 <LCD16X2_DATA+0x188>)
 8005324:	2134      	movs	r1, #52	@ 0x34
 8005326:	fb01 f303 	mul.w	r3, r1, r3
 800532a:	4413      	add	r3, r2
 800532c:	3310      	adds	r3, #16
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	2200      	movs	r2, #0
 8005332:	4619      	mov	r1, r3
 8005334:	f7fd ff5d 	bl	80031f2 <HAL_GPIO_WritePin>
    if(Data & 4)
 8005338:	79bb      	ldrb	r3, [r7, #6]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d014      	beq.n	800536c <LCD16X2_DATA+0xfc>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D6_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D6_PINx, 1);
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	4a2c      	ldr	r2, [pc, #176]	@ (80053f8 <LCD16X2_DATA+0x188>)
 8005346:	2134      	movs	r1, #52	@ 0x34
 8005348:	fb01 f303 	mul.w	r3, r1, r3
 800534c:	4413      	add	r3, r2
 800534e:	3314      	adds	r3, #20
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	4a28      	ldr	r2, [pc, #160]	@ (80053f8 <LCD16X2_DATA+0x188>)
 8005356:	2134      	movs	r1, #52	@ 0x34
 8005358:	fb01 f303 	mul.w	r3, r1, r3
 800535c:	4413      	add	r3, r2
 800535e:	3318      	adds	r3, #24
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	2201      	movs	r2, #1
 8005364:	4619      	mov	r1, r3
 8005366:	f7fd ff44 	bl	80031f2 <HAL_GPIO_WritePin>
 800536a:	e013      	b.n	8005394 <LCD16X2_DATA+0x124>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D6_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D6_PINx, 0);
 800536c:	79fb      	ldrb	r3, [r7, #7]
 800536e:	4a22      	ldr	r2, [pc, #136]	@ (80053f8 <LCD16X2_DATA+0x188>)
 8005370:	2134      	movs	r1, #52	@ 0x34
 8005372:	fb01 f303 	mul.w	r3, r1, r3
 8005376:	4413      	add	r3, r2
 8005378:	3314      	adds	r3, #20
 800537a:	6818      	ldr	r0, [r3, #0]
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	4a1e      	ldr	r2, [pc, #120]	@ (80053f8 <LCD16X2_DATA+0x188>)
 8005380:	2134      	movs	r1, #52	@ 0x34
 8005382:	fb01 f303 	mul.w	r3, r1, r3
 8005386:	4413      	add	r3, r2
 8005388:	3318      	adds	r3, #24
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	2200      	movs	r2, #0
 800538e:	4619      	mov	r1, r3
 8005390:	f7fd ff2f 	bl	80031f2 <HAL_GPIO_WritePin>
    if(Data & 8)
 8005394:	79bb      	ldrb	r3, [r7, #6]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d014      	beq.n	80053c8 <LCD16X2_DATA+0x158>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 1);
 800539e:	79fb      	ldrb	r3, [r7, #7]
 80053a0:	4a15      	ldr	r2, [pc, #84]	@ (80053f8 <LCD16X2_DATA+0x188>)
 80053a2:	2134      	movs	r1, #52	@ 0x34
 80053a4:	fb01 f303 	mul.w	r3, r1, r3
 80053a8:	4413      	add	r3, r2
 80053aa:	331c      	adds	r3, #28
 80053ac:	6818      	ldr	r0, [r3, #0]
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	4a11      	ldr	r2, [pc, #68]	@ (80053f8 <LCD16X2_DATA+0x188>)
 80053b2:	2134      	movs	r1, #52	@ 0x34
 80053b4:	fb01 f303 	mul.w	r3, r1, r3
 80053b8:	4413      	add	r3, r2
 80053ba:	3320      	adds	r3, #32
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	2201      	movs	r2, #1
 80053c0:	4619      	mov	r1, r3
 80053c2:	f7fd ff16 	bl	80031f2 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 0);
}
 80053c6:	e013      	b.n	80053f0 <LCD16X2_DATA+0x180>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 0);
 80053c8:	79fb      	ldrb	r3, [r7, #7]
 80053ca:	4a0b      	ldr	r2, [pc, #44]	@ (80053f8 <LCD16X2_DATA+0x188>)
 80053cc:	2134      	movs	r1, #52	@ 0x34
 80053ce:	fb01 f303 	mul.w	r3, r1, r3
 80053d2:	4413      	add	r3, r2
 80053d4:	331c      	adds	r3, #28
 80053d6:	6818      	ldr	r0, [r3, #0]
 80053d8:	79fb      	ldrb	r3, [r7, #7]
 80053da:	4a07      	ldr	r2, [pc, #28]	@ (80053f8 <LCD16X2_DATA+0x188>)
 80053dc:	2134      	movs	r1, #52	@ 0x34
 80053de:	fb01 f303 	mul.w	r3, r1, r3
 80053e2:	4413      	add	r3, r2
 80053e4:	3320      	adds	r3, #32
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	2200      	movs	r2, #0
 80053ea:	4619      	mov	r1, r3
 80053ec:	f7fd ff01 	bl	80031f2 <HAL_GPIO_WritePin>
}
 80053f0:	bf00      	nop
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	080095a0 	.word	0x080095a0

080053fc <LCD16X2_CMD>:

void LCD16X2_CMD(uint8_t LCD16X2_Index, unsigned char CMD)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	460a      	mov	r2, r1
 8005406:	71fb      	strb	r3, [r7, #7]
 8005408:	4613      	mov	r3, r2
 800540a:	71bb      	strb	r3, [r7, #6]
    // Select Command Register
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 0);
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	4a57      	ldr	r2, [pc, #348]	@ (800556c <LCD16X2_CMD+0x170>)
 8005410:	2134      	movs	r1, #52	@ 0x34
 8005412:	fb01 f303 	mul.w	r3, r1, r3
 8005416:	4413      	add	r3, r2
 8005418:	332c      	adds	r3, #44	@ 0x2c
 800541a:	6818      	ldr	r0, [r3, #0]
 800541c:	79fb      	ldrb	r3, [r7, #7]
 800541e:	4a53      	ldr	r2, [pc, #332]	@ (800556c <LCD16X2_CMD+0x170>)
 8005420:	2134      	movs	r1, #52	@ 0x34
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	4413      	add	r3, r2
 8005428:	3330      	adds	r3, #48	@ 0x30
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	2200      	movs	r2, #0
 800542e:	4619      	mov	r1, r3
 8005430:	f7fd fedf 	bl	80031f2 <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
	LCD16X2_DATA(LCD16X2_Index, CMD);
 8005434:	79ba      	ldrb	r2, [r7, #6]
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	4611      	mov	r1, r2
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff ff18 	bl	8005270 <LCD16X2_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	4a4a      	ldr	r2, [pc, #296]	@ (800556c <LCD16X2_CMD+0x170>)
 8005444:	2134      	movs	r1, #52	@ 0x34
 8005446:	fb01 f303 	mul.w	r3, r1, r3
 800544a:	4413      	add	r3, r2
 800544c:	3324      	adds	r3, #36	@ 0x24
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	79fb      	ldrb	r3, [r7, #7]
 8005452:	4a46      	ldr	r2, [pc, #280]	@ (800556c <LCD16X2_CMD+0x170>)
 8005454:	2134      	movs	r1, #52	@ 0x34
 8005456:	fb01 f303 	mul.w	r3, r1, r3
 800545a:	4413      	add	r3, r2
 800545c:	3328      	adds	r3, #40	@ 0x28
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	2200      	movs	r2, #0
 8005462:	4619      	mov	r1, r3
 8005464:	f7fd fec5 	bl	80031f2 <HAL_GPIO_WritePin>
    DELAY_US(5);
 8005468:	4b41      	ldr	r3, [pc, #260]	@ (8005570 <LCD16X2_CMD+0x174>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	4b41      	ldr	r3, [pc, #260]	@ (8005574 <LCD16X2_CMD+0x178>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a41      	ldr	r2, [pc, #260]	@ (8005578 <LCD16X2_CMD+0x17c>)
 8005474:	fba2 2303 	umull	r2, r3, r2, r3
 8005478:	0c9a      	lsrs	r2, r3, #18
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	441a      	add	r2, r3
 8005480:	4b3c      	ldr	r3, [pc, #240]	@ (8005574 <LCD16X2_CMD+0x178>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	493c      	ldr	r1, [pc, #240]	@ (8005578 <LCD16X2_CMD+0x17c>)
 8005486:	fba1 1303 	umull	r1, r3, r1, r3
 800548a:	0c9b      	lsrs	r3, r3, #18
 800548c:	085b      	lsrs	r3, r3, #1
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	61bb      	str	r3, [r7, #24]
 8005492:	4b37      	ldr	r3, [pc, #220]	@ (8005570 <LCD16X2_CMD+0x174>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	69fa      	ldr	r2, [r7, #28]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	429a      	cmp	r2, r3
 800549e:	d8f8      	bhi.n	8005492 <LCD16X2_CMD+0x96>
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 80054a0:	79fb      	ldrb	r3, [r7, #7]
 80054a2:	4a32      	ldr	r2, [pc, #200]	@ (800556c <LCD16X2_CMD+0x170>)
 80054a4:	2134      	movs	r1, #52	@ 0x34
 80054a6:	fb01 f303 	mul.w	r3, r1, r3
 80054aa:	4413      	add	r3, r2
 80054ac:	3324      	adds	r3, #36	@ 0x24
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	79fb      	ldrb	r3, [r7, #7]
 80054b2:	4a2e      	ldr	r2, [pc, #184]	@ (800556c <LCD16X2_CMD+0x170>)
 80054b4:	2134      	movs	r1, #52	@ 0x34
 80054b6:	fb01 f303 	mul.w	r3, r1, r3
 80054ba:	4413      	add	r3, r2
 80054bc:	3328      	adds	r3, #40	@ 0x28
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	2201      	movs	r2, #1
 80054c2:	4619      	mov	r1, r3
 80054c4:	f7fd fe95 	bl	80031f2 <HAL_GPIO_WritePin>
    DELAY_US(5);
 80054c8:	4b29      	ldr	r3, [pc, #164]	@ (8005570 <LCD16X2_CMD+0x174>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	4b29      	ldr	r3, [pc, #164]	@ (8005574 <LCD16X2_CMD+0x178>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a29      	ldr	r2, [pc, #164]	@ (8005578 <LCD16X2_CMD+0x17c>)
 80054d4:	fba2 2303 	umull	r2, r3, r2, r3
 80054d8:	0c9a      	lsrs	r2, r3, #18
 80054da:	4613      	mov	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	441a      	add	r2, r3
 80054e0:	4b24      	ldr	r3, [pc, #144]	@ (8005574 <LCD16X2_CMD+0x178>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4924      	ldr	r1, [pc, #144]	@ (8005578 <LCD16X2_CMD+0x17c>)
 80054e6:	fba1 1303 	umull	r1, r3, r1, r3
 80054ea:	0c9b      	lsrs	r3, r3, #18
 80054ec:	085b      	lsrs	r3, r3, #1
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	4b1f      	ldr	r3, [pc, #124]	@ (8005570 <LCD16X2_CMD+0x174>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d8f8      	bhi.n	80054f2 <LCD16X2_CMD+0xf6>
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8005500:	79fb      	ldrb	r3, [r7, #7]
 8005502:	4a1a      	ldr	r2, [pc, #104]	@ (800556c <LCD16X2_CMD+0x170>)
 8005504:	2134      	movs	r1, #52	@ 0x34
 8005506:	fb01 f303 	mul.w	r3, r1, r3
 800550a:	4413      	add	r3, r2
 800550c:	3324      	adds	r3, #36	@ 0x24
 800550e:	6818      	ldr	r0, [r3, #0]
 8005510:	79fb      	ldrb	r3, [r7, #7]
 8005512:	4a16      	ldr	r2, [pc, #88]	@ (800556c <LCD16X2_CMD+0x170>)
 8005514:	2134      	movs	r1, #52	@ 0x34
 8005516:	fb01 f303 	mul.w	r3, r1, r3
 800551a:	4413      	add	r3, r2
 800551c:	3328      	adds	r3, #40	@ 0x28
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	2200      	movs	r2, #0
 8005522:	4619      	mov	r1, r3
 8005524:	f7fd fe65 	bl	80031f2 <HAL_GPIO_WritePin>
    DELAY_US(100);
 8005528:	4b11      	ldr	r3, [pc, #68]	@ (8005570 <LCD16X2_CMD+0x174>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	4b11      	ldr	r3, [pc, #68]	@ (8005574 <LCD16X2_CMD+0x178>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a11      	ldr	r2, [pc, #68]	@ (8005578 <LCD16X2_CMD+0x17c>)
 8005534:	fba2 2303 	umull	r2, r3, r2, r3
 8005538:	0c9b      	lsrs	r3, r3, #18
 800553a:	2264      	movs	r2, #100	@ 0x64
 800553c:	fb03 f202 	mul.w	r2, r3, r2
 8005540:	4b0c      	ldr	r3, [pc, #48]	@ (8005574 <LCD16X2_CMD+0x178>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	490c      	ldr	r1, [pc, #48]	@ (8005578 <LCD16X2_CMD+0x17c>)
 8005546:	fba1 1303 	umull	r1, r3, r1, r3
 800554a:	0c9b      	lsrs	r3, r3, #18
 800554c:	085b      	lsrs	r3, r3, #1
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	60bb      	str	r3, [r7, #8]
 8005552:	4b07      	ldr	r3, [pc, #28]	@ (8005570 <LCD16X2_CMD+0x174>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	429a      	cmp	r2, r3
 800555e:	d8f8      	bhi.n	8005552 <LCD16X2_CMD+0x156>
}
 8005560:	bf00      	nop
 8005562:	bf00      	nop
 8005564:	3720      	adds	r7, #32
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	080095a0 	.word	0x080095a0
 8005570:	e000e010 	.word	0xe000e010
 8005574:	20000000 	.word	0x20000000
 8005578:	431bde83 	.word	0x431bde83

0800557c <LCD16X2_Clear>:

void LCD16X2_Clear(uint8_t LCD16X2_Index)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	71fb      	strb	r3, [r7, #7]
	LCD16X2_CMD(LCD16X2_Index, 0);
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	2100      	movs	r1, #0
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff ff36 	bl	80053fc <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 1);
 8005590:	79fb      	ldrb	r3, [r7, #7]
 8005592:	2101      	movs	r1, #1
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff ff31 	bl	80053fc <LCD16X2_CMD>
    DELAY_MS(2);
 800559a:	2300      	movs	r3, #0
 800559c:	617b      	str	r3, [r7, #20]
 800559e:	e01f      	b.n	80055e0 <LCD16X2_Clear+0x64>
 80055a0:	4b13      	ldr	r3, [pc, #76]	@ (80055f0 <LCD16X2_Clear+0x74>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	613b      	str	r3, [r7, #16]
 80055a6:	4b13      	ldr	r3, [pc, #76]	@ (80055f4 <LCD16X2_Clear+0x78>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a13      	ldr	r2, [pc, #76]	@ (80055f8 <LCD16X2_Clear+0x7c>)
 80055ac:	fba2 2303 	umull	r2, r3, r2, r3
 80055b0:	0c9b      	lsrs	r3, r3, #18
 80055b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80055b6:	fb03 f202 	mul.w	r2, r3, r2
 80055ba:	4b0e      	ldr	r3, [pc, #56]	@ (80055f4 <LCD16X2_Clear+0x78>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	490e      	ldr	r1, [pc, #56]	@ (80055f8 <LCD16X2_Clear+0x7c>)
 80055c0:	fba1 1303 	umull	r1, r3, r1, r3
 80055c4:	0c9b      	lsrs	r3, r3, #18
 80055c6:	085b      	lsrs	r3, r3, #1
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	4b08      	ldr	r3, [pc, #32]	@ (80055f0 <LCD16X2_Clear+0x74>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d8f8      	bhi.n	80055cc <LCD16X2_Clear+0x50>
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	3301      	adds	r3, #1
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d9dc      	bls.n	80055a0 <LCD16X2_Clear+0x24>
}
 80055e6:	bf00      	nop
 80055e8:	bf00      	nop
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	e000e010 	.word	0xe000e010
 80055f4:	20000000 	.word	0x20000000
 80055f8:	431bde83 	.word	0x431bde83

080055fc <LCD16X2_Set_Cursor>:

void LCD16X2_Set_Cursor(uint8_t LCD16X2_Index, unsigned char r, unsigned char c)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	71fb      	strb	r3, [r7, #7]
 8005606:	460b      	mov	r3, r1
 8005608:	71bb      	strb	r3, [r7, #6]
 800560a:	4613      	mov	r3, r2
 800560c:	717b      	strb	r3, [r7, #5]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 800560e:	79bb      	ldrb	r3, [r7, #6]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d115      	bne.n	8005640 <LCD16X2_Set_Cursor+0x44>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 8005614:	797b      	ldrb	r3, [r7, #5]
 8005616:	337f      	adds	r3, #127	@ 0x7f
 8005618:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 800561a:	7bfb      	ldrb	r3, [r7, #15]
 800561c:	091b      	lsrs	r3, r3, #4
 800561e:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 8005620:	7bfb      	ldrb	r3, [r7, #15]
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	737b      	strb	r3, [r7, #13]
      LCD16X2_CMD(LCD16X2_Index, High4);
 8005628:	7bba      	ldrb	r2, [r7, #14]
 800562a:	79fb      	ldrb	r3, [r7, #7]
 800562c:	4611      	mov	r1, r2
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff fee4 	bl	80053fc <LCD16X2_CMD>
      LCD16X2_CMD(LCD16X2_Index, Low4);
 8005634:	7b7a      	ldrb	r2, [r7, #13]
 8005636:	79fb      	ldrb	r3, [r7, #7]
 8005638:	4611      	mov	r1, r2
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff fede 	bl	80053fc <LCD16X2_CMD>
    }
    if(r == 2)
 8005640:	79bb      	ldrb	r3, [r7, #6]
 8005642:	2b02      	cmp	r3, #2
 8005644:	d115      	bne.n	8005672 <LCD16X2_Set_Cursor+0x76>
    {
      Temp  = 0xC0 + c - 1;
 8005646:	797b      	ldrb	r3, [r7, #5]
 8005648:	3b41      	subs	r3, #65	@ 0x41
 800564a:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 800564c:	7bfb      	ldrb	r3, [r7, #15]
 800564e:	091b      	lsrs	r3, r3, #4
 8005650:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 8005652:	7bfb      	ldrb	r3, [r7, #15]
 8005654:	f003 030f 	and.w	r3, r3, #15
 8005658:	737b      	strb	r3, [r7, #13]
      LCD16X2_CMD(LCD16X2_Index, High4);
 800565a:	7bba      	ldrb	r2, [r7, #14]
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	4611      	mov	r1, r2
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff fecb 	bl	80053fc <LCD16X2_CMD>
      LCD16X2_CMD(LCD16X2_Index, Low4);
 8005666:	7b7a      	ldrb	r2, [r7, #13]
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	4611      	mov	r1, r2
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff fec5 	bl	80053fc <LCD16X2_CMD>
    }
}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <LCD16X2_Init>:

void LCD16X2_Init(uint8_t LCD16X2_Index)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08e      	sub	sp, #56	@ 0x38
 8005680:	af00      	add	r7, sp, #0
 8005682:	4603      	mov	r3, r0
 8005684:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 8005686:	bf00      	nop
 8005688:	f7fc fd50 	bl	800212c <HAL_GetTick>
 800568c:	4603      	mov	r3, r0
 800568e:	2b31      	cmp	r3, #49	@ 0x31
 8005690:	d9fa      	bls.n	8005688 <LCD16X2_Init+0xc>
	// The Init. Procedure As Described In The Datasheet
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 0);
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	4a7c      	ldr	r2, [pc, #496]	@ (8005888 <LCD16X2_Init+0x20c>)
 8005696:	2134      	movs	r1, #52	@ 0x34
 8005698:	fb01 f303 	mul.w	r3, r1, r3
 800569c:	4413      	add	r3, r2
 800569e:	332c      	adds	r3, #44	@ 0x2c
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	79fb      	ldrb	r3, [r7, #7]
 80056a4:	4a78      	ldr	r2, [pc, #480]	@ (8005888 <LCD16X2_Init+0x20c>)
 80056a6:	2134      	movs	r1, #52	@ 0x34
 80056a8:	fb01 f303 	mul.w	r3, r1, r3
 80056ac:	4413      	add	r3, r2
 80056ae:	3330      	adds	r3, #48	@ 0x30
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	2200      	movs	r2, #0
 80056b4:	4619      	mov	r1, r3
 80056b6:	f7fd fd9c 	bl	80031f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 80056ba:	79fb      	ldrb	r3, [r7, #7]
 80056bc:	4a72      	ldr	r2, [pc, #456]	@ (8005888 <LCD16X2_Init+0x20c>)
 80056be:	2134      	movs	r1, #52	@ 0x34
 80056c0:	fb01 f303 	mul.w	r3, r1, r3
 80056c4:	4413      	add	r3, r2
 80056c6:	3324      	adds	r3, #36	@ 0x24
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	79fb      	ldrb	r3, [r7, #7]
 80056cc:	4a6e      	ldr	r2, [pc, #440]	@ (8005888 <LCD16X2_Init+0x20c>)
 80056ce:	2134      	movs	r1, #52	@ 0x34
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	4413      	add	r3, r2
 80056d6:	3328      	adds	r3, #40	@ 0x28
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	2200      	movs	r2, #0
 80056dc:	4619      	mov	r1, r3
 80056de:	f7fd fd88 	bl	80031f2 <HAL_GPIO_WritePin>
    // Init in 4-Bit Data Mode
	LCD16X2_DATA(LCD16X2_Index, 0x00);
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	2100      	movs	r1, #0
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff fdc2 	bl	8005270 <LCD16X2_DATA>
    DELAY_MS(150);
 80056ec:	2300      	movs	r3, #0
 80056ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80056f0:	e01f      	b.n	8005732 <LCD16X2_Init+0xb6>
 80056f2:	4b66      	ldr	r3, [pc, #408]	@ (800588c <LCD16X2_Init+0x210>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	613b      	str	r3, [r7, #16]
 80056f8:	4b65      	ldr	r3, [pc, #404]	@ (8005890 <LCD16X2_Init+0x214>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a65      	ldr	r2, [pc, #404]	@ (8005894 <LCD16X2_Init+0x218>)
 80056fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005702:	0c9b      	lsrs	r3, r3, #18
 8005704:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005708:	fb03 f202 	mul.w	r2, r3, r2
 800570c:	4b60      	ldr	r3, [pc, #384]	@ (8005890 <LCD16X2_Init+0x214>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4960      	ldr	r1, [pc, #384]	@ (8005894 <LCD16X2_Init+0x218>)
 8005712:	fba1 1303 	umull	r1, r3, r1, r3
 8005716:	0c9b      	lsrs	r3, r3, #18
 8005718:	085b      	lsrs	r3, r3, #1
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	4b5b      	ldr	r3, [pc, #364]	@ (800588c <LCD16X2_Init+0x210>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	429a      	cmp	r2, r3
 800572a:	d8f8      	bhi.n	800571e <LCD16X2_Init+0xa2>
 800572c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572e:	3301      	adds	r3, #1
 8005730:	637b      	str	r3, [r7, #52]	@ 0x34
 8005732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005734:	2b95      	cmp	r3, #149	@ 0x95
 8005736:	d9dc      	bls.n	80056f2 <LCD16X2_Init+0x76>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 8005738:	79fb      	ldrb	r3, [r7, #7]
 800573a:	2103      	movs	r1, #3
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff fe5d 	bl	80053fc <LCD16X2_CMD>
    DELAY_MS(5);
 8005742:	2300      	movs	r3, #0
 8005744:	633b      	str	r3, [r7, #48]	@ 0x30
 8005746:	e01f      	b.n	8005788 <LCD16X2_Init+0x10c>
 8005748:	4b50      	ldr	r3, [pc, #320]	@ (800588c <LCD16X2_Init+0x210>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	61bb      	str	r3, [r7, #24]
 800574e:	4b50      	ldr	r3, [pc, #320]	@ (8005890 <LCD16X2_Init+0x214>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a50      	ldr	r2, [pc, #320]	@ (8005894 <LCD16X2_Init+0x218>)
 8005754:	fba2 2303 	umull	r2, r3, r2, r3
 8005758:	0c9b      	lsrs	r3, r3, #18
 800575a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800575e:	fb03 f202 	mul.w	r2, r3, r2
 8005762:	4b4b      	ldr	r3, [pc, #300]	@ (8005890 <LCD16X2_Init+0x214>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	494b      	ldr	r1, [pc, #300]	@ (8005894 <LCD16X2_Init+0x218>)
 8005768:	fba1 1303 	umull	r1, r3, r1, r3
 800576c:	0c9b      	lsrs	r3, r3, #18
 800576e:	085b      	lsrs	r3, r3, #1
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	4b45      	ldr	r3, [pc, #276]	@ (800588c <LCD16X2_Init+0x210>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	429a      	cmp	r2, r3
 8005780:	d8f8      	bhi.n	8005774 <LCD16X2_Init+0xf8>
 8005782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005784:	3301      	adds	r3, #1
 8005786:	633b      	str	r3, [r7, #48]	@ 0x30
 8005788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578a:	2b04      	cmp	r3, #4
 800578c:	d9dc      	bls.n	8005748 <LCD16X2_Init+0xcc>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 800578e:	79fb      	ldrb	r3, [r7, #7]
 8005790:	2103      	movs	r1, #3
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff fe32 	bl	80053fc <LCD16X2_CMD>
    DELAY_MS(5);
 8005798:	2300      	movs	r3, #0
 800579a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800579c:	e01f      	b.n	80057de <LCD16X2_Init+0x162>
 800579e:	4b3b      	ldr	r3, [pc, #236]	@ (800588c <LCD16X2_Init+0x210>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	623b      	str	r3, [r7, #32]
 80057a4:	4b3a      	ldr	r3, [pc, #232]	@ (8005890 <LCD16X2_Init+0x214>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a3a      	ldr	r2, [pc, #232]	@ (8005894 <LCD16X2_Init+0x218>)
 80057aa:	fba2 2303 	umull	r2, r3, r2, r3
 80057ae:	0c9b      	lsrs	r3, r3, #18
 80057b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80057b4:	fb03 f202 	mul.w	r2, r3, r2
 80057b8:	4b35      	ldr	r3, [pc, #212]	@ (8005890 <LCD16X2_Init+0x214>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4935      	ldr	r1, [pc, #212]	@ (8005894 <LCD16X2_Init+0x218>)
 80057be:	fba1 1303 	umull	r1, r3, r1, r3
 80057c2:	0c9b      	lsrs	r3, r3, #18
 80057c4:	085b      	lsrs	r3, r3, #1
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	61fb      	str	r3, [r7, #28]
 80057ca:	4b30      	ldr	r3, [pc, #192]	@ (800588c <LCD16X2_Init+0x210>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	6a3a      	ldr	r2, [r7, #32]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	69fa      	ldr	r2, [r7, #28]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d8f8      	bhi.n	80057ca <LCD16X2_Init+0x14e>
 80057d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057da:	3301      	adds	r3, #1
 80057dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e0:	2b04      	cmp	r3, #4
 80057e2:	d9dc      	bls.n	800579e <LCD16X2_Init+0x122>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 80057e4:	79fb      	ldrb	r3, [r7, #7]
 80057e6:	2103      	movs	r1, #3
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff fe07 	bl	80053fc <LCD16X2_CMD>
    DELAY_US(150);
 80057ee:	4b27      	ldr	r3, [pc, #156]	@ (800588c <LCD16X2_Init+0x210>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057f4:	4b26      	ldr	r3, [pc, #152]	@ (8005890 <LCD16X2_Init+0x214>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a26      	ldr	r2, [pc, #152]	@ (8005894 <LCD16X2_Init+0x218>)
 80057fa:	fba2 2303 	umull	r2, r3, r2, r3
 80057fe:	0c9b      	lsrs	r3, r3, #18
 8005800:	2296      	movs	r2, #150	@ 0x96
 8005802:	fb03 f202 	mul.w	r2, r3, r2
 8005806:	4b22      	ldr	r3, [pc, #136]	@ (8005890 <LCD16X2_Init+0x214>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4922      	ldr	r1, [pc, #136]	@ (8005894 <LCD16X2_Init+0x218>)
 800580c:	fba1 1303 	umull	r1, r3, r1, r3
 8005810:	0c9b      	lsrs	r3, r3, #18
 8005812:	085b      	lsrs	r3, r3, #1
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	627b      	str	r3, [r7, #36]	@ 0x24
 8005818:	4b1c      	ldr	r3, [pc, #112]	@ (800588c <LCD16X2_Init+0x210>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005822:	429a      	cmp	r2, r3
 8005824:	d8f8      	bhi.n	8005818 <LCD16X2_Init+0x19c>
    // The Rest of The Init Sequence As Defined in The Hitachi HD44780 Datasheet
    LCD16X2_CMD(LCD16X2_Index, 0x02);
 8005826:	79fb      	ldrb	r3, [r7, #7]
 8005828:	2102      	movs	r1, #2
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff fde6 	bl	80053fc <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x02);
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	2102      	movs	r1, #2
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff fde1 	bl	80053fc <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x08);
 800583a:	79fb      	ldrb	r3, [r7, #7]
 800583c:	2108      	movs	r1, #8
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff fddc 	bl	80053fc <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	2100      	movs	r1, #0
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff fdd7 	bl	80053fc <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x0C);
 800584e:	79fb      	ldrb	r3, [r7, #7]
 8005850:	210c      	movs	r1, #12
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff fdd2 	bl	80053fc <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	2100      	movs	r1, #0
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff fdcd 	bl	80053fc <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x06);
 8005862:	79fb      	ldrb	r3, [r7, #7]
 8005864:	2106      	movs	r1, #6
 8005866:	4618      	mov	r0, r3
 8005868:	f7ff fdc8 	bl	80053fc <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 800586c:	79fb      	ldrb	r3, [r7, #7]
 800586e:	2100      	movs	r1, #0
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff fdc3 	bl	80053fc <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x01);
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	2101      	movs	r1, #1
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff fdbe 	bl	80053fc <LCD16X2_CMD>
}
 8005880:	bf00      	nop
 8005882:	3738      	adds	r7, #56	@ 0x38
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	080095a0 	.word	0x080095a0
 800588c:	e000e010 	.word	0xe000e010
 8005890:	20000000 	.word	0x20000000
 8005894:	431bde83 	.word	0x431bde83

08005898 <LCD16X2_Write_Char>:

void LCD16X2_Write_Char(uint8_t LCD16X2_Index, char Data)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b090      	sub	sp, #64	@ 0x40
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	460a      	mov	r2, r1
 80058a2:	71fb      	strb	r3, [r7, #7]
 80058a4:	4613      	mov	r3, r2
 80058a6:	71bb      	strb	r3, [r7, #6]
   char Low4,High4;
   Low4  = Data & 0x0F;
 80058a8:	79bb      	ldrb	r3, [r7, #6]
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
   High4 = Data & 0xF0;
 80058b2:	79bb      	ldrb	r3, [r7, #6]
 80058b4:	f023 030f 	bic.w	r3, r3, #15
 80058b8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 1);
 80058bc:	79fb      	ldrb	r3, [r7, #7]
 80058be:	4aa4      	ldr	r2, [pc, #656]	@ (8005b50 <LCD16X2_Write_Char+0x2b8>)
 80058c0:	2134      	movs	r1, #52	@ 0x34
 80058c2:	fb01 f303 	mul.w	r3, r1, r3
 80058c6:	4413      	add	r3, r2
 80058c8:	332c      	adds	r3, #44	@ 0x2c
 80058ca:	6818      	ldr	r0, [r3, #0]
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	4aa0      	ldr	r2, [pc, #640]	@ (8005b50 <LCD16X2_Write_Char+0x2b8>)
 80058d0:	2134      	movs	r1, #52	@ 0x34
 80058d2:	fb01 f303 	mul.w	r3, r1, r3
 80058d6:	4413      	add	r3, r2
 80058d8:	3330      	adds	r3, #48	@ 0x30
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	2201      	movs	r2, #1
 80058de:	4619      	mov	r1, r3
 80058e0:	f7fd fc87 	bl	80031f2 <HAL_GPIO_WritePin>

   LCD16X2_DATA(LCD16X2_Index, (High4>>4));
 80058e4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80058e8:	091b      	lsrs	r3, r3, #4
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	4611      	mov	r1, r2
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff fcbd 	bl	8005270 <LCD16X2_DATA>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	4a95      	ldr	r2, [pc, #596]	@ (8005b50 <LCD16X2_Write_Char+0x2b8>)
 80058fa:	2134      	movs	r1, #52	@ 0x34
 80058fc:	fb01 f303 	mul.w	r3, r1, r3
 8005900:	4413      	add	r3, r2
 8005902:	3324      	adds	r3, #36	@ 0x24
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	79fb      	ldrb	r3, [r7, #7]
 8005908:	4a91      	ldr	r2, [pc, #580]	@ (8005b50 <LCD16X2_Write_Char+0x2b8>)
 800590a:	2134      	movs	r1, #52	@ 0x34
 800590c:	fb01 f303 	mul.w	r3, r1, r3
 8005910:	4413      	add	r3, r2
 8005912:	3328      	adds	r3, #40	@ 0x28
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	2200      	movs	r2, #0
 8005918:	4619      	mov	r1, r3
 800591a:	f7fd fc6a 	bl	80031f2 <HAL_GPIO_WritePin>
   DELAY_US(5);
 800591e:	4b8d      	ldr	r3, [pc, #564]	@ (8005b54 <LCD16X2_Write_Char+0x2bc>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005924:	4b8c      	ldr	r3, [pc, #560]	@ (8005b58 <LCD16X2_Write_Char+0x2c0>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a8c      	ldr	r2, [pc, #560]	@ (8005b5c <LCD16X2_Write_Char+0x2c4>)
 800592a:	fba2 2303 	umull	r2, r3, r2, r3
 800592e:	0c9a      	lsrs	r2, r3, #18
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	441a      	add	r2, r3
 8005936:	4b88      	ldr	r3, [pc, #544]	@ (8005b58 <LCD16X2_Write_Char+0x2c0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4988      	ldr	r1, [pc, #544]	@ (8005b5c <LCD16X2_Write_Char+0x2c4>)
 800593c:	fba1 1303 	umull	r1, r3, r1, r3
 8005940:	0c9b      	lsrs	r3, r3, #18
 8005942:	085b      	lsrs	r3, r3, #1
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	637b      	str	r3, [r7, #52]	@ 0x34
 8005948:	4b82      	ldr	r3, [pc, #520]	@ (8005b54 <LCD16X2_Write_Char+0x2bc>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005952:	429a      	cmp	r2, r3
 8005954:	d8f8      	bhi.n	8005948 <LCD16X2_Write_Char+0xb0>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 8005956:	79fb      	ldrb	r3, [r7, #7]
 8005958:	4a7d      	ldr	r2, [pc, #500]	@ (8005b50 <LCD16X2_Write_Char+0x2b8>)
 800595a:	2134      	movs	r1, #52	@ 0x34
 800595c:	fb01 f303 	mul.w	r3, r1, r3
 8005960:	4413      	add	r3, r2
 8005962:	3324      	adds	r3, #36	@ 0x24
 8005964:	6818      	ldr	r0, [r3, #0]
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	4a79      	ldr	r2, [pc, #484]	@ (8005b50 <LCD16X2_Write_Char+0x2b8>)
 800596a:	2134      	movs	r1, #52	@ 0x34
 800596c:	fb01 f303 	mul.w	r3, r1, r3
 8005970:	4413      	add	r3, r2
 8005972:	3328      	adds	r3, #40	@ 0x28
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	2201      	movs	r2, #1
 8005978:	4619      	mov	r1, r3
 800597a:	f7fd fc3a 	bl	80031f2 <HAL_GPIO_WritePin>
   DELAY_US(5);
 800597e:	4b75      	ldr	r3, [pc, #468]	@ (8005b54 <LCD16X2_Write_Char+0x2bc>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	633b      	str	r3, [r7, #48]	@ 0x30
 8005984:	4b74      	ldr	r3, [pc, #464]	@ (8005b58 <LCD16X2_Write_Char+0x2c0>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a74      	ldr	r2, [pc, #464]	@ (8005b5c <LCD16X2_Write_Char+0x2c4>)
 800598a:	fba2 2303 	umull	r2, r3, r2, r3
 800598e:	0c9a      	lsrs	r2, r3, #18
 8005990:	4613      	mov	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	441a      	add	r2, r3
 8005996:	4b70      	ldr	r3, [pc, #448]	@ (8005b58 <LCD16X2_Write_Char+0x2c0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4970      	ldr	r1, [pc, #448]	@ (8005b5c <LCD16X2_Write_Char+0x2c4>)
 800599c:	fba1 1303 	umull	r1, r3, r1, r3
 80059a0:	0c9b      	lsrs	r3, r3, #18
 80059a2:	085b      	lsrs	r3, r3, #1
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005b54 <LCD16X2_Write_Char+0x2bc>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d8f8      	bhi.n	80059a8 <LCD16X2_Write_Char+0x110>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	4a65      	ldr	r2, [pc, #404]	@ (8005b50 <LCD16X2_Write_Char+0x2b8>)
 80059ba:	2134      	movs	r1, #52	@ 0x34
 80059bc:	fb01 f303 	mul.w	r3, r1, r3
 80059c0:	4413      	add	r3, r2
 80059c2:	3324      	adds	r3, #36	@ 0x24
 80059c4:	6818      	ldr	r0, [r3, #0]
 80059c6:	79fb      	ldrb	r3, [r7, #7]
 80059c8:	4a61      	ldr	r2, [pc, #388]	@ (8005b50 <LCD16X2_Write_Char+0x2b8>)
 80059ca:	2134      	movs	r1, #52	@ 0x34
 80059cc:	fb01 f303 	mul.w	r3, r1, r3
 80059d0:	4413      	add	r3, r2
 80059d2:	3328      	adds	r3, #40	@ 0x28
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	2200      	movs	r2, #0
 80059d8:	4619      	mov	r1, r3
 80059da:	f7fd fc0a 	bl	80031f2 <HAL_GPIO_WritePin>
   DELAY_US(100);
 80059de:	4b5d      	ldr	r3, [pc, #372]	@ (8005b54 <LCD16X2_Write_Char+0x2bc>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059e4:	4b5c      	ldr	r3, [pc, #368]	@ (8005b58 <LCD16X2_Write_Char+0x2c0>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a5c      	ldr	r2, [pc, #368]	@ (8005b5c <LCD16X2_Write_Char+0x2c4>)
 80059ea:	fba2 2303 	umull	r2, r3, r2, r3
 80059ee:	0c9b      	lsrs	r3, r3, #18
 80059f0:	2264      	movs	r2, #100	@ 0x64
 80059f2:	fb03 f202 	mul.w	r2, r3, r2
 80059f6:	4b58      	ldr	r3, [pc, #352]	@ (8005b58 <LCD16X2_Write_Char+0x2c0>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4958      	ldr	r1, [pc, #352]	@ (8005b5c <LCD16X2_Write_Char+0x2c4>)
 80059fc:	fba1 1303 	umull	r1, r3, r1, r3
 8005a00:	0c9b      	lsrs	r3, r3, #18
 8005a02:	085b      	lsrs	r3, r3, #1
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a08:	4b52      	ldr	r3, [pc, #328]	@ (8005b54 <LCD16X2_Write_Char+0x2bc>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d8f8      	bhi.n	8005a08 <LCD16X2_Write_Char+0x170>

   LCD16X2_DATA(LCD16X2_Index, Low4);
 8005a16:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8005a1a:	79fb      	ldrb	r3, [r7, #7]
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff fc26 	bl	8005270 <LCD16X2_DATA>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8005a24:	79fb      	ldrb	r3, [r7, #7]
 8005a26:	4a4a      	ldr	r2, [pc, #296]	@ (8005b50 <LCD16X2_Write_Char+0x2b8>)
 8005a28:	2134      	movs	r1, #52	@ 0x34
 8005a2a:	fb01 f303 	mul.w	r3, r1, r3
 8005a2e:	4413      	add	r3, r2
 8005a30:	3324      	adds	r3, #36	@ 0x24
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	79fb      	ldrb	r3, [r7, #7]
 8005a36:	4a46      	ldr	r2, [pc, #280]	@ (8005b50 <LCD16X2_Write_Char+0x2b8>)
 8005a38:	2134      	movs	r1, #52	@ 0x34
 8005a3a:	fb01 f303 	mul.w	r3, r1, r3
 8005a3e:	4413      	add	r3, r2
 8005a40:	3328      	adds	r3, #40	@ 0x28
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	2200      	movs	r2, #0
 8005a46:	4619      	mov	r1, r3
 8005a48:	f7fd fbd3 	bl	80031f2 <HAL_GPIO_WritePin>
   DELAY_US(5);
 8005a4c:	4b41      	ldr	r3, [pc, #260]	@ (8005b54 <LCD16X2_Write_Char+0x2bc>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	623b      	str	r3, [r7, #32]
 8005a52:	4b41      	ldr	r3, [pc, #260]	@ (8005b58 <LCD16X2_Write_Char+0x2c0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a41      	ldr	r2, [pc, #260]	@ (8005b5c <LCD16X2_Write_Char+0x2c4>)
 8005a58:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5c:	0c9a      	lsrs	r2, r3, #18
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	441a      	add	r2, r3
 8005a64:	4b3c      	ldr	r3, [pc, #240]	@ (8005b58 <LCD16X2_Write_Char+0x2c0>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	493c      	ldr	r1, [pc, #240]	@ (8005b5c <LCD16X2_Write_Char+0x2c4>)
 8005a6a:	fba1 1303 	umull	r1, r3, r1, r3
 8005a6e:	0c9b      	lsrs	r3, r3, #18
 8005a70:	085b      	lsrs	r3, r3, #1
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	61fb      	str	r3, [r7, #28]
 8005a76:	4b37      	ldr	r3, [pc, #220]	@ (8005b54 <LCD16X2_Write_Char+0x2bc>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	6a3a      	ldr	r2, [r7, #32]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d8f8      	bhi.n	8005a76 <LCD16X2_Write_Char+0x1de>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 8005a84:	79fb      	ldrb	r3, [r7, #7]
 8005a86:	4a32      	ldr	r2, [pc, #200]	@ (8005b50 <LCD16X2_Write_Char+0x2b8>)
 8005a88:	2134      	movs	r1, #52	@ 0x34
 8005a8a:	fb01 f303 	mul.w	r3, r1, r3
 8005a8e:	4413      	add	r3, r2
 8005a90:	3324      	adds	r3, #36	@ 0x24
 8005a92:	6818      	ldr	r0, [r3, #0]
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	4a2e      	ldr	r2, [pc, #184]	@ (8005b50 <LCD16X2_Write_Char+0x2b8>)
 8005a98:	2134      	movs	r1, #52	@ 0x34
 8005a9a:	fb01 f303 	mul.w	r3, r1, r3
 8005a9e:	4413      	add	r3, r2
 8005aa0:	3328      	adds	r3, #40	@ 0x28
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	f7fd fba3 	bl	80031f2 <HAL_GPIO_WritePin>
   DELAY_US(5);
 8005aac:	4b29      	ldr	r3, [pc, #164]	@ (8005b54 <LCD16X2_Write_Char+0x2bc>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	61bb      	str	r3, [r7, #24]
 8005ab2:	4b29      	ldr	r3, [pc, #164]	@ (8005b58 <LCD16X2_Write_Char+0x2c0>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a29      	ldr	r2, [pc, #164]	@ (8005b5c <LCD16X2_Write_Char+0x2c4>)
 8005ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8005abc:	0c9a      	lsrs	r2, r3, #18
 8005abe:	4613      	mov	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	441a      	add	r2, r3
 8005ac4:	4b24      	ldr	r3, [pc, #144]	@ (8005b58 <LCD16X2_Write_Char+0x2c0>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4924      	ldr	r1, [pc, #144]	@ (8005b5c <LCD16X2_Write_Char+0x2c4>)
 8005aca:	fba1 1303 	umull	r1, r3, r1, r3
 8005ace:	0c9b      	lsrs	r3, r3, #18
 8005ad0:	085b      	lsrs	r3, r3, #1
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8005b54 <LCD16X2_Write_Char+0x2bc>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d8f8      	bhi.n	8005ad6 <LCD16X2_Write_Char+0x23e>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8005ae4:	79fb      	ldrb	r3, [r7, #7]
 8005ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8005b50 <LCD16X2_Write_Char+0x2b8>)
 8005ae8:	2134      	movs	r1, #52	@ 0x34
 8005aea:	fb01 f303 	mul.w	r3, r1, r3
 8005aee:	4413      	add	r3, r2
 8005af0:	3324      	adds	r3, #36	@ 0x24
 8005af2:	6818      	ldr	r0, [r3, #0]
 8005af4:	79fb      	ldrb	r3, [r7, #7]
 8005af6:	4a16      	ldr	r2, [pc, #88]	@ (8005b50 <LCD16X2_Write_Char+0x2b8>)
 8005af8:	2134      	movs	r1, #52	@ 0x34
 8005afa:	fb01 f303 	mul.w	r3, r1, r3
 8005afe:	4413      	add	r3, r2
 8005b00:	3328      	adds	r3, #40	@ 0x28
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	2200      	movs	r2, #0
 8005b06:	4619      	mov	r1, r3
 8005b08:	f7fd fb73 	bl	80031f2 <HAL_GPIO_WritePin>
   DELAY_US(100);
 8005b0c:	4b11      	ldr	r3, [pc, #68]	@ (8005b54 <LCD16X2_Write_Char+0x2bc>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	4b11      	ldr	r3, [pc, #68]	@ (8005b58 <LCD16X2_Write_Char+0x2c0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a11      	ldr	r2, [pc, #68]	@ (8005b5c <LCD16X2_Write_Char+0x2c4>)
 8005b18:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1c:	0c9b      	lsrs	r3, r3, #18
 8005b1e:	2264      	movs	r2, #100	@ 0x64
 8005b20:	fb03 f202 	mul.w	r2, r3, r2
 8005b24:	4b0c      	ldr	r3, [pc, #48]	@ (8005b58 <LCD16X2_Write_Char+0x2c0>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	490c      	ldr	r1, [pc, #48]	@ (8005b5c <LCD16X2_Write_Char+0x2c4>)
 8005b2a:	fba1 1303 	umull	r1, r3, r1, r3
 8005b2e:	0c9b      	lsrs	r3, r3, #18
 8005b30:	085b      	lsrs	r3, r3, #1
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	4b07      	ldr	r3, [pc, #28]	@ (8005b54 <LCD16X2_Write_Char+0x2bc>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d8f8      	bhi.n	8005b36 <LCD16X2_Write_Char+0x29e>
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop
 8005b48:	3740      	adds	r7, #64	@ 0x40
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	080095a0 	.word	0x080095a0
 8005b54:	e000e010 	.word	0xe000e010
 8005b58:	20000000 	.word	0x20000000
 8005b5c:	431bde83 	.word	0x431bde83

08005b60 <LCD16X2_Write_String>:

void LCD16X2_Write_String(uint8_t LCD16X2_Index, char *str)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	4603      	mov	r3, r0
 8005b68:	6039      	str	r1, [r7, #0]
 8005b6a:	71fb      	strb	r3, [r7, #7]
    int i;
    for(i=0; str[i]!='\0'; i++)
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	e00b      	b.n	8005b8a <LCD16X2_Write_String+0x2a>
    {
    	LCD16X2_Write_Char(LCD16X2_Index, str[i]);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	4413      	add	r3, r2
 8005b78:	781a      	ldrb	r2, [r3, #0]
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7ff fe8a 	bl	8005898 <LCD16X2_Write_Char>
    for(i=0; str[i]!='\0'; i++)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3301      	adds	r3, #1
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	4413      	add	r3, r2
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1ed      	bne.n	8005b72 <LCD16X2_Write_String+0x12>
    }
}
 8005b96:	bf00      	nop
 8005b98:	bf00      	nop
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <DWT_Delay_ms>:
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
}

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8005ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8005be4 <DWT_Delay_ms+0x44>)
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8005bae:	f7fd fef9 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	4a0c      	ldr	r2, [pc, #48]	@ (8005be8 <DWT_Delay_ms+0x48>)
 8005bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bba:	099b      	lsrs	r3, r3, #6
 8005bbc:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	fb02 f303 	mul.w	r3, r2, r3
 8005bc6:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8005bc8:	bf00      	nop
 8005bca:	4b06      	ldr	r3, [pc, #24]	@ (8005be4 <DWT_Delay_ms+0x44>)
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	1ad2      	subs	r2, r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d3f8      	bcc.n	8005bca <DWT_Delay_ms+0x2a>
}
 8005bd8:	bf00      	nop
 8005bda:	bf00      	nop
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	e0001000 	.word	0xe0001000
 8005be8:	10624dd3 	.word	0x10624dd3

08005bec <STEPPERS_Init>:
};

//----------------------------[ Functions' Definitions ]---------------------------

void STEPPERS_Init(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bf2:	f107 030c 	add.w	r3, r7, #12
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	605a      	str	r2, [r3, #4]
 8005bfc:	609a      	str	r2, [r3, #8]
 8005bfe:	60da      	str	r2, [r3, #12]
    uint8_t i = 0, j = 0;
 8005c00:	2300      	movs	r3, #0
 8005c02:	77fb      	strb	r3, [r7, #31]
 8005c04:	2300      	movs	r3, #0
 8005c06:	77bb      	strb	r3, [r7, #30]
DWT_Delay_Init();
 8005c08:	f000 fc8e 	bl	8006528 <DWT_Delay_Init>
   

    /*--------[ Configure The Stepper IN(1-4) GPIO Pins ]-------*/
    for(i = 0; i<STEPPER_UNITS; i++)
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	77fb      	strb	r3, [r7, #31]
 8005c10:	e0e7      	b.n	8005de2 <STEPPERS_Init+0x1f6>
    {
    	for(j=0; j<4; j++)
 8005c12:	2300      	movs	r3, #0
 8005c14:	77bb      	strb	r3, [r7, #30]
 8005c16:	e06d      	b.n	8005cf4 <STEPPERS_Init+0x108>
    	{
    		if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOA)
 8005c18:	7ffa      	ldrb	r2, [r7, #31]
 8005c1a:	7fb9      	ldrb	r1, [r7, #30]
 8005c1c:	4875      	ldr	r0, [pc, #468]	@ (8005df4 <STEPPERS_Init+0x208>)
 8005c1e:	4613      	mov	r3, r2
 8005c20:	00db      	lsls	r3, r3, #3
 8005c22:	1a9b      	subs	r3, r3, r2
 8005c24:	440b      	add	r3, r1
 8005c26:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005c2a:	4a73      	ldr	r2, [pc, #460]	@ (8005df8 <STEPPERS_Init+0x20c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d10c      	bne.n	8005c4a <STEPPERS_Init+0x5e>
    		{
    		    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c30:	4b72      	ldr	r3, [pc, #456]	@ (8005dfc <STEPPERS_Init+0x210>)
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	4a71      	ldr	r2, [pc, #452]	@ (8005dfc <STEPPERS_Init+0x210>)
 8005c36:	f043 0304 	orr.w	r3, r3, #4
 8005c3a:	6193      	str	r3, [r2, #24]
 8005c3c:	4b6f      	ldr	r3, [pc, #444]	@ (8005dfc <STEPPERS_Init+0x210>)
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	60bb      	str	r3, [r7, #8]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	e030      	b.n	8005cac <STEPPERS_Init+0xc0>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOB)
 8005c4a:	7ffa      	ldrb	r2, [r7, #31]
 8005c4c:	7fb9      	ldrb	r1, [r7, #30]
 8005c4e:	4869      	ldr	r0, [pc, #420]	@ (8005df4 <STEPPERS_Init+0x208>)
 8005c50:	4613      	mov	r3, r2
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	1a9b      	subs	r3, r3, r2
 8005c56:	440b      	add	r3, r1
 8005c58:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005c5c:	4a68      	ldr	r2, [pc, #416]	@ (8005e00 <STEPPERS_Init+0x214>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d10c      	bne.n	8005c7c <STEPPERS_Init+0x90>
    		{
    		    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c62:	4b66      	ldr	r3, [pc, #408]	@ (8005dfc <STEPPERS_Init+0x210>)
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	4a65      	ldr	r2, [pc, #404]	@ (8005dfc <STEPPERS_Init+0x210>)
 8005c68:	f043 0308 	orr.w	r3, r3, #8
 8005c6c:	6193      	str	r3, [r2, #24]
 8005c6e:	4b63      	ldr	r3, [pc, #396]	@ (8005dfc <STEPPERS_Init+0x210>)
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	f003 0308 	and.w	r3, r3, #8
 8005c76:	607b      	str	r3, [r7, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	e017      	b.n	8005cac <STEPPERS_Init+0xc0>
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOC)
 8005c7c:	7ffa      	ldrb	r2, [r7, #31]
 8005c7e:	7fb9      	ldrb	r1, [r7, #30]
 8005c80:	485c      	ldr	r0, [pc, #368]	@ (8005df4 <STEPPERS_Init+0x208>)
 8005c82:	4613      	mov	r3, r2
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	1a9b      	subs	r3, r3, r2
 8005c88:	440b      	add	r3, r1
 8005c8a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005c8e:	4a5d      	ldr	r2, [pc, #372]	@ (8005e04 <STEPPERS_Init+0x218>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d10b      	bne.n	8005cac <STEPPERS_Init+0xc0>
    		{
    		    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c94:	4b59      	ldr	r3, [pc, #356]	@ (8005dfc <STEPPERS_Init+0x210>)
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	4a58      	ldr	r2, [pc, #352]	@ (8005dfc <STEPPERS_Init+0x210>)
 8005c9a:	f043 0310 	orr.w	r3, r3, #16
 8005c9e:	6193      	str	r3, [r2, #24]
 8005ca0:	4b56      	ldr	r3, [pc, #344]	@ (8005dfc <STEPPERS_Init+0x210>)
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	f003 0310 	and.w	r3, r3, #16
 8005ca8:	603b      	str	r3, [r7, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
    		}
    		else if(STEPPER_CfgParam[i].IN_GPIO[j] == GPIOE)
    		{
    		    __HAL_RCC_GPIOE_CLK_ENABLE();
    		}*/
    		GPIO_InitStruct.Pin = STEPPER_CfgParam[i].IN_PIN[j];
 8005cac:	7ffa      	ldrb	r2, [r7, #31]
 8005cae:	7fb9      	ldrb	r1, [r7, #30]
 8005cb0:	4850      	ldr	r0, [pc, #320]	@ (8005df4 <STEPPERS_Init+0x208>)
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	1a9b      	subs	r3, r3, r2
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	440b      	add	r3, r1
 8005cbc:	3308      	adds	r3, #8
 8005cbe:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8005cc2:	60fb      	str	r3, [r7, #12]
    		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	613b      	str	r3, [r7, #16]
    		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]
    		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ccc:	2302      	movs	r3, #2
 8005cce:	61bb      	str	r3, [r7, #24]
    		HAL_GPIO_Init(STEPPER_CfgParam[i].IN_GPIO[j], &GPIO_InitStruct);
 8005cd0:	7ffa      	ldrb	r2, [r7, #31]
 8005cd2:	7fb9      	ldrb	r1, [r7, #30]
 8005cd4:	4847      	ldr	r0, [pc, #284]	@ (8005df4 <STEPPERS_Init+0x208>)
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	1a9b      	subs	r3, r3, r2
 8005cdc:	440b      	add	r3, r1
 8005cde:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005ce2:	f107 020c 	add.w	r2, r7, #12
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fd f8e7 	bl	8002ebc <HAL_GPIO_Init>
    	for(j=0; j<4; j++)
 8005cee:	7fbb      	ldrb	r3, [r7, #30]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	77bb      	strb	r3, [r7, #30]
 8005cf4:	7fbb      	ldrb	r3, [r7, #30]
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d98e      	bls.n	8005c18 <STEPPERS_Init+0x2c>
    	}
    	gs_STEPPER_info[i].Dir = DIR_CW;
 8005cfa:	7ffa      	ldrb	r2, [r7, #31]
 8005cfc:	4942      	ldr	r1, [pc, #264]	@ (8005e08 <STEPPERS_Init+0x21c>)
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	3311      	adds	r3, #17
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Step_Index = 0;
 8005d0e:	7ffa      	ldrb	r2, [r7, #31]
 8005d10:	493d      	ldr	r1, [pc, #244]	@ (8005e08 <STEPPERS_Init+0x21c>)
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	440b      	add	r3, r1
 8005d1c:	330f      	adds	r3, #15
 8005d1e:	2200      	movs	r2, #0
 8005d20:	701a      	strb	r2, [r3, #0]
    	gs_STEPPER_info[i].Steps = 0;
 8005d22:	7ffa      	ldrb	r2, [r7, #31]
 8005d24:	4938      	ldr	r1, [pc, #224]	@ (8005e08 <STEPPERS_Init+0x21c>)
 8005d26:	4613      	mov	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	440b      	add	r3, r1
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Ticks = 0;
 8005d34:	7ffa      	ldrb	r2, [r7, #31]
 8005d36:	4934      	ldr	r1, [pc, #208]	@ (8005e08 <STEPPERS_Init+0x21c>)
 8005d38:	4613      	mov	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	440b      	add	r3, r1
 8005d42:	3304      	adds	r3, #4
 8005d44:	2200      	movs	r2, #0
 8005d46:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Max_Ticks = 0;
 8005d48:	7ffa      	ldrb	r2, [r7, #31]
 8005d4a:	492f      	ldr	r1, [pc, #188]	@ (8005e08 <STEPPERS_Init+0x21c>)
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	440b      	add	r3, r1
 8005d56:	3308      	adds	r3, #8
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]
    	gs_STEPPER_info[i].Blocked = 0;
 8005d5c:	7ffa      	ldrb	r2, [r7, #31]
 8005d5e:	492a      	ldr	r1, [pc, #168]	@ (8005e08 <STEPPERS_Init+0x21c>)
 8005d60:	4613      	mov	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	440b      	add	r3, r1
 8005d6a:	330e      	adds	r3, #14
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	701a      	strb	r2, [r3, #0]
    	if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE || STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8005d70:	7ffa      	ldrb	r2, [r7, #31]
 8005d72:	4920      	ldr	r1, [pc, #128]	@ (8005df4 <STEPPERS_Init+0x208>)
 8005d74:	4613      	mov	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	1a9b      	subs	r3, r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	331b      	adds	r3, #27
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d00a      	beq.n	8005d9c <STEPPERS_Init+0x1b0>
 8005d86:	7ffa      	ldrb	r2, [r7, #31]
 8005d88:	491a      	ldr	r1, [pc, #104]	@ (8005df4 <STEPPERS_Init+0x208>)
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	1a9b      	subs	r3, r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	331b      	adds	r3, #27
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <STEPPERS_Init+0x1c6>
    	{
    		gs_STEPPER_info[i].Max_Index = 4;
 8005d9c:	7ffa      	ldrb	r2, [r7, #31]
 8005d9e:	491a      	ldr	r1, [pc, #104]	@ (8005e08 <STEPPERS_Init+0x21c>)
 8005da0:	4613      	mov	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	440b      	add	r3, r1
 8005daa:	3310      	adds	r3, #16
 8005dac:	2204      	movs	r2, #4
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	e014      	b.n	8005ddc <STEPPERS_Init+0x1f0>
    	}
    	else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8005db2:	7ffa      	ldrb	r2, [r7, #31]
 8005db4:	490f      	ldr	r1, [pc, #60]	@ (8005df4 <STEPPERS_Init+0x208>)
 8005db6:	4613      	mov	r3, r2
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	1a9b      	subs	r3, r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	331b      	adds	r3, #27
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d109      	bne.n	8005ddc <STEPPERS_Init+0x1f0>
    	{
    		gs_STEPPER_info[i].Max_Index = 8;
 8005dc8:	7ffa      	ldrb	r2, [r7, #31]
 8005dca:	490f      	ldr	r1, [pc, #60]	@ (8005e08 <STEPPERS_Init+0x21c>)
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	3310      	adds	r3, #16
 8005dd8:	2208      	movs	r2, #8
 8005dda:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<STEPPER_UNITS; i++)
 8005ddc:	7ffb      	ldrb	r3, [r7, #31]
 8005dde:	3301      	adds	r3, #1
 8005de0:	77fb      	strb	r3, [r7, #31]
 8005de2:	7ffb      	ldrb	r3, [r7, #31]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f43f af14 	beq.w	8005c12 <STEPPERS_Init+0x26>
    	}
    }
}
 8005dea:	bf00      	nop
 8005dec:	bf00      	nop
 8005dee:	3720      	adds	r7, #32
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	080095d4 	.word	0x080095d4
 8005df8:	40010800 	.word	0x40010800
 8005dfc:	40021000 	.word	0x40021000
 8005e00:	40010c00 	.word	0x40010c00
 8005e04:	40011000 	.word	0x40011000
 8005e08:	20000310 	.word	0x20000310
 8005e0c:	00000000 	.word	0x00000000

08005e10 <STEPPER_SetSpeed>:
    	HAL_TIM_Base_Start_IT(TMR_Handle);
    }
}

void STEPPER_SetSpeed(uint8_t au8_STEPPER_Instance, uint16_t au16_RPM)
{
 8005e10:	b590      	push	{r4, r7, lr}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	4603      	mov	r3, r0
 8005e18:	460a      	mov	r2, r1
 8005e1a:	71fb      	strb	r3, [r7, #7]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	80bb      	strh	r3, [r7, #4]
	uint32_t Total_Steps = 0;
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]

	gs_STEPPER_info[au8_STEPPER_Instance].RPM = au16_RPM;
 8005e24:	79fa      	ldrb	r2, [r7, #7]
 8005e26:	4928      	ldr	r1, [pc, #160]	@ (8005ec8 <STEPPER_SetSpeed+0xb8>)
 8005e28:	4613      	mov	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	440b      	add	r3, r1
 8005e32:	330c      	adds	r3, #12
 8005e34:	88ba      	ldrh	r2, [r7, #4]
 8005e36:	801a      	strh	r2, [r3, #0]
	if(STEPPER_CfgParam[au8_STEPPER_Instance].STEPPING_Mode == HALF_STEP_DRIVE)
 8005e38:	79fa      	ldrb	r2, [r7, #7]
 8005e3a:	4924      	ldr	r1, [pc, #144]	@ (8005ecc <STEPPER_SetSpeed+0xbc>)
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	1a9b      	subs	r3, r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	440b      	add	r3, r1
 8005e46:	331b      	adds	r3, #27
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d10b      	bne.n	8005e66 <STEPPER_SetSpeed+0x56>
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV << 1;
 8005e4e:	79fa      	ldrb	r2, [r7, #7]
 8005e50:	491e      	ldr	r1, [pc, #120]	@ (8005ecc <STEPPER_SetSpeed+0xbc>)
 8005e52:	4613      	mov	r3, r2
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	1a9b      	subs	r3, r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	3318      	adds	r3, #24
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	e009      	b.n	8005e7a <STEPPER_SetSpeed+0x6a>
	}
	else
	{
		Total_Steps = STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV;
 8005e66:	79fa      	ldrb	r2, [r7, #7]
 8005e68:	4918      	ldr	r1, [pc, #96]	@ (8005ecc <STEPPER_SetSpeed+0xbc>)
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	1a9b      	subs	r3, r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	440b      	add	r3, r1
 8005e74:	3318      	adds	r3, #24
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	60fb      	str	r3, [r7, #12]
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Max_Ticks = (60000.0)/(STEPPER_TIME_BASE * Total_Steps * au16_RPM);
 8005e7a:	88bb      	ldrh	r3, [r7, #4]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	fb02 f303 	mul.w	r3, r2, r3
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fa fb62 	bl	800054c <__aeabi_ui2d>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	a10c      	add	r1, pc, #48	@ (adr r1, 8005ec0 <STEPPER_SetSpeed+0xb0>)
 8005e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e92:	f7fa fcff 	bl	8000894 <__aeabi_ddiv>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	79fc      	ldrb	r4, [r7, #7]
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	f7fa fe68 	bl	8000b74 <__aeabi_d2uiz>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	4908      	ldr	r1, [pc, #32]	@ (8005ec8 <STEPPER_SetSpeed+0xb8>)
 8005ea8:	4623      	mov	r3, r4
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4423      	add	r3, r4
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	440b      	add	r3, r1
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	601a      	str	r2, [r3, #0]
}
 8005eb6:	bf00      	nop
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd90      	pop	{r4, r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	00000000 	.word	0x00000000
 8005ec4:	40ed4c00 	.word	0x40ed4c00
 8005ec8:	20000310 	.word	0x20000310
 8005ecc:	080095d4 	.word	0x080095d4

08005ed0 <STEPPER_One_Step>:

static void STEPPER_One_Step(uint8_t i)
{
 8005ed0:	b590      	push	{r4, r7, lr}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	71fb      	strb	r3, [r7, #7]
	// For UniPolar Stepper Motors
	if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_UNIPOLAR)
 8005eda:	79fa      	ldrb	r2, [r7, #7]
 8005edc:	4999      	ldr	r1, [pc, #612]	@ (8006144 <STEPPER_One_Step+0x274>)
 8005ede:	4613      	mov	r3, r2
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	1a9b      	subs	r3, r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	440b      	add	r3, r1
 8005ee8:	331a      	adds	r3, #26
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f040 81c4 	bne.w	800627a <STEPPER_One_Step+0x3aa>
	{
		if(STEPPER_CfgParam[i].STEPPING_Mode == WAVE_DRIVE)
 8005ef2:	79fa      	ldrb	r2, [r7, #7]
 8005ef4:	4993      	ldr	r1, [pc, #588]	@ (8006144 <STEPPER_One_Step+0x274>)
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	331b      	adds	r3, #27
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f040 8088 	bne.w	800601a <STEPPER_One_Step+0x14a>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8005f0a:	79fa      	ldrb	r2, [r7, #7]
 8005f0c:	498d      	ldr	r1, [pc, #564]	@ (8006144 <STEPPER_One_Step+0x274>)
 8005f0e:	4613      	mov	r3, r2
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	1a9b      	subs	r3, r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	440b      	add	r3, r1
 8005f18:	6818      	ldr	r0, [r3, #0]
 8005f1a:	79fa      	ldrb	r2, [r7, #7]
 8005f1c:	4989      	ldr	r1, [pc, #548]	@ (8006144 <STEPPER_One_Step+0x274>)
 8005f1e:	4613      	mov	r3, r2
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	1a9b      	subs	r3, r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	440b      	add	r3, r1
 8005f28:	3310      	adds	r3, #16
 8005f2a:	8819      	ldrh	r1, [r3, #0]
 8005f2c:	79fa      	ldrb	r2, [r7, #7]
 8005f2e:	4c86      	ldr	r4, [pc, #536]	@ (8006148 <STEPPER_One_Step+0x278>)
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4423      	add	r3, r4
 8005f3a:	330f      	adds	r3, #15
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	4b82      	ldr	r3, [pc, #520]	@ (800614c <STEPPER_One_Step+0x27c>)
 8005f42:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8005f46:	461a      	mov	r2, r3
 8005f48:	f7fd f953 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8005f4c:	79fa      	ldrb	r2, [r7, #7]
 8005f4e:	497d      	ldr	r1, [pc, #500]	@ (8006144 <STEPPER_One_Step+0x274>)
 8005f50:	4613      	mov	r3, r2
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	1a9b      	subs	r3, r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	440b      	add	r3, r1
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	6818      	ldr	r0, [r3, #0]
 8005f5e:	79fa      	ldrb	r2, [r7, #7]
 8005f60:	4978      	ldr	r1, [pc, #480]	@ (8006144 <STEPPER_One_Step+0x274>)
 8005f62:	4613      	mov	r3, r2
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	1a9b      	subs	r3, r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	440b      	add	r3, r1
 8005f6c:	3312      	adds	r3, #18
 8005f6e:	8819      	ldrh	r1, [r3, #0]
 8005f70:	79fa      	ldrb	r2, [r7, #7]
 8005f72:	4c75      	ldr	r4, [pc, #468]	@ (8006148 <STEPPER_One_Step+0x278>)
 8005f74:	4613      	mov	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4423      	add	r3, r4
 8005f7e:	330f      	adds	r3, #15
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	4a72      	ldr	r2, [pc, #456]	@ (800614c <STEPPER_One_Step+0x27c>)
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	785b      	ldrb	r3, [r3, #1]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f7fd f931 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 8005f90:	79fa      	ldrb	r2, [r7, #7]
 8005f92:	496c      	ldr	r1, [pc, #432]	@ (8006144 <STEPPER_One_Step+0x274>)
 8005f94:	4613      	mov	r3, r2
 8005f96:	00db      	lsls	r3, r3, #3
 8005f98:	1a9b      	subs	r3, r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	6818      	ldr	r0, [r3, #0]
 8005fa2:	79fa      	ldrb	r2, [r7, #7]
 8005fa4:	4967      	ldr	r1, [pc, #412]	@ (8006144 <STEPPER_One_Step+0x274>)
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	00db      	lsls	r3, r3, #3
 8005faa:	1a9b      	subs	r3, r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	440b      	add	r3, r1
 8005fb0:	3314      	adds	r3, #20
 8005fb2:	8819      	ldrh	r1, [r3, #0]
 8005fb4:	79fa      	ldrb	r2, [r7, #7]
 8005fb6:	4c64      	ldr	r4, [pc, #400]	@ (8006148 <STEPPER_One_Step+0x278>)
 8005fb8:	4613      	mov	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4423      	add	r3, r4
 8005fc2:	330f      	adds	r3, #15
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	4a61      	ldr	r2, [pc, #388]	@ (800614c <STEPPER_One_Step+0x27c>)
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	789b      	ldrb	r3, [r3, #2]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f7fd f90f 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_WD_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8005fd4:	79fa      	ldrb	r2, [r7, #7]
 8005fd6:	495b      	ldr	r1, [pc, #364]	@ (8006144 <STEPPER_One_Step+0x274>)
 8005fd8:	4613      	mov	r3, r2
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	1a9b      	subs	r3, r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	440b      	add	r3, r1
 8005fe2:	330c      	adds	r3, #12
 8005fe4:	6818      	ldr	r0, [r3, #0]
 8005fe6:	79fa      	ldrb	r2, [r7, #7]
 8005fe8:	4956      	ldr	r1, [pc, #344]	@ (8006144 <STEPPER_One_Step+0x274>)
 8005fea:	4613      	mov	r3, r2
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	1a9b      	subs	r3, r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	3316      	adds	r3, #22
 8005ff6:	8819      	ldrh	r1, [r3, #0]
 8005ff8:	79fa      	ldrb	r2, [r7, #7]
 8005ffa:	4c53      	ldr	r4, [pc, #332]	@ (8006148 <STEPPER_One_Step+0x278>)
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4423      	add	r3, r4
 8006006:	330f      	adds	r3, #15
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	4a50      	ldr	r2, [pc, #320]	@ (800614c <STEPPER_One_Step+0x27c>)
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	78db      	ldrb	r3, [r3, #3]
 8006012:	461a      	mov	r2, r3
 8006014:	f7fd f8ed 	bl	80031f2 <HAL_GPIO_WritePin>
 8006018:	e12f      	b.n	800627a <STEPPER_One_Step+0x3aa>
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == FULL_STEP_DRIVE)
 800601a:	79fa      	ldrb	r2, [r7, #7]
 800601c:	4949      	ldr	r1, [pc, #292]	@ (8006144 <STEPPER_One_Step+0x274>)
 800601e:	4613      	mov	r3, r2
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	1a9b      	subs	r3, r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	440b      	add	r3, r1
 8006028:	331b      	adds	r3, #27
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2b01      	cmp	r3, #1
 800602e:	f040 8091 	bne.w	8006154 <STEPPER_One_Step+0x284>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 8006032:	79fa      	ldrb	r2, [r7, #7]
 8006034:	4943      	ldr	r1, [pc, #268]	@ (8006144 <STEPPER_One_Step+0x274>)
 8006036:	4613      	mov	r3, r2
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	1a9b      	subs	r3, r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	440b      	add	r3, r1
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	79fa      	ldrb	r2, [r7, #7]
 8006044:	493f      	ldr	r1, [pc, #252]	@ (8006144 <STEPPER_One_Step+0x274>)
 8006046:	4613      	mov	r3, r2
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	1a9b      	subs	r3, r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	440b      	add	r3, r1
 8006050:	3310      	adds	r3, #16
 8006052:	8819      	ldrh	r1, [r3, #0]
 8006054:	79fa      	ldrb	r2, [r7, #7]
 8006056:	4c3c      	ldr	r4, [pc, #240]	@ (8006148 <STEPPER_One_Step+0x278>)
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4423      	add	r3, r4
 8006062:	330f      	adds	r3, #15
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	4b39      	ldr	r3, [pc, #228]	@ (8006150 <STEPPER_One_Step+0x280>)
 800606a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800606e:	461a      	mov	r2, r3
 8006070:	f7fd f8bf 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 8006074:	79fa      	ldrb	r2, [r7, #7]
 8006076:	4933      	ldr	r1, [pc, #204]	@ (8006144 <STEPPER_One_Step+0x274>)
 8006078:	4613      	mov	r3, r2
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	1a9b      	subs	r3, r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	440b      	add	r3, r1
 8006082:	3304      	adds	r3, #4
 8006084:	6818      	ldr	r0, [r3, #0]
 8006086:	79fa      	ldrb	r2, [r7, #7]
 8006088:	492e      	ldr	r1, [pc, #184]	@ (8006144 <STEPPER_One_Step+0x274>)
 800608a:	4613      	mov	r3, r2
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	1a9b      	subs	r3, r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	440b      	add	r3, r1
 8006094:	3312      	adds	r3, #18
 8006096:	8819      	ldrh	r1, [r3, #0]
 8006098:	79fa      	ldrb	r2, [r7, #7]
 800609a:	4c2b      	ldr	r4, [pc, #172]	@ (8006148 <STEPPER_One_Step+0x278>)
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4423      	add	r3, r4
 80060a6:	330f      	adds	r3, #15
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	4a29      	ldr	r2, [pc, #164]	@ (8006150 <STEPPER_One_Step+0x280>)
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	461a      	mov	r2, r3
 80060b4:	f7fd f89d 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 80060b8:	79fa      	ldrb	r2, [r7, #7]
 80060ba:	4922      	ldr	r1, [pc, #136]	@ (8006144 <STEPPER_One_Step+0x274>)
 80060bc:	4613      	mov	r3, r2
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	1a9b      	subs	r3, r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	3308      	adds	r3, #8
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	79fa      	ldrb	r2, [r7, #7]
 80060cc:	491d      	ldr	r1, [pc, #116]	@ (8006144 <STEPPER_One_Step+0x274>)
 80060ce:	4613      	mov	r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	1a9b      	subs	r3, r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	440b      	add	r3, r1
 80060d8:	3314      	adds	r3, #20
 80060da:	8819      	ldrh	r1, [r3, #0]
 80060dc:	79fa      	ldrb	r2, [r7, #7]
 80060de:	4c1a      	ldr	r4, [pc, #104]	@ (8006148 <STEPPER_One_Step+0x278>)
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4423      	add	r3, r4
 80060ea:	330f      	adds	r3, #15
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	4a18      	ldr	r2, [pc, #96]	@ (8006150 <STEPPER_One_Step+0x280>)
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	789b      	ldrb	r3, [r3, #2]
 80060f6:	461a      	mov	r2, r3
 80060f8:	f7fd f87b 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_FS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 80060fc:	79fa      	ldrb	r2, [r7, #7]
 80060fe:	4911      	ldr	r1, [pc, #68]	@ (8006144 <STEPPER_One_Step+0x274>)
 8006100:	4613      	mov	r3, r2
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	1a9b      	subs	r3, r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	440b      	add	r3, r1
 800610a:	330c      	adds	r3, #12
 800610c:	6818      	ldr	r0, [r3, #0]
 800610e:	79fa      	ldrb	r2, [r7, #7]
 8006110:	490c      	ldr	r1, [pc, #48]	@ (8006144 <STEPPER_One_Step+0x274>)
 8006112:	4613      	mov	r3, r2
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	1a9b      	subs	r3, r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	440b      	add	r3, r1
 800611c:	3316      	adds	r3, #22
 800611e:	8819      	ldrh	r1, [r3, #0]
 8006120:	79fa      	ldrb	r2, [r7, #7]
 8006122:	4c09      	ldr	r4, [pc, #36]	@ (8006148 <STEPPER_One_Step+0x278>)
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4423      	add	r3, r4
 800612e:	330f      	adds	r3, #15
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	4a07      	ldr	r2, [pc, #28]	@ (8006150 <STEPPER_One_Step+0x280>)
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	78db      	ldrb	r3, [r3, #3]
 800613a:	461a      	mov	r2, r3
 800613c:	f7fd f859 	bl	80031f2 <HAL_GPIO_WritePin>
 8006140:	e09b      	b.n	800627a <STEPPER_One_Step+0x3aa>
 8006142:	bf00      	nop
 8006144:	080095d4 	.word	0x080095d4
 8006148:	20000310 	.word	0x20000310
 800614c:	2000000c 	.word	0x2000000c
 8006150:	2000001c 	.word	0x2000001c
		}
		else if(STEPPER_CfgParam[i].STEPPING_Mode == HALF_STEP_DRIVE)
 8006154:	79fa      	ldrb	r2, [r7, #7]
 8006156:	4988      	ldr	r1, [pc, #544]	@ (8006378 <STEPPER_One_Step+0x4a8>)
 8006158:	4613      	mov	r3, r2
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	1a9b      	subs	r3, r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	331b      	adds	r3, #27
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b02      	cmp	r3, #2
 8006168:	f040 8087 	bne.w	800627a <STEPPER_One_Step+0x3aa>
		{
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[0], STEPPER_CfgParam[i].IN_PIN[0], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][0]);
 800616c:	79fa      	ldrb	r2, [r7, #7]
 800616e:	4982      	ldr	r1, [pc, #520]	@ (8006378 <STEPPER_One_Step+0x4a8>)
 8006170:	4613      	mov	r3, r2
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	1a9b      	subs	r3, r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	440b      	add	r3, r1
 800617a:	6818      	ldr	r0, [r3, #0]
 800617c:	79fa      	ldrb	r2, [r7, #7]
 800617e:	497e      	ldr	r1, [pc, #504]	@ (8006378 <STEPPER_One_Step+0x4a8>)
 8006180:	4613      	mov	r3, r2
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	1a9b      	subs	r3, r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	440b      	add	r3, r1
 800618a:	3310      	adds	r3, #16
 800618c:	8819      	ldrh	r1, [r3, #0]
 800618e:	79fa      	ldrb	r2, [r7, #7]
 8006190:	4c7a      	ldr	r4, [pc, #488]	@ (800637c <STEPPER_One_Step+0x4ac>)
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4423      	add	r3, r4
 800619c:	330f      	adds	r3, #15
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	4b77      	ldr	r3, [pc, #476]	@ (8006380 <STEPPER_One_Step+0x4b0>)
 80061a4:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80061a8:	461a      	mov	r2, r3
 80061aa:	f7fd f822 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[1], STEPPER_CfgParam[i].IN_PIN[1], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][1]);
 80061ae:	79fa      	ldrb	r2, [r7, #7]
 80061b0:	4971      	ldr	r1, [pc, #452]	@ (8006378 <STEPPER_One_Step+0x4a8>)
 80061b2:	4613      	mov	r3, r2
 80061b4:	00db      	lsls	r3, r3, #3
 80061b6:	1a9b      	subs	r3, r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	440b      	add	r3, r1
 80061bc:	3304      	adds	r3, #4
 80061be:	6818      	ldr	r0, [r3, #0]
 80061c0:	79fa      	ldrb	r2, [r7, #7]
 80061c2:	496d      	ldr	r1, [pc, #436]	@ (8006378 <STEPPER_One_Step+0x4a8>)
 80061c4:	4613      	mov	r3, r2
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	1a9b      	subs	r3, r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	440b      	add	r3, r1
 80061ce:	3312      	adds	r3, #18
 80061d0:	8819      	ldrh	r1, [r3, #0]
 80061d2:	79fa      	ldrb	r2, [r7, #7]
 80061d4:	4c69      	ldr	r4, [pc, #420]	@ (800637c <STEPPER_One_Step+0x4ac>)
 80061d6:	4613      	mov	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4423      	add	r3, r4
 80061e0:	330f      	adds	r3, #15
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	4a66      	ldr	r2, [pc, #408]	@ (8006380 <STEPPER_One_Step+0x4b0>)
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	461a      	mov	r2, r3
 80061ee:	f7fd f800 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[2], STEPPER_CfgParam[i].IN_PIN[2], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][2]);
 80061f2:	79fa      	ldrb	r2, [r7, #7]
 80061f4:	4960      	ldr	r1, [pc, #384]	@ (8006378 <STEPPER_One_Step+0x4a8>)
 80061f6:	4613      	mov	r3, r2
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	1a9b      	subs	r3, r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	440b      	add	r3, r1
 8006200:	3308      	adds	r3, #8
 8006202:	6818      	ldr	r0, [r3, #0]
 8006204:	79fa      	ldrb	r2, [r7, #7]
 8006206:	495c      	ldr	r1, [pc, #368]	@ (8006378 <STEPPER_One_Step+0x4a8>)
 8006208:	4613      	mov	r3, r2
 800620a:	00db      	lsls	r3, r3, #3
 800620c:	1a9b      	subs	r3, r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	440b      	add	r3, r1
 8006212:	3314      	adds	r3, #20
 8006214:	8819      	ldrh	r1, [r3, #0]
 8006216:	79fa      	ldrb	r2, [r7, #7]
 8006218:	4c58      	ldr	r4, [pc, #352]	@ (800637c <STEPPER_One_Step+0x4ac>)
 800621a:	4613      	mov	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4413      	add	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4423      	add	r3, r4
 8006224:	330f      	adds	r3, #15
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	4a55      	ldr	r2, [pc, #340]	@ (8006380 <STEPPER_One_Step+0x4b0>)
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	789b      	ldrb	r3, [r3, #2]
 8006230:	461a      	mov	r2, r3
 8006232:	f7fc ffde 	bl	80031f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STEPPER_CfgParam[i].IN_GPIO[3], STEPPER_CfgParam[i].IN_PIN[3], UNIPOLAR_HS_PATTERN[gs_STEPPER_info[i].Step_Index][3]);
 8006236:	79fa      	ldrb	r2, [r7, #7]
 8006238:	494f      	ldr	r1, [pc, #316]	@ (8006378 <STEPPER_One_Step+0x4a8>)
 800623a:	4613      	mov	r3, r2
 800623c:	00db      	lsls	r3, r3, #3
 800623e:	1a9b      	subs	r3, r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	440b      	add	r3, r1
 8006244:	330c      	adds	r3, #12
 8006246:	6818      	ldr	r0, [r3, #0]
 8006248:	79fa      	ldrb	r2, [r7, #7]
 800624a:	494b      	ldr	r1, [pc, #300]	@ (8006378 <STEPPER_One_Step+0x4a8>)
 800624c:	4613      	mov	r3, r2
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	1a9b      	subs	r3, r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	440b      	add	r3, r1
 8006256:	3316      	adds	r3, #22
 8006258:	8819      	ldrh	r1, [r3, #0]
 800625a:	79fa      	ldrb	r2, [r7, #7]
 800625c:	4c47      	ldr	r4, [pc, #284]	@ (800637c <STEPPER_One_Step+0x4ac>)
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4423      	add	r3, r4
 8006268:	330f      	adds	r3, #15
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	4a44      	ldr	r2, [pc, #272]	@ (8006380 <STEPPER_One_Step+0x4b0>)
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	78db      	ldrb	r3, [r3, #3]
 8006274:	461a      	mov	r2, r3
 8006276:	f7fc ffbc 	bl	80031f2 <HAL_GPIO_WritePin>
	else if(STEPPER_CfgParam[i].STEPPER_Cfg == STEPPER_BIPOLAR)
	{

	}
	// Update & Check The Index
	if(gs_STEPPER_info[i].Dir == DIR_CCW)
 800627a:	79fa      	ldrb	r2, [r7, #7]
 800627c:	493f      	ldr	r1, [pc, #252]	@ (800637c <STEPPER_One_Step+0x4ac>)
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	440b      	add	r3, r1
 8006288:	3311      	adds	r3, #17
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d132      	bne.n	80062f6 <STEPPER_One_Step+0x426>
	{
		if(gs_STEPPER_info[i].Step_Index == 0)
 8006290:	79fa      	ldrb	r2, [r7, #7]
 8006292:	493a      	ldr	r1, [pc, #232]	@ (800637c <STEPPER_One_Step+0x4ac>)
 8006294:	4613      	mov	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	330f      	adds	r3, #15
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d112      	bne.n	80062cc <STEPPER_One_Step+0x3fc>
		{
			gs_STEPPER_info[i].Step_Index = gs_STEPPER_info[i].Max_Index;
 80062a6:	79f9      	ldrb	r1, [r7, #7]
 80062a8:	79fa      	ldrb	r2, [r7, #7]
 80062aa:	4834      	ldr	r0, [pc, #208]	@ (800637c <STEPPER_One_Step+0x4ac>)
 80062ac:	460b      	mov	r3, r1
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4403      	add	r3, r0
 80062b6:	3310      	adds	r3, #16
 80062b8:	7818      	ldrb	r0, [r3, #0]
 80062ba:	4930      	ldr	r1, [pc, #192]	@ (800637c <STEPPER_One_Step+0x4ac>)
 80062bc:	4613      	mov	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	330f      	adds	r3, #15
 80062c8:	4602      	mov	r2, r0
 80062ca:	701a      	strb	r2, [r3, #0]
		}
		gs_STEPPER_info[i].Step_Index--;
 80062cc:	79fa      	ldrb	r2, [r7, #7]
 80062ce:	492b      	ldr	r1, [pc, #172]	@ (800637c <STEPPER_One_Step+0x4ac>)
 80062d0:	4613      	mov	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	440b      	add	r3, r1
 80062da:	330f      	adds	r3, #15
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	3b01      	subs	r3, #1
 80062e0:	b2d8      	uxtb	r0, r3
 80062e2:	4926      	ldr	r1, [pc, #152]	@ (800637c <STEPPER_One_Step+0x4ac>)
 80062e4:	4613      	mov	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	440b      	add	r3, r1
 80062ee:	330f      	adds	r3, #15
 80062f0:	4602      	mov	r2, r0
 80062f2:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
		{
			gs_STEPPER_info[i].Step_Index = 0;
		}
	}
}
 80062f4:	e03c      	b.n	8006370 <STEPPER_One_Step+0x4a0>
	else if(gs_STEPPER_info[i].Dir == DIR_CW)
 80062f6:	79fa      	ldrb	r2, [r7, #7]
 80062f8:	4920      	ldr	r1, [pc, #128]	@ (800637c <STEPPER_One_Step+0x4ac>)
 80062fa:	4613      	mov	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	440b      	add	r3, r1
 8006304:	3311      	adds	r3, #17
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d131      	bne.n	8006370 <STEPPER_One_Step+0x4a0>
		gs_STEPPER_info[i].Step_Index++;
 800630c:	79fa      	ldrb	r2, [r7, #7]
 800630e:	491b      	ldr	r1, [pc, #108]	@ (800637c <STEPPER_One_Step+0x4ac>)
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	440b      	add	r3, r1
 800631a:	330f      	adds	r3, #15
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	3301      	adds	r3, #1
 8006320:	b2d8      	uxtb	r0, r3
 8006322:	4916      	ldr	r1, [pc, #88]	@ (800637c <STEPPER_One_Step+0x4ac>)
 8006324:	4613      	mov	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	440b      	add	r3, r1
 800632e:	330f      	adds	r3, #15
 8006330:	4602      	mov	r2, r0
 8006332:	701a      	strb	r2, [r3, #0]
		if(gs_STEPPER_info[i].Step_Index == gs_STEPPER_info[i].Max_Index)
 8006334:	79fa      	ldrb	r2, [r7, #7]
 8006336:	4911      	ldr	r1, [pc, #68]	@ (800637c <STEPPER_One_Step+0x4ac>)
 8006338:	4613      	mov	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	440b      	add	r3, r1
 8006342:	330f      	adds	r3, #15
 8006344:	7819      	ldrb	r1, [r3, #0]
 8006346:	79fa      	ldrb	r2, [r7, #7]
 8006348:	480c      	ldr	r0, [pc, #48]	@ (800637c <STEPPER_One_Step+0x4ac>)
 800634a:	4613      	mov	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4403      	add	r3, r0
 8006354:	3310      	adds	r3, #16
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	4299      	cmp	r1, r3
 800635a:	d109      	bne.n	8006370 <STEPPER_One_Step+0x4a0>
			gs_STEPPER_info[i].Step_Index = 0;
 800635c:	79fa      	ldrb	r2, [r7, #7]
 800635e:	4907      	ldr	r1, [pc, #28]	@ (800637c <STEPPER_One_Step+0x4ac>)
 8006360:	4613      	mov	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	440b      	add	r3, r1
 800636a:	330f      	adds	r3, #15
 800636c:	2200      	movs	r2, #0
 800636e:	701a      	strb	r2, [r3, #0]
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	bd90      	pop	{r4, r7, pc}
 8006378:	080095d4 	.word	0x080095d4
 800637c:	20000310 	.word	0x20000310
 8006380:	2000002c 	.word	0x2000002c

08006384 <STEPPER_Step_Blocking>:

void STEPPER_Step_Blocking(uint8_t au8_STEPPER_Instance, uint32_t au32_Steps, uint8_t au8_DIR)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	4603      	mov	r3, r0
 800638c:	6039      	str	r1, [r7, #0]
 800638e:	71fb      	strb	r3, [r7, #7]
 8006390:	4613      	mov	r3, r2
 8006392:	71bb      	strb	r3, [r7, #6]
	uint32_t i = 0;
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]
	uint32_t DelayTimeMs = 0;
 8006398:	2300      	movs	r3, #0
 800639a:	60bb      	str	r3, [r7, #8]

	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 1;
 800639c:	79fa      	ldrb	r2, [r7, #7]
 800639e:	4926      	ldr	r1, [pc, #152]	@ (8006438 <STEPPER_Step_Blocking+0xb4>)
 80063a0:	4613      	mov	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	440b      	add	r3, r1
 80063aa:	330e      	adds	r3, #14
 80063ac:	2201      	movs	r2, #1
 80063ae:	701a      	strb	r2, [r3, #0]
	DelayTimeMs = (60000/(gs_STEPPER_info[au8_STEPPER_Instance].RPM * STEPPER_CfgParam[au8_STEPPER_Instance].STEPS_PER_REV));
 80063b0:	79fa      	ldrb	r2, [r7, #7]
 80063b2:	4921      	ldr	r1, [pc, #132]	@ (8006438 <STEPPER_Step_Blocking+0xb4>)
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	440b      	add	r3, r1
 80063be:	330c      	adds	r3, #12
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	4618      	mov	r0, r3
 80063c4:	79fa      	ldrb	r2, [r7, #7]
 80063c6:	491d      	ldr	r1, [pc, #116]	@ (800643c <STEPPER_Step_Blocking+0xb8>)
 80063c8:	4613      	mov	r3, r2
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	1a9b      	subs	r3, r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	440b      	add	r3, r1
 80063d2:	3318      	adds	r3, #24
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	fb00 f303 	mul.w	r3, r0, r3
 80063da:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80063de:	fb92 f3f3 	sdiv	r3, r2, r3
 80063e2:	60bb      	str	r3, [r7, #8]
	gs_STEPPER_info[au8_STEPPER_Instance].Dir = au8_DIR;
 80063e4:	79fa      	ldrb	r2, [r7, #7]
 80063e6:	4914      	ldr	r1, [pc, #80]	@ (8006438 <STEPPER_Step_Blocking+0xb4>)
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	3311      	adds	r3, #17
 80063f4:	79ba      	ldrb	r2, [r7, #6]
 80063f6:	701a      	strb	r2, [r3, #0]
	// Send The Control Signals
	for(i=0; i<au32_Steps; i++)
 80063f8:	2300      	movs	r3, #0
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	e009      	b.n	8006412 <STEPPER_Step_Blocking+0x8e>
	{
		STEPPER_One_Step(au8_STEPPER_Instance);
 80063fe:	79fb      	ldrb	r3, [r7, #7]
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff fd65 	bl	8005ed0 <STEPPER_One_Step>
		DWT_Delay_ms(DelayTimeMs);
 8006406:	68b8      	ldr	r0, [r7, #8]
 8006408:	f7ff fbca 	bl	8005ba0 <DWT_Delay_ms>
	for(i=0; i<au32_Steps; i++)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	3301      	adds	r3, #1
 8006410:	60fb      	str	r3, [r7, #12]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d3f1      	bcc.n	80063fe <STEPPER_Step_Blocking+0x7a>
	}
	gs_STEPPER_info[au8_STEPPER_Instance].Blocked = 0;
 800641a:	79fa      	ldrb	r2, [r7, #7]
 800641c:	4906      	ldr	r1, [pc, #24]	@ (8006438 <STEPPER_Step_Blocking+0xb4>)
 800641e:	4613      	mov	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	440b      	add	r3, r1
 8006428:	330e      	adds	r3, #14
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]
}
 800642e:	bf00      	nop
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	20000310 	.word	0x20000310
 800643c:	080095d4 	.word	0x080095d4

08006440 <STEPPER_TMR_OVF_ISR>:
		}
	}
}

void STEPPER_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8006448:	2300      	movs	r3, #0
 800644a:	73fb      	strb	r3, [r7, #15]

	if(htim->Instance == STEPPER_TIMER)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006454:	d162      	bne.n	800651c <STEPPER_TMR_OVF_ISR+0xdc>
	{
		for(i=0; i<STEPPER_UNITS; i++)
 8006456:	2300      	movs	r3, #0
 8006458:	73fb      	strb	r3, [r7, #15]
 800645a:	e05c      	b.n	8006516 <STEPPER_TMR_OVF_ISR+0xd6>
		{
			if((gs_STEPPER_info[i].Ticks >= gs_STEPPER_info[i].Max_Ticks) && (gs_STEPPER_info[i].Blocked != 1) && (gs_STEPPER_info[i].Steps > 0))
 800645c:	7bfa      	ldrb	r2, [r7, #15]
 800645e:	4931      	ldr	r1, [pc, #196]	@ (8006524 <STEPPER_TMR_OVF_ISR+0xe4>)
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	440b      	add	r3, r1
 800646a:	3304      	adds	r3, #4
 800646c:	6819      	ldr	r1, [r3, #0]
 800646e:	7bfa      	ldrb	r2, [r7, #15]
 8006470:	482c      	ldr	r0, [pc, #176]	@ (8006524 <STEPPER_TMR_OVF_ISR+0xe4>)
 8006472:	4613      	mov	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4403      	add	r3, r0
 800647c:	3308      	adds	r3, #8
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4299      	cmp	r1, r3
 8006482:	d333      	bcc.n	80064ec <STEPPER_TMR_OVF_ISR+0xac>
 8006484:	7bfa      	ldrb	r2, [r7, #15]
 8006486:	4927      	ldr	r1, [pc, #156]	@ (8006524 <STEPPER_TMR_OVF_ISR+0xe4>)
 8006488:	4613      	mov	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	440b      	add	r3, r1
 8006492:	330e      	adds	r3, #14
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d028      	beq.n	80064ec <STEPPER_TMR_OVF_ISR+0xac>
 800649a:	7bfa      	ldrb	r2, [r7, #15]
 800649c:	4921      	ldr	r1, [pc, #132]	@ (8006524 <STEPPER_TMR_OVF_ISR+0xe4>)
 800649e:	4613      	mov	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	440b      	add	r3, r1
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d01e      	beq.n	80064ec <STEPPER_TMR_OVF_ISR+0xac>
			{
				STEPPER_One_Step(i);
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff fd0d 	bl	8005ed0 <STEPPER_One_Step>
				gs_STEPPER_info[i].Steps--;
 80064b6:	7bfa      	ldrb	r2, [r7, #15]
 80064b8:	491a      	ldr	r1, [pc, #104]	@ (8006524 <STEPPER_TMR_OVF_ISR+0xe4>)
 80064ba:	4613      	mov	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	440b      	add	r3, r1
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	1e59      	subs	r1, r3, #1
 80064c8:	4816      	ldr	r0, [pc, #88]	@ (8006524 <STEPPER_TMR_OVF_ISR+0xe4>)
 80064ca:	4613      	mov	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4403      	add	r3, r0
 80064d4:	6019      	str	r1, [r3, #0]
				gs_STEPPER_info[i].Ticks = 0;
 80064d6:	7bfa      	ldrb	r2, [r7, #15]
 80064d8:	4912      	ldr	r1, [pc, #72]	@ (8006524 <STEPPER_TMR_OVF_ISR+0xe4>)
 80064da:	4613      	mov	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	440b      	add	r3, r1
 80064e4:	3304      	adds	r3, #4
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	e011      	b.n	8006510 <STEPPER_TMR_OVF_ISR+0xd0>
			}
			else
			{
				gs_STEPPER_info[i].Ticks++;
 80064ec:	7bfa      	ldrb	r2, [r7, #15]
 80064ee:	490d      	ldr	r1, [pc, #52]	@ (8006524 <STEPPER_TMR_OVF_ISR+0xe4>)
 80064f0:	4613      	mov	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	440b      	add	r3, r1
 80064fa:	3304      	adds	r3, #4
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	1c59      	adds	r1, r3, #1
 8006500:	4808      	ldr	r0, [pc, #32]	@ (8006524 <STEPPER_TMR_OVF_ISR+0xe4>)
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4403      	add	r3, r0
 800650c:	3304      	adds	r3, #4
 800650e:	6019      	str	r1, [r3, #0]
		for(i=0; i<STEPPER_UNITS; i++)
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	3301      	adds	r3, #1
 8006514:	73fb      	strb	r3, [r7, #15]
 8006516:	7bfb      	ldrb	r3, [r7, #15]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d09f      	beq.n	800645c <STEPPER_TMR_OVF_ISR+0x1c>
			}
		}
	}
}
 800651c:	bf00      	nop
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20000310 	.word	0x20000310

08006528 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8006528:	b480      	push	{r7}
 800652a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800652c:	4b14      	ldr	r3, [pc, #80]	@ (8006580 <DWT_Delay_Init+0x58>)
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	4a13      	ldr	r2, [pc, #76]	@ (8006580 <DWT_Delay_Init+0x58>)
 8006532:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006536:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8006538:	4b11      	ldr	r3, [pc, #68]	@ (8006580 <DWT_Delay_Init+0x58>)
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	4a10      	ldr	r2, [pc, #64]	@ (8006580 <DWT_Delay_Init+0x58>)
 800653e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006542:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8006544:	4b0f      	ldr	r3, [pc, #60]	@ (8006584 <DWT_Delay_Init+0x5c>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a0e      	ldr	r2, [pc, #56]	@ (8006584 <DWT_Delay_Init+0x5c>)
 800654a:	f023 0301 	bic.w	r3, r3, #1
 800654e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8006550:	4b0c      	ldr	r3, [pc, #48]	@ (8006584 <DWT_Delay_Init+0x5c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a0b      	ldr	r2, [pc, #44]	@ (8006584 <DWT_Delay_Init+0x5c>)
 8006556:	f043 0301 	orr.w	r3, r3, #1
 800655a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800655c:	4b09      	ldr	r3, [pc, #36]	@ (8006584 <DWT_Delay_Init+0x5c>)
 800655e:	2200      	movs	r2, #0
 8006560:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8006562:	bf00      	nop
    __ASM volatile ("NOP");
 8006564:	bf00      	nop
    __ASM volatile ("NOP");
 8006566:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8006568:	4b06      	ldr	r3, [pc, #24]	@ (8006584 <DWT_Delay_Init+0x5c>)
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8006570:	2300      	movs	r3, #0
 8006572:	e000      	b.n	8006576 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8006574:	2301      	movs	r3, #1
    }
}
 8006576:	4618      	mov	r0, r3
 8006578:	46bd      	mov	sp, r7
 800657a:	bc80      	pop	{r7}
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	e000edf0 	.word	0xe000edf0
 8006584:	e0001000 	.word	0xe0001000

08006588 <atof>:
 8006588:	2100      	movs	r1, #0
 800658a:	f000 bdf9 	b.w	8007180 <strtod>

0800658e <sulp>:
 800658e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006592:	460f      	mov	r7, r1
 8006594:	4690      	mov	r8, r2
 8006596:	f001 ff7b 	bl	8008490 <__ulp>
 800659a:	4604      	mov	r4, r0
 800659c:	460d      	mov	r5, r1
 800659e:	f1b8 0f00 	cmp.w	r8, #0
 80065a2:	d011      	beq.n	80065c8 <sulp+0x3a>
 80065a4:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80065a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	dd0b      	ble.n	80065c8 <sulp+0x3a>
 80065b0:	2400      	movs	r4, #0
 80065b2:	051b      	lsls	r3, r3, #20
 80065b4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80065b8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80065bc:	4622      	mov	r2, r4
 80065be:	462b      	mov	r3, r5
 80065c0:	f7fa f83e 	bl	8000640 <__aeabi_dmul>
 80065c4:	4604      	mov	r4, r0
 80065c6:	460d      	mov	r5, r1
 80065c8:	4620      	mov	r0, r4
 80065ca:	4629      	mov	r1, r5
 80065cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080065d0 <_strtod_l>:
 80065d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d4:	b09f      	sub	sp, #124	@ 0x7c
 80065d6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80065d8:	2200      	movs	r2, #0
 80065da:	460c      	mov	r4, r1
 80065dc:	921a      	str	r2, [sp, #104]	@ 0x68
 80065de:	f04f 0a00 	mov.w	sl, #0
 80065e2:	f04f 0b00 	mov.w	fp, #0
 80065e6:	460a      	mov	r2, r1
 80065e8:	9005      	str	r0, [sp, #20]
 80065ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80065ec:	7811      	ldrb	r1, [r2, #0]
 80065ee:	292b      	cmp	r1, #43	@ 0x2b
 80065f0:	d048      	beq.n	8006684 <_strtod_l+0xb4>
 80065f2:	d836      	bhi.n	8006662 <_strtod_l+0x92>
 80065f4:	290d      	cmp	r1, #13
 80065f6:	d830      	bhi.n	800665a <_strtod_l+0x8a>
 80065f8:	2908      	cmp	r1, #8
 80065fa:	d830      	bhi.n	800665e <_strtod_l+0x8e>
 80065fc:	2900      	cmp	r1, #0
 80065fe:	d039      	beq.n	8006674 <_strtod_l+0xa4>
 8006600:	2200      	movs	r2, #0
 8006602:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006604:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006606:	782a      	ldrb	r2, [r5, #0]
 8006608:	2a30      	cmp	r2, #48	@ 0x30
 800660a:	f040 80b1 	bne.w	8006770 <_strtod_l+0x1a0>
 800660e:	786a      	ldrb	r2, [r5, #1]
 8006610:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006614:	2a58      	cmp	r2, #88	@ 0x58
 8006616:	d16c      	bne.n	80066f2 <_strtod_l+0x122>
 8006618:	9302      	str	r3, [sp, #8]
 800661a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800661c:	4a8e      	ldr	r2, [pc, #568]	@ (8006858 <_strtod_l+0x288>)
 800661e:	9301      	str	r3, [sp, #4]
 8006620:	ab1a      	add	r3, sp, #104	@ 0x68
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	9805      	ldr	r0, [sp, #20]
 8006626:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006628:	a919      	add	r1, sp, #100	@ 0x64
 800662a:	f001 f82d 	bl	8007688 <__gethex>
 800662e:	f010 060f 	ands.w	r6, r0, #15
 8006632:	4604      	mov	r4, r0
 8006634:	d005      	beq.n	8006642 <_strtod_l+0x72>
 8006636:	2e06      	cmp	r6, #6
 8006638:	d126      	bne.n	8006688 <_strtod_l+0xb8>
 800663a:	2300      	movs	r3, #0
 800663c:	3501      	adds	r5, #1
 800663e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006640:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006642:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006644:	2b00      	cmp	r3, #0
 8006646:	f040 8584 	bne.w	8007152 <_strtod_l+0xb82>
 800664a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800664c:	b1bb      	cbz	r3, 800667e <_strtod_l+0xae>
 800664e:	4650      	mov	r0, sl
 8006650:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006654:	b01f      	add	sp, #124	@ 0x7c
 8006656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665a:	2920      	cmp	r1, #32
 800665c:	d1d0      	bne.n	8006600 <_strtod_l+0x30>
 800665e:	3201      	adds	r2, #1
 8006660:	e7c3      	b.n	80065ea <_strtod_l+0x1a>
 8006662:	292d      	cmp	r1, #45	@ 0x2d
 8006664:	d1cc      	bne.n	8006600 <_strtod_l+0x30>
 8006666:	2101      	movs	r1, #1
 8006668:	910b      	str	r1, [sp, #44]	@ 0x2c
 800666a:	1c51      	adds	r1, r2, #1
 800666c:	9119      	str	r1, [sp, #100]	@ 0x64
 800666e:	7852      	ldrb	r2, [r2, #1]
 8006670:	2a00      	cmp	r2, #0
 8006672:	d1c7      	bne.n	8006604 <_strtod_l+0x34>
 8006674:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006676:	9419      	str	r4, [sp, #100]	@ 0x64
 8006678:	2b00      	cmp	r3, #0
 800667a:	f040 8568 	bne.w	800714e <_strtod_l+0xb7e>
 800667e:	4650      	mov	r0, sl
 8006680:	4659      	mov	r1, fp
 8006682:	e7e7      	b.n	8006654 <_strtod_l+0x84>
 8006684:	2100      	movs	r1, #0
 8006686:	e7ef      	b.n	8006668 <_strtod_l+0x98>
 8006688:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800668a:	b13a      	cbz	r2, 800669c <_strtod_l+0xcc>
 800668c:	2135      	movs	r1, #53	@ 0x35
 800668e:	a81c      	add	r0, sp, #112	@ 0x70
 8006690:	f001 ffee 	bl	8008670 <__copybits>
 8006694:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006696:	9805      	ldr	r0, [sp, #20]
 8006698:	f001 fbc8 	bl	8007e2c <_Bfree>
 800669c:	3e01      	subs	r6, #1
 800669e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80066a0:	2e04      	cmp	r6, #4
 80066a2:	d806      	bhi.n	80066b2 <_strtod_l+0xe2>
 80066a4:	e8df f006 	tbb	[pc, r6]
 80066a8:	201d0314 	.word	0x201d0314
 80066ac:	14          	.byte	0x14
 80066ad:	00          	.byte	0x00
 80066ae:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80066b2:	05e1      	lsls	r1, r4, #23
 80066b4:	bf48      	it	mi
 80066b6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80066ba:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80066be:	0d1b      	lsrs	r3, r3, #20
 80066c0:	051b      	lsls	r3, r3, #20
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1bd      	bne.n	8006642 <_strtod_l+0x72>
 80066c6:	f000 feed 	bl	80074a4 <__errno>
 80066ca:	2322      	movs	r3, #34	@ 0x22
 80066cc:	6003      	str	r3, [r0, #0]
 80066ce:	e7b8      	b.n	8006642 <_strtod_l+0x72>
 80066d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80066d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80066d8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80066dc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80066e0:	e7e7      	b.n	80066b2 <_strtod_l+0xe2>
 80066e2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800685c <_strtod_l+0x28c>
 80066e6:	e7e4      	b.n	80066b2 <_strtod_l+0xe2>
 80066e8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80066ec:	f04f 3aff 	mov.w	sl, #4294967295
 80066f0:	e7df      	b.n	80066b2 <_strtod_l+0xe2>
 80066f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	9219      	str	r2, [sp, #100]	@ 0x64
 80066f8:	785b      	ldrb	r3, [r3, #1]
 80066fa:	2b30      	cmp	r3, #48	@ 0x30
 80066fc:	d0f9      	beq.n	80066f2 <_strtod_l+0x122>
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d09f      	beq.n	8006642 <_strtod_l+0x72>
 8006702:	2301      	movs	r3, #1
 8006704:	9309      	str	r3, [sp, #36]	@ 0x24
 8006706:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006708:	220a      	movs	r2, #10
 800670a:	930c      	str	r3, [sp, #48]	@ 0x30
 800670c:	2300      	movs	r3, #0
 800670e:	461f      	mov	r7, r3
 8006710:	9308      	str	r3, [sp, #32]
 8006712:	930a      	str	r3, [sp, #40]	@ 0x28
 8006714:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006716:	7805      	ldrb	r5, [r0, #0]
 8006718:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800671c:	b2d9      	uxtb	r1, r3
 800671e:	2909      	cmp	r1, #9
 8006720:	d928      	bls.n	8006774 <_strtod_l+0x1a4>
 8006722:	2201      	movs	r2, #1
 8006724:	494e      	ldr	r1, [pc, #312]	@ (8006860 <_strtod_l+0x290>)
 8006726:	f000 fe64 	bl	80073f2 <strncmp>
 800672a:	2800      	cmp	r0, #0
 800672c:	d032      	beq.n	8006794 <_strtod_l+0x1c4>
 800672e:	2000      	movs	r0, #0
 8006730:	462a      	mov	r2, r5
 8006732:	4681      	mov	r9, r0
 8006734:	463d      	mov	r5, r7
 8006736:	4603      	mov	r3, r0
 8006738:	2a65      	cmp	r2, #101	@ 0x65
 800673a:	d001      	beq.n	8006740 <_strtod_l+0x170>
 800673c:	2a45      	cmp	r2, #69	@ 0x45
 800673e:	d114      	bne.n	800676a <_strtod_l+0x19a>
 8006740:	b91d      	cbnz	r5, 800674a <_strtod_l+0x17a>
 8006742:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006744:	4302      	orrs	r2, r0
 8006746:	d095      	beq.n	8006674 <_strtod_l+0xa4>
 8006748:	2500      	movs	r5, #0
 800674a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800674c:	1c62      	adds	r2, r4, #1
 800674e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006750:	7862      	ldrb	r2, [r4, #1]
 8006752:	2a2b      	cmp	r2, #43	@ 0x2b
 8006754:	d077      	beq.n	8006846 <_strtod_l+0x276>
 8006756:	2a2d      	cmp	r2, #45	@ 0x2d
 8006758:	d07b      	beq.n	8006852 <_strtod_l+0x282>
 800675a:	f04f 0c00 	mov.w	ip, #0
 800675e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006762:	2909      	cmp	r1, #9
 8006764:	f240 8082 	bls.w	800686c <_strtod_l+0x29c>
 8006768:	9419      	str	r4, [sp, #100]	@ 0x64
 800676a:	f04f 0800 	mov.w	r8, #0
 800676e:	e0a2      	b.n	80068b6 <_strtod_l+0x2e6>
 8006770:	2300      	movs	r3, #0
 8006772:	e7c7      	b.n	8006704 <_strtod_l+0x134>
 8006774:	2f08      	cmp	r7, #8
 8006776:	bfd5      	itete	le
 8006778:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800677a:	9908      	ldrgt	r1, [sp, #32]
 800677c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006780:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006784:	f100 0001 	add.w	r0, r0, #1
 8006788:	bfd4      	ite	le
 800678a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800678c:	9308      	strgt	r3, [sp, #32]
 800678e:	3701      	adds	r7, #1
 8006790:	9019      	str	r0, [sp, #100]	@ 0x64
 8006792:	e7bf      	b.n	8006714 <_strtod_l+0x144>
 8006794:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	9219      	str	r2, [sp, #100]	@ 0x64
 800679a:	785a      	ldrb	r2, [r3, #1]
 800679c:	b37f      	cbz	r7, 80067fe <_strtod_l+0x22e>
 800679e:	4681      	mov	r9, r0
 80067a0:	463d      	mov	r5, r7
 80067a2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80067a6:	2b09      	cmp	r3, #9
 80067a8:	d912      	bls.n	80067d0 <_strtod_l+0x200>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e7c4      	b.n	8006738 <_strtod_l+0x168>
 80067ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067b0:	3001      	adds	r0, #1
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	9219      	str	r2, [sp, #100]	@ 0x64
 80067b6:	785a      	ldrb	r2, [r3, #1]
 80067b8:	2a30      	cmp	r2, #48	@ 0x30
 80067ba:	d0f8      	beq.n	80067ae <_strtod_l+0x1de>
 80067bc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	f200 84cb 	bhi.w	800715c <_strtod_l+0xb8c>
 80067c6:	4681      	mov	r9, r0
 80067c8:	2000      	movs	r0, #0
 80067ca:	4605      	mov	r5, r0
 80067cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80067d0:	3a30      	subs	r2, #48	@ 0x30
 80067d2:	f100 0301 	add.w	r3, r0, #1
 80067d6:	d02a      	beq.n	800682e <_strtod_l+0x25e>
 80067d8:	4499      	add	r9, r3
 80067da:	210a      	movs	r1, #10
 80067dc:	462b      	mov	r3, r5
 80067de:	eb00 0c05 	add.w	ip, r0, r5
 80067e2:	4563      	cmp	r3, ip
 80067e4:	d10d      	bne.n	8006802 <_strtod_l+0x232>
 80067e6:	1c69      	adds	r1, r5, #1
 80067e8:	4401      	add	r1, r0
 80067ea:	4428      	add	r0, r5
 80067ec:	2808      	cmp	r0, #8
 80067ee:	dc16      	bgt.n	800681e <_strtod_l+0x24e>
 80067f0:	230a      	movs	r3, #10
 80067f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80067f4:	fb03 2300 	mla	r3, r3, r0, r2
 80067f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80067fa:	2300      	movs	r3, #0
 80067fc:	e018      	b.n	8006830 <_strtod_l+0x260>
 80067fe:	4638      	mov	r0, r7
 8006800:	e7da      	b.n	80067b8 <_strtod_l+0x1e8>
 8006802:	2b08      	cmp	r3, #8
 8006804:	f103 0301 	add.w	r3, r3, #1
 8006808:	dc03      	bgt.n	8006812 <_strtod_l+0x242>
 800680a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800680c:	434e      	muls	r6, r1
 800680e:	960a      	str	r6, [sp, #40]	@ 0x28
 8006810:	e7e7      	b.n	80067e2 <_strtod_l+0x212>
 8006812:	2b10      	cmp	r3, #16
 8006814:	bfde      	ittt	le
 8006816:	9e08      	ldrle	r6, [sp, #32]
 8006818:	434e      	mulle	r6, r1
 800681a:	9608      	strle	r6, [sp, #32]
 800681c:	e7e1      	b.n	80067e2 <_strtod_l+0x212>
 800681e:	280f      	cmp	r0, #15
 8006820:	dceb      	bgt.n	80067fa <_strtod_l+0x22a>
 8006822:	230a      	movs	r3, #10
 8006824:	9808      	ldr	r0, [sp, #32]
 8006826:	fb03 2300 	mla	r3, r3, r0, r2
 800682a:	9308      	str	r3, [sp, #32]
 800682c:	e7e5      	b.n	80067fa <_strtod_l+0x22a>
 800682e:	4629      	mov	r1, r5
 8006830:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006832:	460d      	mov	r5, r1
 8006834:	1c50      	adds	r0, r2, #1
 8006836:	9019      	str	r0, [sp, #100]	@ 0x64
 8006838:	7852      	ldrb	r2, [r2, #1]
 800683a:	4618      	mov	r0, r3
 800683c:	e7b1      	b.n	80067a2 <_strtod_l+0x1d2>
 800683e:	f04f 0900 	mov.w	r9, #0
 8006842:	2301      	movs	r3, #1
 8006844:	e77d      	b.n	8006742 <_strtod_l+0x172>
 8006846:	f04f 0c00 	mov.w	ip, #0
 800684a:	1ca2      	adds	r2, r4, #2
 800684c:	9219      	str	r2, [sp, #100]	@ 0x64
 800684e:	78a2      	ldrb	r2, [r4, #2]
 8006850:	e785      	b.n	800675e <_strtod_l+0x18e>
 8006852:	f04f 0c01 	mov.w	ip, #1
 8006856:	e7f8      	b.n	800684a <_strtod_l+0x27a>
 8006858:	08009614 	.word	0x08009614
 800685c:	7ff00000 	.word	0x7ff00000
 8006860:	080095f0 	.word	0x080095f0
 8006864:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006866:	1c51      	adds	r1, r2, #1
 8006868:	9119      	str	r1, [sp, #100]	@ 0x64
 800686a:	7852      	ldrb	r2, [r2, #1]
 800686c:	2a30      	cmp	r2, #48	@ 0x30
 800686e:	d0f9      	beq.n	8006864 <_strtod_l+0x294>
 8006870:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006874:	2908      	cmp	r1, #8
 8006876:	f63f af78 	bhi.w	800676a <_strtod_l+0x19a>
 800687a:	f04f 080a 	mov.w	r8, #10
 800687e:	3a30      	subs	r2, #48	@ 0x30
 8006880:	920e      	str	r2, [sp, #56]	@ 0x38
 8006882:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006884:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006886:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006888:	1c56      	adds	r6, r2, #1
 800688a:	9619      	str	r6, [sp, #100]	@ 0x64
 800688c:	7852      	ldrb	r2, [r2, #1]
 800688e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006892:	f1be 0f09 	cmp.w	lr, #9
 8006896:	d939      	bls.n	800690c <_strtod_l+0x33c>
 8006898:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800689a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800689e:	1a76      	subs	r6, r6, r1
 80068a0:	2e08      	cmp	r6, #8
 80068a2:	dc03      	bgt.n	80068ac <_strtod_l+0x2dc>
 80068a4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80068a6:	4588      	cmp	r8, r1
 80068a8:	bfa8      	it	ge
 80068aa:	4688      	movge	r8, r1
 80068ac:	f1bc 0f00 	cmp.w	ip, #0
 80068b0:	d001      	beq.n	80068b6 <_strtod_l+0x2e6>
 80068b2:	f1c8 0800 	rsb	r8, r8, #0
 80068b6:	2d00      	cmp	r5, #0
 80068b8:	d14e      	bne.n	8006958 <_strtod_l+0x388>
 80068ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80068bc:	4308      	orrs	r0, r1
 80068be:	f47f aec0 	bne.w	8006642 <_strtod_l+0x72>
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f47f aed6 	bne.w	8006674 <_strtod_l+0xa4>
 80068c8:	2a69      	cmp	r2, #105	@ 0x69
 80068ca:	d028      	beq.n	800691e <_strtod_l+0x34e>
 80068cc:	dc25      	bgt.n	800691a <_strtod_l+0x34a>
 80068ce:	2a49      	cmp	r2, #73	@ 0x49
 80068d0:	d025      	beq.n	800691e <_strtod_l+0x34e>
 80068d2:	2a4e      	cmp	r2, #78	@ 0x4e
 80068d4:	f47f aece 	bne.w	8006674 <_strtod_l+0xa4>
 80068d8:	499a      	ldr	r1, [pc, #616]	@ (8006b44 <_strtod_l+0x574>)
 80068da:	a819      	add	r0, sp, #100	@ 0x64
 80068dc:	f001 f8f6 	bl	8007acc <__match>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	f43f aec7 	beq.w	8006674 <_strtod_l+0xa4>
 80068e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b28      	cmp	r3, #40	@ 0x28
 80068ec:	d12e      	bne.n	800694c <_strtod_l+0x37c>
 80068ee:	4996      	ldr	r1, [pc, #600]	@ (8006b48 <_strtod_l+0x578>)
 80068f0:	aa1c      	add	r2, sp, #112	@ 0x70
 80068f2:	a819      	add	r0, sp, #100	@ 0x64
 80068f4:	f001 f8fe 	bl	8007af4 <__hexnan>
 80068f8:	2805      	cmp	r0, #5
 80068fa:	d127      	bne.n	800694c <_strtod_l+0x37c>
 80068fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80068fe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006902:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006906:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800690a:	e69a      	b.n	8006642 <_strtod_l+0x72>
 800690c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800690e:	fb08 2101 	mla	r1, r8, r1, r2
 8006912:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006916:	920e      	str	r2, [sp, #56]	@ 0x38
 8006918:	e7b5      	b.n	8006886 <_strtod_l+0x2b6>
 800691a:	2a6e      	cmp	r2, #110	@ 0x6e
 800691c:	e7da      	b.n	80068d4 <_strtod_l+0x304>
 800691e:	498b      	ldr	r1, [pc, #556]	@ (8006b4c <_strtod_l+0x57c>)
 8006920:	a819      	add	r0, sp, #100	@ 0x64
 8006922:	f001 f8d3 	bl	8007acc <__match>
 8006926:	2800      	cmp	r0, #0
 8006928:	f43f aea4 	beq.w	8006674 <_strtod_l+0xa4>
 800692c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800692e:	4988      	ldr	r1, [pc, #544]	@ (8006b50 <_strtod_l+0x580>)
 8006930:	3b01      	subs	r3, #1
 8006932:	a819      	add	r0, sp, #100	@ 0x64
 8006934:	9319      	str	r3, [sp, #100]	@ 0x64
 8006936:	f001 f8c9 	bl	8007acc <__match>
 800693a:	b910      	cbnz	r0, 8006942 <_strtod_l+0x372>
 800693c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800693e:	3301      	adds	r3, #1
 8006940:	9319      	str	r3, [sp, #100]	@ 0x64
 8006942:	f04f 0a00 	mov.w	sl, #0
 8006946:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006b54 <_strtod_l+0x584>
 800694a:	e67a      	b.n	8006642 <_strtod_l+0x72>
 800694c:	4882      	ldr	r0, [pc, #520]	@ (8006b58 <_strtod_l+0x588>)
 800694e:	f000 fde5 	bl	800751c <nan>
 8006952:	4682      	mov	sl, r0
 8006954:	468b      	mov	fp, r1
 8006956:	e674      	b.n	8006642 <_strtod_l+0x72>
 8006958:	eba8 0309 	sub.w	r3, r8, r9
 800695c:	2f00      	cmp	r7, #0
 800695e:	bf08      	it	eq
 8006960:	462f      	moveq	r7, r5
 8006962:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006964:	2d10      	cmp	r5, #16
 8006966:	462c      	mov	r4, r5
 8006968:	9309      	str	r3, [sp, #36]	@ 0x24
 800696a:	bfa8      	it	ge
 800696c:	2410      	movge	r4, #16
 800696e:	f7f9 fded 	bl	800054c <__aeabi_ui2d>
 8006972:	2d09      	cmp	r5, #9
 8006974:	4682      	mov	sl, r0
 8006976:	468b      	mov	fp, r1
 8006978:	dc11      	bgt.n	800699e <_strtod_l+0x3ce>
 800697a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800697c:	2b00      	cmp	r3, #0
 800697e:	f43f ae60 	beq.w	8006642 <_strtod_l+0x72>
 8006982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006984:	dd76      	ble.n	8006a74 <_strtod_l+0x4a4>
 8006986:	2b16      	cmp	r3, #22
 8006988:	dc5d      	bgt.n	8006a46 <_strtod_l+0x476>
 800698a:	4974      	ldr	r1, [pc, #464]	@ (8006b5c <_strtod_l+0x58c>)
 800698c:	4652      	mov	r2, sl
 800698e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006992:	465b      	mov	r3, fp
 8006994:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006998:	f7f9 fe52 	bl	8000640 <__aeabi_dmul>
 800699c:	e7d9      	b.n	8006952 <_strtod_l+0x382>
 800699e:	4b6f      	ldr	r3, [pc, #444]	@ (8006b5c <_strtod_l+0x58c>)
 80069a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80069a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80069a8:	f7f9 fe4a 	bl	8000640 <__aeabi_dmul>
 80069ac:	4682      	mov	sl, r0
 80069ae:	9808      	ldr	r0, [sp, #32]
 80069b0:	468b      	mov	fp, r1
 80069b2:	f7f9 fdcb 	bl	800054c <__aeabi_ui2d>
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
 80069ba:	4650      	mov	r0, sl
 80069bc:	4659      	mov	r1, fp
 80069be:	f7f9 fc89 	bl	80002d4 <__adddf3>
 80069c2:	2d0f      	cmp	r5, #15
 80069c4:	4682      	mov	sl, r0
 80069c6:	468b      	mov	fp, r1
 80069c8:	ddd7      	ble.n	800697a <_strtod_l+0x3aa>
 80069ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069cc:	1b2c      	subs	r4, r5, r4
 80069ce:	441c      	add	r4, r3
 80069d0:	2c00      	cmp	r4, #0
 80069d2:	f340 8096 	ble.w	8006b02 <_strtod_l+0x532>
 80069d6:	f014 030f 	ands.w	r3, r4, #15
 80069da:	d00a      	beq.n	80069f2 <_strtod_l+0x422>
 80069dc:	495f      	ldr	r1, [pc, #380]	@ (8006b5c <_strtod_l+0x58c>)
 80069de:	4652      	mov	r2, sl
 80069e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80069e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069e8:	465b      	mov	r3, fp
 80069ea:	f7f9 fe29 	bl	8000640 <__aeabi_dmul>
 80069ee:	4682      	mov	sl, r0
 80069f0:	468b      	mov	fp, r1
 80069f2:	f034 040f 	bics.w	r4, r4, #15
 80069f6:	d073      	beq.n	8006ae0 <_strtod_l+0x510>
 80069f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80069fc:	dd48      	ble.n	8006a90 <_strtod_l+0x4c0>
 80069fe:	2400      	movs	r4, #0
 8006a00:	46a0      	mov	r8, r4
 8006a02:	46a1      	mov	r9, r4
 8006a04:	940a      	str	r4, [sp, #40]	@ 0x28
 8006a06:	2322      	movs	r3, #34	@ 0x22
 8006a08:	f04f 0a00 	mov.w	sl, #0
 8006a0c:	9a05      	ldr	r2, [sp, #20]
 8006a0e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006b54 <_strtod_l+0x584>
 8006a12:	6013      	str	r3, [r2, #0]
 8006a14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f43f ae13 	beq.w	8006642 <_strtod_l+0x72>
 8006a1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a1e:	9805      	ldr	r0, [sp, #20]
 8006a20:	f001 fa04 	bl	8007e2c <_Bfree>
 8006a24:	4649      	mov	r1, r9
 8006a26:	9805      	ldr	r0, [sp, #20]
 8006a28:	f001 fa00 	bl	8007e2c <_Bfree>
 8006a2c:	4641      	mov	r1, r8
 8006a2e:	9805      	ldr	r0, [sp, #20]
 8006a30:	f001 f9fc 	bl	8007e2c <_Bfree>
 8006a34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a36:	9805      	ldr	r0, [sp, #20]
 8006a38:	f001 f9f8 	bl	8007e2c <_Bfree>
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	9805      	ldr	r0, [sp, #20]
 8006a40:	f001 f9f4 	bl	8007e2c <_Bfree>
 8006a44:	e5fd      	b.n	8006642 <_strtod_l+0x72>
 8006a46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a48:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	dbbc      	blt.n	80069ca <_strtod_l+0x3fa>
 8006a50:	4c42      	ldr	r4, [pc, #264]	@ (8006b5c <_strtod_l+0x58c>)
 8006a52:	f1c5 050f 	rsb	r5, r5, #15
 8006a56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006a5a:	4652      	mov	r2, sl
 8006a5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a60:	465b      	mov	r3, fp
 8006a62:	f7f9 fded 	bl	8000640 <__aeabi_dmul>
 8006a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a68:	1b5d      	subs	r5, r3, r5
 8006a6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006a6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006a72:	e791      	b.n	8006998 <_strtod_l+0x3c8>
 8006a74:	3316      	adds	r3, #22
 8006a76:	dba8      	blt.n	80069ca <_strtod_l+0x3fa>
 8006a78:	4b38      	ldr	r3, [pc, #224]	@ (8006b5c <_strtod_l+0x58c>)
 8006a7a:	eba9 0808 	sub.w	r8, r9, r8
 8006a7e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006a82:	4650      	mov	r0, sl
 8006a84:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006a88:	4659      	mov	r1, fp
 8006a8a:	f7f9 ff03 	bl	8000894 <__aeabi_ddiv>
 8006a8e:	e760      	b.n	8006952 <_strtod_l+0x382>
 8006a90:	4b33      	ldr	r3, [pc, #204]	@ (8006b60 <_strtod_l+0x590>)
 8006a92:	4650      	mov	r0, sl
 8006a94:	9308      	str	r3, [sp, #32]
 8006a96:	2300      	movs	r3, #0
 8006a98:	4659      	mov	r1, fp
 8006a9a:	461e      	mov	r6, r3
 8006a9c:	1124      	asrs	r4, r4, #4
 8006a9e:	2c01      	cmp	r4, #1
 8006aa0:	dc21      	bgt.n	8006ae6 <_strtod_l+0x516>
 8006aa2:	b10b      	cbz	r3, 8006aa8 <_strtod_l+0x4d8>
 8006aa4:	4682      	mov	sl, r0
 8006aa6:	468b      	mov	fp, r1
 8006aa8:	492d      	ldr	r1, [pc, #180]	@ (8006b60 <_strtod_l+0x590>)
 8006aaa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006aae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006ab2:	4652      	mov	r2, sl
 8006ab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ab8:	465b      	mov	r3, fp
 8006aba:	f7f9 fdc1 	bl	8000640 <__aeabi_dmul>
 8006abe:	4b25      	ldr	r3, [pc, #148]	@ (8006b54 <_strtod_l+0x584>)
 8006ac0:	460a      	mov	r2, r1
 8006ac2:	400b      	ands	r3, r1
 8006ac4:	4927      	ldr	r1, [pc, #156]	@ (8006b64 <_strtod_l+0x594>)
 8006ac6:	4682      	mov	sl, r0
 8006ac8:	428b      	cmp	r3, r1
 8006aca:	d898      	bhi.n	80069fe <_strtod_l+0x42e>
 8006acc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006ad0:	428b      	cmp	r3, r1
 8006ad2:	bf86      	itte	hi
 8006ad4:	f04f 3aff 	movhi.w	sl, #4294967295
 8006ad8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006b68 <_strtod_l+0x598>
 8006adc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	9308      	str	r3, [sp, #32]
 8006ae4:	e07a      	b.n	8006bdc <_strtod_l+0x60c>
 8006ae6:	07e2      	lsls	r2, r4, #31
 8006ae8:	d505      	bpl.n	8006af6 <_strtod_l+0x526>
 8006aea:	9b08      	ldr	r3, [sp, #32]
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	f7f9 fda6 	bl	8000640 <__aeabi_dmul>
 8006af4:	2301      	movs	r3, #1
 8006af6:	9a08      	ldr	r2, [sp, #32]
 8006af8:	3601      	adds	r6, #1
 8006afa:	3208      	adds	r2, #8
 8006afc:	1064      	asrs	r4, r4, #1
 8006afe:	9208      	str	r2, [sp, #32]
 8006b00:	e7cd      	b.n	8006a9e <_strtod_l+0x4ce>
 8006b02:	d0ed      	beq.n	8006ae0 <_strtod_l+0x510>
 8006b04:	4264      	negs	r4, r4
 8006b06:	f014 020f 	ands.w	r2, r4, #15
 8006b0a:	d00a      	beq.n	8006b22 <_strtod_l+0x552>
 8006b0c:	4b13      	ldr	r3, [pc, #76]	@ (8006b5c <_strtod_l+0x58c>)
 8006b0e:	4650      	mov	r0, sl
 8006b10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b14:	4659      	mov	r1, fp
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	f7f9 febb 	bl	8000894 <__aeabi_ddiv>
 8006b1e:	4682      	mov	sl, r0
 8006b20:	468b      	mov	fp, r1
 8006b22:	1124      	asrs	r4, r4, #4
 8006b24:	d0dc      	beq.n	8006ae0 <_strtod_l+0x510>
 8006b26:	2c1f      	cmp	r4, #31
 8006b28:	dd20      	ble.n	8006b6c <_strtod_l+0x59c>
 8006b2a:	2400      	movs	r4, #0
 8006b2c:	46a0      	mov	r8, r4
 8006b2e:	46a1      	mov	r9, r4
 8006b30:	940a      	str	r4, [sp, #40]	@ 0x28
 8006b32:	2322      	movs	r3, #34	@ 0x22
 8006b34:	9a05      	ldr	r2, [sp, #20]
 8006b36:	f04f 0a00 	mov.w	sl, #0
 8006b3a:	f04f 0b00 	mov.w	fp, #0
 8006b3e:	6013      	str	r3, [r2, #0]
 8006b40:	e768      	b.n	8006a14 <_strtod_l+0x444>
 8006b42:	bf00      	nop
 8006b44:	080095fb 	.word	0x080095fb
 8006b48:	08009600 	.word	0x08009600
 8006b4c:	080095f2 	.word	0x080095f2
 8006b50:	080095f5 	.word	0x080095f5
 8006b54:	7ff00000 	.word	0x7ff00000
 8006b58:	080099a7 	.word	0x080099a7
 8006b5c:	08009770 	.word	0x08009770
 8006b60:	08009748 	.word	0x08009748
 8006b64:	7ca00000 	.word	0x7ca00000
 8006b68:	7fefffff 	.word	0x7fefffff
 8006b6c:	f014 0310 	ands.w	r3, r4, #16
 8006b70:	bf18      	it	ne
 8006b72:	236a      	movne	r3, #106	@ 0x6a
 8006b74:	4650      	mov	r0, sl
 8006b76:	9308      	str	r3, [sp, #32]
 8006b78:	4659      	mov	r1, fp
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	4ea9      	ldr	r6, [pc, #676]	@ (8006e24 <_strtod_l+0x854>)
 8006b7e:	07e2      	lsls	r2, r4, #31
 8006b80:	d504      	bpl.n	8006b8c <_strtod_l+0x5bc>
 8006b82:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b86:	f7f9 fd5b 	bl	8000640 <__aeabi_dmul>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	1064      	asrs	r4, r4, #1
 8006b8e:	f106 0608 	add.w	r6, r6, #8
 8006b92:	d1f4      	bne.n	8006b7e <_strtod_l+0x5ae>
 8006b94:	b10b      	cbz	r3, 8006b9a <_strtod_l+0x5ca>
 8006b96:	4682      	mov	sl, r0
 8006b98:	468b      	mov	fp, r1
 8006b9a:	9b08      	ldr	r3, [sp, #32]
 8006b9c:	b1b3      	cbz	r3, 8006bcc <_strtod_l+0x5fc>
 8006b9e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006ba2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	4659      	mov	r1, fp
 8006baa:	dd0f      	ble.n	8006bcc <_strtod_l+0x5fc>
 8006bac:	2b1f      	cmp	r3, #31
 8006bae:	dd57      	ble.n	8006c60 <_strtod_l+0x690>
 8006bb0:	2b34      	cmp	r3, #52	@ 0x34
 8006bb2:	bfd8      	it	le
 8006bb4:	f04f 33ff 	movle.w	r3, #4294967295
 8006bb8:	f04f 0a00 	mov.w	sl, #0
 8006bbc:	bfcf      	iteee	gt
 8006bbe:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006bc2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006bc6:	4093      	lslle	r3, r2
 8006bc8:	ea03 0b01 	andle.w	fp, r3, r1
 8006bcc:	2200      	movs	r2, #0
 8006bce:	2300      	movs	r3, #0
 8006bd0:	4650      	mov	r0, sl
 8006bd2:	4659      	mov	r1, fp
 8006bd4:	f7f9 ff9c 	bl	8000b10 <__aeabi_dcmpeq>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d1a6      	bne.n	8006b2a <_strtod_l+0x55a>
 8006bdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bde:	463a      	mov	r2, r7
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006be4:	462b      	mov	r3, r5
 8006be6:	9805      	ldr	r0, [sp, #20]
 8006be8:	f001 f988 	bl	8007efc <__s2b>
 8006bec:	900a      	str	r0, [sp, #40]	@ 0x28
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	f43f af05 	beq.w	80069fe <_strtod_l+0x42e>
 8006bf4:	2400      	movs	r4, #0
 8006bf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bf8:	eba9 0308 	sub.w	r3, r9, r8
 8006bfc:	2a00      	cmp	r2, #0
 8006bfe:	bfa8      	it	ge
 8006c00:	2300      	movge	r3, #0
 8006c02:	46a0      	mov	r8, r4
 8006c04:	9312      	str	r3, [sp, #72]	@ 0x48
 8006c06:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006c0a:	9316      	str	r3, [sp, #88]	@ 0x58
 8006c0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c0e:	9805      	ldr	r0, [sp, #20]
 8006c10:	6859      	ldr	r1, [r3, #4]
 8006c12:	f001 f8cb 	bl	8007dac <_Balloc>
 8006c16:	4681      	mov	r9, r0
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	f43f aef4 	beq.w	8006a06 <_strtod_l+0x436>
 8006c1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c20:	300c      	adds	r0, #12
 8006c22:	691a      	ldr	r2, [r3, #16]
 8006c24:	f103 010c 	add.w	r1, r3, #12
 8006c28:	3202      	adds	r2, #2
 8006c2a:	0092      	lsls	r2, r2, #2
 8006c2c:	f000 fc67 	bl	80074fe <memcpy>
 8006c30:	ab1c      	add	r3, sp, #112	@ 0x70
 8006c32:	9301      	str	r3, [sp, #4]
 8006c34:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	4652      	mov	r2, sl
 8006c3a:	465b      	mov	r3, fp
 8006c3c:	9805      	ldr	r0, [sp, #20]
 8006c3e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006c42:	f001 fc8d 	bl	8008560 <__d2b>
 8006c46:	901a      	str	r0, [sp, #104]	@ 0x68
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	f43f aedc 	beq.w	8006a06 <_strtod_l+0x436>
 8006c4e:	2101      	movs	r1, #1
 8006c50:	9805      	ldr	r0, [sp, #20]
 8006c52:	f001 f9e9 	bl	8008028 <__i2b>
 8006c56:	4680      	mov	r8, r0
 8006c58:	b948      	cbnz	r0, 8006c6e <_strtod_l+0x69e>
 8006c5a:	f04f 0800 	mov.w	r8, #0
 8006c5e:	e6d2      	b.n	8006a06 <_strtod_l+0x436>
 8006c60:	f04f 32ff 	mov.w	r2, #4294967295
 8006c64:	fa02 f303 	lsl.w	r3, r2, r3
 8006c68:	ea03 0a0a 	and.w	sl, r3, sl
 8006c6c:	e7ae      	b.n	8006bcc <_strtod_l+0x5fc>
 8006c6e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006c70:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006c72:	2d00      	cmp	r5, #0
 8006c74:	bfab      	itete	ge
 8006c76:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006c78:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006c7a:	18ef      	addge	r7, r5, r3
 8006c7c:	1b5e      	sublt	r6, r3, r5
 8006c7e:	9b08      	ldr	r3, [sp, #32]
 8006c80:	bfa8      	it	ge
 8006c82:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006c84:	eba5 0503 	sub.w	r5, r5, r3
 8006c88:	4415      	add	r5, r2
 8006c8a:	4b67      	ldr	r3, [pc, #412]	@ (8006e28 <_strtod_l+0x858>)
 8006c8c:	f105 35ff 	add.w	r5, r5, #4294967295
 8006c90:	bfb8      	it	lt
 8006c92:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006c94:	429d      	cmp	r5, r3
 8006c96:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006c9a:	da50      	bge.n	8006d3e <_strtod_l+0x76e>
 8006c9c:	1b5b      	subs	r3, r3, r5
 8006c9e:	2b1f      	cmp	r3, #31
 8006ca0:	f04f 0101 	mov.w	r1, #1
 8006ca4:	eba2 0203 	sub.w	r2, r2, r3
 8006ca8:	dc3d      	bgt.n	8006d26 <_strtod_l+0x756>
 8006caa:	fa01 f303 	lsl.w	r3, r1, r3
 8006cae:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	9310      	str	r3, [sp, #64]	@ 0x40
 8006cb4:	18bd      	adds	r5, r7, r2
 8006cb6:	9b08      	ldr	r3, [sp, #32]
 8006cb8:	42af      	cmp	r7, r5
 8006cba:	4416      	add	r6, r2
 8006cbc:	441e      	add	r6, r3
 8006cbe:	463b      	mov	r3, r7
 8006cc0:	bfa8      	it	ge
 8006cc2:	462b      	movge	r3, r5
 8006cc4:	42b3      	cmp	r3, r6
 8006cc6:	bfa8      	it	ge
 8006cc8:	4633      	movge	r3, r6
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	bfc2      	ittt	gt
 8006cce:	1aed      	subgt	r5, r5, r3
 8006cd0:	1af6      	subgt	r6, r6, r3
 8006cd2:	1aff      	subgt	r7, r7, r3
 8006cd4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	dd16      	ble.n	8006d08 <_strtod_l+0x738>
 8006cda:	4641      	mov	r1, r8
 8006cdc:	461a      	mov	r2, r3
 8006cde:	9805      	ldr	r0, [sp, #20]
 8006ce0:	f001 fa60 	bl	80081a4 <__pow5mult>
 8006ce4:	4680      	mov	r8, r0
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d0b7      	beq.n	8006c5a <_strtod_l+0x68a>
 8006cea:	4601      	mov	r1, r0
 8006cec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006cee:	9805      	ldr	r0, [sp, #20]
 8006cf0:	f001 f9b0 	bl	8008054 <__multiply>
 8006cf4:	900e      	str	r0, [sp, #56]	@ 0x38
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f43f ae85 	beq.w	8006a06 <_strtod_l+0x436>
 8006cfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006cfe:	9805      	ldr	r0, [sp, #20]
 8006d00:	f001 f894 	bl	8007e2c <_Bfree>
 8006d04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d06:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d08:	2d00      	cmp	r5, #0
 8006d0a:	dc1d      	bgt.n	8006d48 <_strtod_l+0x778>
 8006d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	dd23      	ble.n	8006d5a <_strtod_l+0x78a>
 8006d12:	4649      	mov	r1, r9
 8006d14:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006d16:	9805      	ldr	r0, [sp, #20]
 8006d18:	f001 fa44 	bl	80081a4 <__pow5mult>
 8006d1c:	4681      	mov	r9, r0
 8006d1e:	b9e0      	cbnz	r0, 8006d5a <_strtod_l+0x78a>
 8006d20:	f04f 0900 	mov.w	r9, #0
 8006d24:	e66f      	b.n	8006a06 <_strtod_l+0x436>
 8006d26:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006d2a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006d2e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006d32:	35e2      	adds	r5, #226	@ 0xe2
 8006d34:	fa01 f305 	lsl.w	r3, r1, r5
 8006d38:	9310      	str	r3, [sp, #64]	@ 0x40
 8006d3a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006d3c:	e7ba      	b.n	8006cb4 <_strtod_l+0x6e4>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	9310      	str	r3, [sp, #64]	@ 0x40
 8006d42:	2301      	movs	r3, #1
 8006d44:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d46:	e7b5      	b.n	8006cb4 <_strtod_l+0x6e4>
 8006d48:	462a      	mov	r2, r5
 8006d4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d4c:	9805      	ldr	r0, [sp, #20]
 8006d4e:	f001 fa83 	bl	8008258 <__lshift>
 8006d52:	901a      	str	r0, [sp, #104]	@ 0x68
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d1d9      	bne.n	8006d0c <_strtod_l+0x73c>
 8006d58:	e655      	b.n	8006a06 <_strtod_l+0x436>
 8006d5a:	2e00      	cmp	r6, #0
 8006d5c:	dd07      	ble.n	8006d6e <_strtod_l+0x79e>
 8006d5e:	4649      	mov	r1, r9
 8006d60:	4632      	mov	r2, r6
 8006d62:	9805      	ldr	r0, [sp, #20]
 8006d64:	f001 fa78 	bl	8008258 <__lshift>
 8006d68:	4681      	mov	r9, r0
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d0d8      	beq.n	8006d20 <_strtod_l+0x750>
 8006d6e:	2f00      	cmp	r7, #0
 8006d70:	dd08      	ble.n	8006d84 <_strtod_l+0x7b4>
 8006d72:	4641      	mov	r1, r8
 8006d74:	463a      	mov	r2, r7
 8006d76:	9805      	ldr	r0, [sp, #20]
 8006d78:	f001 fa6e 	bl	8008258 <__lshift>
 8006d7c:	4680      	mov	r8, r0
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	f43f ae41 	beq.w	8006a06 <_strtod_l+0x436>
 8006d84:	464a      	mov	r2, r9
 8006d86:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d88:	9805      	ldr	r0, [sp, #20]
 8006d8a:	f001 faed 	bl	8008368 <__mdiff>
 8006d8e:	4604      	mov	r4, r0
 8006d90:	2800      	cmp	r0, #0
 8006d92:	f43f ae38 	beq.w	8006a06 <_strtod_l+0x436>
 8006d96:	68c3      	ldr	r3, [r0, #12]
 8006d98:	4641      	mov	r1, r8
 8006d9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	60c3      	str	r3, [r0, #12]
 8006da0:	f001 fac6 	bl	8008330 <__mcmp>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	da45      	bge.n	8006e34 <_strtod_l+0x864>
 8006da8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006daa:	ea53 030a 	orrs.w	r3, r3, sl
 8006dae:	d16b      	bne.n	8006e88 <_strtod_l+0x8b8>
 8006db0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d167      	bne.n	8006e88 <_strtod_l+0x8b8>
 8006db8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006dbc:	0d1b      	lsrs	r3, r3, #20
 8006dbe:	051b      	lsls	r3, r3, #20
 8006dc0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006dc4:	d960      	bls.n	8006e88 <_strtod_l+0x8b8>
 8006dc6:	6963      	ldr	r3, [r4, #20]
 8006dc8:	b913      	cbnz	r3, 8006dd0 <_strtod_l+0x800>
 8006dca:	6923      	ldr	r3, [r4, #16]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	dd5b      	ble.n	8006e88 <_strtod_l+0x8b8>
 8006dd0:	4621      	mov	r1, r4
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	9805      	ldr	r0, [sp, #20]
 8006dd6:	f001 fa3f 	bl	8008258 <__lshift>
 8006dda:	4641      	mov	r1, r8
 8006ddc:	4604      	mov	r4, r0
 8006dde:	f001 faa7 	bl	8008330 <__mcmp>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	dd50      	ble.n	8006e88 <_strtod_l+0x8b8>
 8006de6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006dea:	9a08      	ldr	r2, [sp, #32]
 8006dec:	0d1b      	lsrs	r3, r3, #20
 8006dee:	051b      	lsls	r3, r3, #20
 8006df0:	2a00      	cmp	r2, #0
 8006df2:	d06a      	beq.n	8006eca <_strtod_l+0x8fa>
 8006df4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006df8:	d867      	bhi.n	8006eca <_strtod_l+0x8fa>
 8006dfa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006dfe:	f67f ae98 	bls.w	8006b32 <_strtod_l+0x562>
 8006e02:	4650      	mov	r0, sl
 8006e04:	4659      	mov	r1, fp
 8006e06:	4b09      	ldr	r3, [pc, #36]	@ (8006e2c <_strtod_l+0x85c>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f7f9 fc19 	bl	8000640 <__aeabi_dmul>
 8006e0e:	4b08      	ldr	r3, [pc, #32]	@ (8006e30 <_strtod_l+0x860>)
 8006e10:	4682      	mov	sl, r0
 8006e12:	400b      	ands	r3, r1
 8006e14:	468b      	mov	fp, r1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f47f ae00 	bne.w	8006a1c <_strtod_l+0x44c>
 8006e1c:	2322      	movs	r3, #34	@ 0x22
 8006e1e:	9a05      	ldr	r2, [sp, #20]
 8006e20:	6013      	str	r3, [r2, #0]
 8006e22:	e5fb      	b.n	8006a1c <_strtod_l+0x44c>
 8006e24:	08009628 	.word	0x08009628
 8006e28:	fffffc02 	.word	0xfffffc02
 8006e2c:	39500000 	.word	0x39500000
 8006e30:	7ff00000 	.word	0x7ff00000
 8006e34:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006e38:	d165      	bne.n	8006f06 <_strtod_l+0x936>
 8006e3a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006e3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e40:	b35a      	cbz	r2, 8006e9a <_strtod_l+0x8ca>
 8006e42:	4a99      	ldr	r2, [pc, #612]	@ (80070a8 <_strtod_l+0xad8>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d12b      	bne.n	8006ea0 <_strtod_l+0x8d0>
 8006e48:	9b08      	ldr	r3, [sp, #32]
 8006e4a:	4651      	mov	r1, sl
 8006e4c:	b303      	cbz	r3, 8006e90 <_strtod_l+0x8c0>
 8006e4e:	465a      	mov	r2, fp
 8006e50:	4b96      	ldr	r3, [pc, #600]	@ (80070ac <_strtod_l+0xadc>)
 8006e52:	4013      	ands	r3, r2
 8006e54:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006e58:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5c:	d81b      	bhi.n	8006e96 <_strtod_l+0x8c6>
 8006e5e:	0d1b      	lsrs	r3, r3, #20
 8006e60:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006e64:	fa02 f303 	lsl.w	r3, r2, r3
 8006e68:	4299      	cmp	r1, r3
 8006e6a:	d119      	bne.n	8006ea0 <_strtod_l+0x8d0>
 8006e6c:	4b90      	ldr	r3, [pc, #576]	@ (80070b0 <_strtod_l+0xae0>)
 8006e6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d102      	bne.n	8006e7a <_strtod_l+0x8aa>
 8006e74:	3101      	adds	r1, #1
 8006e76:	f43f adc6 	beq.w	8006a06 <_strtod_l+0x436>
 8006e7a:	f04f 0a00 	mov.w	sl, #0
 8006e7e:	4b8b      	ldr	r3, [pc, #556]	@ (80070ac <_strtod_l+0xadc>)
 8006e80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e82:	401a      	ands	r2, r3
 8006e84:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006e88:	9b08      	ldr	r3, [sp, #32]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1b9      	bne.n	8006e02 <_strtod_l+0x832>
 8006e8e:	e5c5      	b.n	8006a1c <_strtod_l+0x44c>
 8006e90:	f04f 33ff 	mov.w	r3, #4294967295
 8006e94:	e7e8      	b.n	8006e68 <_strtod_l+0x898>
 8006e96:	4613      	mov	r3, r2
 8006e98:	e7e6      	b.n	8006e68 <_strtod_l+0x898>
 8006e9a:	ea53 030a 	orrs.w	r3, r3, sl
 8006e9e:	d0a2      	beq.n	8006de6 <_strtod_l+0x816>
 8006ea0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ea2:	b1db      	cbz	r3, 8006edc <_strtod_l+0x90c>
 8006ea4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ea6:	4213      	tst	r3, r2
 8006ea8:	d0ee      	beq.n	8006e88 <_strtod_l+0x8b8>
 8006eaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006eac:	4650      	mov	r0, sl
 8006eae:	4659      	mov	r1, fp
 8006eb0:	9a08      	ldr	r2, [sp, #32]
 8006eb2:	b1bb      	cbz	r3, 8006ee4 <_strtod_l+0x914>
 8006eb4:	f7ff fb6b 	bl	800658e <sulp>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ec0:	f7f9 fa08 	bl	80002d4 <__adddf3>
 8006ec4:	4682      	mov	sl, r0
 8006ec6:	468b      	mov	fp, r1
 8006ec8:	e7de      	b.n	8006e88 <_strtod_l+0x8b8>
 8006eca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006ece:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006ed2:	f04f 3aff 	mov.w	sl, #4294967295
 8006ed6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006eda:	e7d5      	b.n	8006e88 <_strtod_l+0x8b8>
 8006edc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ede:	ea13 0f0a 	tst.w	r3, sl
 8006ee2:	e7e1      	b.n	8006ea8 <_strtod_l+0x8d8>
 8006ee4:	f7ff fb53 	bl	800658e <sulp>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ef0:	f7f9 f9ee 	bl	80002d0 <__aeabi_dsub>
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	4682      	mov	sl, r0
 8006efa:	468b      	mov	fp, r1
 8006efc:	f7f9 fe08 	bl	8000b10 <__aeabi_dcmpeq>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d0c1      	beq.n	8006e88 <_strtod_l+0x8b8>
 8006f04:	e615      	b.n	8006b32 <_strtod_l+0x562>
 8006f06:	4641      	mov	r1, r8
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f001 fb81 	bl	8008610 <__ratio>
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006f14:	4606      	mov	r6, r0
 8006f16:	460f      	mov	r7, r1
 8006f18:	f7f9 fe0e 	bl	8000b38 <__aeabi_dcmple>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	d06d      	beq.n	8006ffc <_strtod_l+0xa2c>
 8006f20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d178      	bne.n	8007018 <_strtod_l+0xa48>
 8006f26:	f1ba 0f00 	cmp.w	sl, #0
 8006f2a:	d156      	bne.n	8006fda <_strtod_l+0xa0a>
 8006f2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d158      	bne.n	8006fe8 <_strtod_l+0xa18>
 8006f36:	2200      	movs	r2, #0
 8006f38:	4630      	mov	r0, r6
 8006f3a:	4639      	mov	r1, r7
 8006f3c:	4b5d      	ldr	r3, [pc, #372]	@ (80070b4 <_strtod_l+0xae4>)
 8006f3e:	f7f9 fdf1 	bl	8000b24 <__aeabi_dcmplt>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d157      	bne.n	8006ff6 <_strtod_l+0xa26>
 8006f46:	4630      	mov	r0, r6
 8006f48:	4639      	mov	r1, r7
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	4b5a      	ldr	r3, [pc, #360]	@ (80070b8 <_strtod_l+0xae8>)
 8006f4e:	f7f9 fb77 	bl	8000640 <__aeabi_dmul>
 8006f52:	4606      	mov	r6, r0
 8006f54:	460f      	mov	r7, r1
 8006f56:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006f5a:	9606      	str	r6, [sp, #24]
 8006f5c:	9307      	str	r3, [sp, #28]
 8006f5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f62:	4d52      	ldr	r5, [pc, #328]	@ (80070ac <_strtod_l+0xadc>)
 8006f64:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006f68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f6a:	401d      	ands	r5, r3
 8006f6c:	4b53      	ldr	r3, [pc, #332]	@ (80070bc <_strtod_l+0xaec>)
 8006f6e:	429d      	cmp	r5, r3
 8006f70:	f040 80aa 	bne.w	80070c8 <_strtod_l+0xaf8>
 8006f74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f76:	4650      	mov	r0, sl
 8006f78:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006f7c:	4659      	mov	r1, fp
 8006f7e:	f001 fa87 	bl	8008490 <__ulp>
 8006f82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f86:	f7f9 fb5b 	bl	8000640 <__aeabi_dmul>
 8006f8a:	4652      	mov	r2, sl
 8006f8c:	465b      	mov	r3, fp
 8006f8e:	f7f9 f9a1 	bl	80002d4 <__adddf3>
 8006f92:	460b      	mov	r3, r1
 8006f94:	4945      	ldr	r1, [pc, #276]	@ (80070ac <_strtod_l+0xadc>)
 8006f96:	4a4a      	ldr	r2, [pc, #296]	@ (80070c0 <_strtod_l+0xaf0>)
 8006f98:	4019      	ands	r1, r3
 8006f9a:	4291      	cmp	r1, r2
 8006f9c:	4682      	mov	sl, r0
 8006f9e:	d942      	bls.n	8007026 <_strtod_l+0xa56>
 8006fa0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006fa2:	4b43      	ldr	r3, [pc, #268]	@ (80070b0 <_strtod_l+0xae0>)
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d103      	bne.n	8006fb0 <_strtod_l+0x9e0>
 8006fa8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006faa:	3301      	adds	r3, #1
 8006fac:	f43f ad2b 	beq.w	8006a06 <_strtod_l+0x436>
 8006fb0:	f04f 3aff 	mov.w	sl, #4294967295
 8006fb4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80070b0 <_strtod_l+0xae0>
 8006fb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006fba:	9805      	ldr	r0, [sp, #20]
 8006fbc:	f000 ff36 	bl	8007e2c <_Bfree>
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	9805      	ldr	r0, [sp, #20]
 8006fc4:	f000 ff32 	bl	8007e2c <_Bfree>
 8006fc8:	4641      	mov	r1, r8
 8006fca:	9805      	ldr	r0, [sp, #20]
 8006fcc:	f000 ff2e 	bl	8007e2c <_Bfree>
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	9805      	ldr	r0, [sp, #20]
 8006fd4:	f000 ff2a 	bl	8007e2c <_Bfree>
 8006fd8:	e618      	b.n	8006c0c <_strtod_l+0x63c>
 8006fda:	f1ba 0f01 	cmp.w	sl, #1
 8006fde:	d103      	bne.n	8006fe8 <_strtod_l+0xa18>
 8006fe0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f43f ada5 	beq.w	8006b32 <_strtod_l+0x562>
 8006fe8:	2200      	movs	r2, #0
 8006fea:	4b36      	ldr	r3, [pc, #216]	@ (80070c4 <_strtod_l+0xaf4>)
 8006fec:	2600      	movs	r6, #0
 8006fee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ff2:	4f30      	ldr	r7, [pc, #192]	@ (80070b4 <_strtod_l+0xae4>)
 8006ff4:	e7b3      	b.n	8006f5e <_strtod_l+0x98e>
 8006ff6:	2600      	movs	r6, #0
 8006ff8:	4f2f      	ldr	r7, [pc, #188]	@ (80070b8 <_strtod_l+0xae8>)
 8006ffa:	e7ac      	b.n	8006f56 <_strtod_l+0x986>
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	4639      	mov	r1, r7
 8007000:	4b2d      	ldr	r3, [pc, #180]	@ (80070b8 <_strtod_l+0xae8>)
 8007002:	2200      	movs	r2, #0
 8007004:	f7f9 fb1c 	bl	8000640 <__aeabi_dmul>
 8007008:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800700a:	4606      	mov	r6, r0
 800700c:	460f      	mov	r7, r1
 800700e:	2b00      	cmp	r3, #0
 8007010:	d0a1      	beq.n	8006f56 <_strtod_l+0x986>
 8007012:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007016:	e7a2      	b.n	8006f5e <_strtod_l+0x98e>
 8007018:	2200      	movs	r2, #0
 800701a:	4b26      	ldr	r3, [pc, #152]	@ (80070b4 <_strtod_l+0xae4>)
 800701c:	4616      	mov	r6, r2
 800701e:	461f      	mov	r7, r3
 8007020:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007024:	e79b      	b.n	8006f5e <_strtod_l+0x98e>
 8007026:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800702a:	9b08      	ldr	r3, [sp, #32]
 800702c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1c1      	bne.n	8006fb8 <_strtod_l+0x9e8>
 8007034:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007038:	0d1b      	lsrs	r3, r3, #20
 800703a:	051b      	lsls	r3, r3, #20
 800703c:	429d      	cmp	r5, r3
 800703e:	d1bb      	bne.n	8006fb8 <_strtod_l+0x9e8>
 8007040:	4630      	mov	r0, r6
 8007042:	4639      	mov	r1, r7
 8007044:	f7f9 ffb0 	bl	8000fa8 <__aeabi_d2lz>
 8007048:	f7f9 facc 	bl	80005e4 <__aeabi_l2d>
 800704c:	4602      	mov	r2, r0
 800704e:	460b      	mov	r3, r1
 8007050:	4630      	mov	r0, r6
 8007052:	4639      	mov	r1, r7
 8007054:	f7f9 f93c 	bl	80002d0 <__aeabi_dsub>
 8007058:	460b      	mov	r3, r1
 800705a:	4602      	mov	r2, r0
 800705c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007060:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007066:	ea46 060a 	orr.w	r6, r6, sl
 800706a:	431e      	orrs	r6, r3
 800706c:	d069      	beq.n	8007142 <_strtod_l+0xb72>
 800706e:	a30a      	add	r3, pc, #40	@ (adr r3, 8007098 <_strtod_l+0xac8>)
 8007070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007074:	f7f9 fd56 	bl	8000b24 <__aeabi_dcmplt>
 8007078:	2800      	cmp	r0, #0
 800707a:	f47f accf 	bne.w	8006a1c <_strtod_l+0x44c>
 800707e:	a308      	add	r3, pc, #32	@ (adr r3, 80070a0 <_strtod_l+0xad0>)
 8007080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007084:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007088:	f7f9 fd6a 	bl	8000b60 <__aeabi_dcmpgt>
 800708c:	2800      	cmp	r0, #0
 800708e:	d093      	beq.n	8006fb8 <_strtod_l+0x9e8>
 8007090:	e4c4      	b.n	8006a1c <_strtod_l+0x44c>
 8007092:	bf00      	nop
 8007094:	f3af 8000 	nop.w
 8007098:	94a03595 	.word	0x94a03595
 800709c:	3fdfffff 	.word	0x3fdfffff
 80070a0:	35afe535 	.word	0x35afe535
 80070a4:	3fe00000 	.word	0x3fe00000
 80070a8:	000fffff 	.word	0x000fffff
 80070ac:	7ff00000 	.word	0x7ff00000
 80070b0:	7fefffff 	.word	0x7fefffff
 80070b4:	3ff00000 	.word	0x3ff00000
 80070b8:	3fe00000 	.word	0x3fe00000
 80070bc:	7fe00000 	.word	0x7fe00000
 80070c0:	7c9fffff 	.word	0x7c9fffff
 80070c4:	bff00000 	.word	0xbff00000
 80070c8:	9b08      	ldr	r3, [sp, #32]
 80070ca:	b323      	cbz	r3, 8007116 <_strtod_l+0xb46>
 80070cc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80070d0:	d821      	bhi.n	8007116 <_strtod_l+0xb46>
 80070d2:	a327      	add	r3, pc, #156	@ (adr r3, 8007170 <_strtod_l+0xba0>)
 80070d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d8:	4630      	mov	r0, r6
 80070da:	4639      	mov	r1, r7
 80070dc:	f7f9 fd2c 	bl	8000b38 <__aeabi_dcmple>
 80070e0:	b1a0      	cbz	r0, 800710c <_strtod_l+0xb3c>
 80070e2:	4639      	mov	r1, r7
 80070e4:	4630      	mov	r0, r6
 80070e6:	f7f9 fd45 	bl	8000b74 <__aeabi_d2uiz>
 80070ea:	2801      	cmp	r0, #1
 80070ec:	bf38      	it	cc
 80070ee:	2001      	movcc	r0, #1
 80070f0:	f7f9 fa2c 	bl	800054c <__aeabi_ui2d>
 80070f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070f6:	4606      	mov	r6, r0
 80070f8:	460f      	mov	r7, r1
 80070fa:	b9fb      	cbnz	r3, 800713c <_strtod_l+0xb6c>
 80070fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007100:	9014      	str	r0, [sp, #80]	@ 0x50
 8007102:	9315      	str	r3, [sp, #84]	@ 0x54
 8007104:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007108:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800710c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800710e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007112:	1b5b      	subs	r3, r3, r5
 8007114:	9311      	str	r3, [sp, #68]	@ 0x44
 8007116:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800711a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800711e:	f001 f9b7 	bl	8008490 <__ulp>
 8007122:	4602      	mov	r2, r0
 8007124:	460b      	mov	r3, r1
 8007126:	4650      	mov	r0, sl
 8007128:	4659      	mov	r1, fp
 800712a:	f7f9 fa89 	bl	8000640 <__aeabi_dmul>
 800712e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007132:	f7f9 f8cf 	bl	80002d4 <__adddf3>
 8007136:	4682      	mov	sl, r0
 8007138:	468b      	mov	fp, r1
 800713a:	e776      	b.n	800702a <_strtod_l+0xa5a>
 800713c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007140:	e7e0      	b.n	8007104 <_strtod_l+0xb34>
 8007142:	a30d      	add	r3, pc, #52	@ (adr r3, 8007178 <_strtod_l+0xba8>)
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	f7f9 fcec 	bl	8000b24 <__aeabi_dcmplt>
 800714c:	e79e      	b.n	800708c <_strtod_l+0xabc>
 800714e:	2300      	movs	r3, #0
 8007150:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007152:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007154:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	f7ff ba77 	b.w	800664a <_strtod_l+0x7a>
 800715c:	2a65      	cmp	r2, #101	@ 0x65
 800715e:	f43f ab6e 	beq.w	800683e <_strtod_l+0x26e>
 8007162:	2a45      	cmp	r2, #69	@ 0x45
 8007164:	f43f ab6b 	beq.w	800683e <_strtod_l+0x26e>
 8007168:	2301      	movs	r3, #1
 800716a:	f7ff bba6 	b.w	80068ba <_strtod_l+0x2ea>
 800716e:	bf00      	nop
 8007170:	ffc00000 	.word	0xffc00000
 8007174:	41dfffff 	.word	0x41dfffff
 8007178:	94a03595 	.word	0x94a03595
 800717c:	3fcfffff 	.word	0x3fcfffff

08007180 <strtod>:
 8007180:	460a      	mov	r2, r1
 8007182:	4601      	mov	r1, r0
 8007184:	4802      	ldr	r0, [pc, #8]	@ (8007190 <strtod+0x10>)
 8007186:	4b03      	ldr	r3, [pc, #12]	@ (8007194 <strtod+0x14>)
 8007188:	6800      	ldr	r0, [r0, #0]
 800718a:	f7ff ba21 	b.w	80065d0 <_strtod_l>
 800718e:	bf00      	nop
 8007190:	200001c4 	.word	0x200001c4
 8007194:	20000058 	.word	0x20000058

08007198 <std>:
 8007198:	2300      	movs	r3, #0
 800719a:	b510      	push	{r4, lr}
 800719c:	4604      	mov	r4, r0
 800719e:	e9c0 3300 	strd	r3, r3, [r0]
 80071a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071a6:	6083      	str	r3, [r0, #8]
 80071a8:	8181      	strh	r1, [r0, #12]
 80071aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80071ac:	81c2      	strh	r2, [r0, #14]
 80071ae:	6183      	str	r3, [r0, #24]
 80071b0:	4619      	mov	r1, r3
 80071b2:	2208      	movs	r2, #8
 80071b4:	305c      	adds	r0, #92	@ 0x5c
 80071b6:	f000 f914 	bl	80073e2 <memset>
 80071ba:	4b0d      	ldr	r3, [pc, #52]	@ (80071f0 <std+0x58>)
 80071bc:	6224      	str	r4, [r4, #32]
 80071be:	6263      	str	r3, [r4, #36]	@ 0x24
 80071c0:	4b0c      	ldr	r3, [pc, #48]	@ (80071f4 <std+0x5c>)
 80071c2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80071c4:	4b0c      	ldr	r3, [pc, #48]	@ (80071f8 <std+0x60>)
 80071c6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80071c8:	4b0c      	ldr	r3, [pc, #48]	@ (80071fc <std+0x64>)
 80071ca:	6323      	str	r3, [r4, #48]	@ 0x30
 80071cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007200 <std+0x68>)
 80071ce:	429c      	cmp	r4, r3
 80071d0:	d006      	beq.n	80071e0 <std+0x48>
 80071d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80071d6:	4294      	cmp	r4, r2
 80071d8:	d002      	beq.n	80071e0 <std+0x48>
 80071da:	33d0      	adds	r3, #208	@ 0xd0
 80071dc:	429c      	cmp	r4, r3
 80071de:	d105      	bne.n	80071ec <std+0x54>
 80071e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80071e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071e8:	f000 b986 	b.w	80074f8 <__retarget_lock_init_recursive>
 80071ec:	bd10      	pop	{r4, pc}
 80071ee:	bf00      	nop
 80071f0:	0800735d 	.word	0x0800735d
 80071f4:	0800737f 	.word	0x0800737f
 80071f8:	080073b7 	.word	0x080073b7
 80071fc:	080073db 	.word	0x080073db
 8007200:	20000324 	.word	0x20000324

08007204 <stdio_exit_handler>:
 8007204:	4a02      	ldr	r2, [pc, #8]	@ (8007210 <stdio_exit_handler+0xc>)
 8007206:	4903      	ldr	r1, [pc, #12]	@ (8007214 <stdio_exit_handler+0x10>)
 8007208:	4803      	ldr	r0, [pc, #12]	@ (8007218 <stdio_exit_handler+0x14>)
 800720a:	f000 b869 	b.w	80072e0 <_fwalk_sglue>
 800720e:	bf00      	nop
 8007210:	2000004c 	.word	0x2000004c
 8007214:	08008de5 	.word	0x08008de5
 8007218:	200001c8 	.word	0x200001c8

0800721c <cleanup_stdio>:
 800721c:	6841      	ldr	r1, [r0, #4]
 800721e:	4b0c      	ldr	r3, [pc, #48]	@ (8007250 <cleanup_stdio+0x34>)
 8007220:	b510      	push	{r4, lr}
 8007222:	4299      	cmp	r1, r3
 8007224:	4604      	mov	r4, r0
 8007226:	d001      	beq.n	800722c <cleanup_stdio+0x10>
 8007228:	f001 fddc 	bl	8008de4 <_fflush_r>
 800722c:	68a1      	ldr	r1, [r4, #8]
 800722e:	4b09      	ldr	r3, [pc, #36]	@ (8007254 <cleanup_stdio+0x38>)
 8007230:	4299      	cmp	r1, r3
 8007232:	d002      	beq.n	800723a <cleanup_stdio+0x1e>
 8007234:	4620      	mov	r0, r4
 8007236:	f001 fdd5 	bl	8008de4 <_fflush_r>
 800723a:	68e1      	ldr	r1, [r4, #12]
 800723c:	4b06      	ldr	r3, [pc, #24]	@ (8007258 <cleanup_stdio+0x3c>)
 800723e:	4299      	cmp	r1, r3
 8007240:	d004      	beq.n	800724c <cleanup_stdio+0x30>
 8007242:	4620      	mov	r0, r4
 8007244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007248:	f001 bdcc 	b.w	8008de4 <_fflush_r>
 800724c:	bd10      	pop	{r4, pc}
 800724e:	bf00      	nop
 8007250:	20000324 	.word	0x20000324
 8007254:	2000038c 	.word	0x2000038c
 8007258:	200003f4 	.word	0x200003f4

0800725c <global_stdio_init.part.0>:
 800725c:	b510      	push	{r4, lr}
 800725e:	4b0b      	ldr	r3, [pc, #44]	@ (800728c <global_stdio_init.part.0+0x30>)
 8007260:	4c0b      	ldr	r4, [pc, #44]	@ (8007290 <global_stdio_init.part.0+0x34>)
 8007262:	4a0c      	ldr	r2, [pc, #48]	@ (8007294 <global_stdio_init.part.0+0x38>)
 8007264:	4620      	mov	r0, r4
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	2104      	movs	r1, #4
 800726a:	2200      	movs	r2, #0
 800726c:	f7ff ff94 	bl	8007198 <std>
 8007270:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007274:	2201      	movs	r2, #1
 8007276:	2109      	movs	r1, #9
 8007278:	f7ff ff8e 	bl	8007198 <std>
 800727c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007280:	2202      	movs	r2, #2
 8007282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007286:	2112      	movs	r1, #18
 8007288:	f7ff bf86 	b.w	8007198 <std>
 800728c:	2000045c 	.word	0x2000045c
 8007290:	20000324 	.word	0x20000324
 8007294:	08007205 	.word	0x08007205

08007298 <__sfp_lock_acquire>:
 8007298:	4801      	ldr	r0, [pc, #4]	@ (80072a0 <__sfp_lock_acquire+0x8>)
 800729a:	f000 b92e 	b.w	80074fa <__retarget_lock_acquire_recursive>
 800729e:	bf00      	nop
 80072a0:	20000465 	.word	0x20000465

080072a4 <__sfp_lock_release>:
 80072a4:	4801      	ldr	r0, [pc, #4]	@ (80072ac <__sfp_lock_release+0x8>)
 80072a6:	f000 b929 	b.w	80074fc <__retarget_lock_release_recursive>
 80072aa:	bf00      	nop
 80072ac:	20000465 	.word	0x20000465

080072b0 <__sinit>:
 80072b0:	b510      	push	{r4, lr}
 80072b2:	4604      	mov	r4, r0
 80072b4:	f7ff fff0 	bl	8007298 <__sfp_lock_acquire>
 80072b8:	6a23      	ldr	r3, [r4, #32]
 80072ba:	b11b      	cbz	r3, 80072c4 <__sinit+0x14>
 80072bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072c0:	f7ff bff0 	b.w	80072a4 <__sfp_lock_release>
 80072c4:	4b04      	ldr	r3, [pc, #16]	@ (80072d8 <__sinit+0x28>)
 80072c6:	6223      	str	r3, [r4, #32]
 80072c8:	4b04      	ldr	r3, [pc, #16]	@ (80072dc <__sinit+0x2c>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1f5      	bne.n	80072bc <__sinit+0xc>
 80072d0:	f7ff ffc4 	bl	800725c <global_stdio_init.part.0>
 80072d4:	e7f2      	b.n	80072bc <__sinit+0xc>
 80072d6:	bf00      	nop
 80072d8:	0800721d 	.word	0x0800721d
 80072dc:	2000045c 	.word	0x2000045c

080072e0 <_fwalk_sglue>:
 80072e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072e4:	4607      	mov	r7, r0
 80072e6:	4688      	mov	r8, r1
 80072e8:	4614      	mov	r4, r2
 80072ea:	2600      	movs	r6, #0
 80072ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072f0:	f1b9 0901 	subs.w	r9, r9, #1
 80072f4:	d505      	bpl.n	8007302 <_fwalk_sglue+0x22>
 80072f6:	6824      	ldr	r4, [r4, #0]
 80072f8:	2c00      	cmp	r4, #0
 80072fa:	d1f7      	bne.n	80072ec <_fwalk_sglue+0xc>
 80072fc:	4630      	mov	r0, r6
 80072fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007302:	89ab      	ldrh	r3, [r5, #12]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d907      	bls.n	8007318 <_fwalk_sglue+0x38>
 8007308:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800730c:	3301      	adds	r3, #1
 800730e:	d003      	beq.n	8007318 <_fwalk_sglue+0x38>
 8007310:	4629      	mov	r1, r5
 8007312:	4638      	mov	r0, r7
 8007314:	47c0      	blx	r8
 8007316:	4306      	orrs	r6, r0
 8007318:	3568      	adds	r5, #104	@ 0x68
 800731a:	e7e9      	b.n	80072f0 <_fwalk_sglue+0x10>

0800731c <siprintf>:
 800731c:	b40e      	push	{r1, r2, r3}
 800731e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007322:	b500      	push	{lr}
 8007324:	b09c      	sub	sp, #112	@ 0x70
 8007326:	ab1d      	add	r3, sp, #116	@ 0x74
 8007328:	9002      	str	r0, [sp, #8]
 800732a:	9006      	str	r0, [sp, #24]
 800732c:	9107      	str	r1, [sp, #28]
 800732e:	9104      	str	r1, [sp, #16]
 8007330:	4808      	ldr	r0, [pc, #32]	@ (8007354 <siprintf+0x38>)
 8007332:	4909      	ldr	r1, [pc, #36]	@ (8007358 <siprintf+0x3c>)
 8007334:	f853 2b04 	ldr.w	r2, [r3], #4
 8007338:	9105      	str	r1, [sp, #20]
 800733a:	6800      	ldr	r0, [r0, #0]
 800733c:	a902      	add	r1, sp, #8
 800733e:	9301      	str	r3, [sp, #4]
 8007340:	f001 fa42 	bl	80087c8 <_svfiprintf_r>
 8007344:	2200      	movs	r2, #0
 8007346:	9b02      	ldr	r3, [sp, #8]
 8007348:	701a      	strb	r2, [r3, #0]
 800734a:	b01c      	add	sp, #112	@ 0x70
 800734c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007350:	b003      	add	sp, #12
 8007352:	4770      	bx	lr
 8007354:	200001c4 	.word	0x200001c4
 8007358:	ffff0208 	.word	0xffff0208

0800735c <__sread>:
 800735c:	b510      	push	{r4, lr}
 800735e:	460c      	mov	r4, r1
 8007360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007364:	f000 f87a 	bl	800745c <_read_r>
 8007368:	2800      	cmp	r0, #0
 800736a:	bfab      	itete	ge
 800736c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800736e:	89a3      	ldrhlt	r3, [r4, #12]
 8007370:	181b      	addge	r3, r3, r0
 8007372:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007376:	bfac      	ite	ge
 8007378:	6563      	strge	r3, [r4, #84]	@ 0x54
 800737a:	81a3      	strhlt	r3, [r4, #12]
 800737c:	bd10      	pop	{r4, pc}

0800737e <__swrite>:
 800737e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007382:	461f      	mov	r7, r3
 8007384:	898b      	ldrh	r3, [r1, #12]
 8007386:	4605      	mov	r5, r0
 8007388:	05db      	lsls	r3, r3, #23
 800738a:	460c      	mov	r4, r1
 800738c:	4616      	mov	r6, r2
 800738e:	d505      	bpl.n	800739c <__swrite+0x1e>
 8007390:	2302      	movs	r3, #2
 8007392:	2200      	movs	r2, #0
 8007394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007398:	f000 f84e 	bl	8007438 <_lseek_r>
 800739c:	89a3      	ldrh	r3, [r4, #12]
 800739e:	4632      	mov	r2, r6
 80073a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073a4:	81a3      	strh	r3, [r4, #12]
 80073a6:	4628      	mov	r0, r5
 80073a8:	463b      	mov	r3, r7
 80073aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073b2:	f000 b865 	b.w	8007480 <_write_r>

080073b6 <__sseek>:
 80073b6:	b510      	push	{r4, lr}
 80073b8:	460c      	mov	r4, r1
 80073ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073be:	f000 f83b 	bl	8007438 <_lseek_r>
 80073c2:	1c43      	adds	r3, r0, #1
 80073c4:	89a3      	ldrh	r3, [r4, #12]
 80073c6:	bf15      	itete	ne
 80073c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80073ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80073ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80073d2:	81a3      	strheq	r3, [r4, #12]
 80073d4:	bf18      	it	ne
 80073d6:	81a3      	strhne	r3, [r4, #12]
 80073d8:	bd10      	pop	{r4, pc}

080073da <__sclose>:
 80073da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073de:	f000 b81b 	b.w	8007418 <_close_r>

080073e2 <memset>:
 80073e2:	4603      	mov	r3, r0
 80073e4:	4402      	add	r2, r0
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d100      	bne.n	80073ec <memset+0xa>
 80073ea:	4770      	bx	lr
 80073ec:	f803 1b01 	strb.w	r1, [r3], #1
 80073f0:	e7f9      	b.n	80073e6 <memset+0x4>

080073f2 <strncmp>:
 80073f2:	b510      	push	{r4, lr}
 80073f4:	b16a      	cbz	r2, 8007412 <strncmp+0x20>
 80073f6:	3901      	subs	r1, #1
 80073f8:	1884      	adds	r4, r0, r2
 80073fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007402:	429a      	cmp	r2, r3
 8007404:	d103      	bne.n	800740e <strncmp+0x1c>
 8007406:	42a0      	cmp	r0, r4
 8007408:	d001      	beq.n	800740e <strncmp+0x1c>
 800740a:	2a00      	cmp	r2, #0
 800740c:	d1f5      	bne.n	80073fa <strncmp+0x8>
 800740e:	1ad0      	subs	r0, r2, r3
 8007410:	bd10      	pop	{r4, pc}
 8007412:	4610      	mov	r0, r2
 8007414:	e7fc      	b.n	8007410 <strncmp+0x1e>
	...

08007418 <_close_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	2300      	movs	r3, #0
 800741c:	4d05      	ldr	r5, [pc, #20]	@ (8007434 <_close_r+0x1c>)
 800741e:	4604      	mov	r4, r0
 8007420:	4608      	mov	r0, r1
 8007422:	602b      	str	r3, [r5, #0]
 8007424:	f7fa fca9 	bl	8001d7a <_close>
 8007428:	1c43      	adds	r3, r0, #1
 800742a:	d102      	bne.n	8007432 <_close_r+0x1a>
 800742c:	682b      	ldr	r3, [r5, #0]
 800742e:	b103      	cbz	r3, 8007432 <_close_r+0x1a>
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	bd38      	pop	{r3, r4, r5, pc}
 8007434:	20000460 	.word	0x20000460

08007438 <_lseek_r>:
 8007438:	b538      	push	{r3, r4, r5, lr}
 800743a:	4604      	mov	r4, r0
 800743c:	4608      	mov	r0, r1
 800743e:	4611      	mov	r1, r2
 8007440:	2200      	movs	r2, #0
 8007442:	4d05      	ldr	r5, [pc, #20]	@ (8007458 <_lseek_r+0x20>)
 8007444:	602a      	str	r2, [r5, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	f7fa fcbb 	bl	8001dc2 <_lseek>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d102      	bne.n	8007456 <_lseek_r+0x1e>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	b103      	cbz	r3, 8007456 <_lseek_r+0x1e>
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	bd38      	pop	{r3, r4, r5, pc}
 8007458:	20000460 	.word	0x20000460

0800745c <_read_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	4604      	mov	r4, r0
 8007460:	4608      	mov	r0, r1
 8007462:	4611      	mov	r1, r2
 8007464:	2200      	movs	r2, #0
 8007466:	4d05      	ldr	r5, [pc, #20]	@ (800747c <_read_r+0x20>)
 8007468:	602a      	str	r2, [r5, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	f7fa fc4c 	bl	8001d08 <_read>
 8007470:	1c43      	adds	r3, r0, #1
 8007472:	d102      	bne.n	800747a <_read_r+0x1e>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	b103      	cbz	r3, 800747a <_read_r+0x1e>
 8007478:	6023      	str	r3, [r4, #0]
 800747a:	bd38      	pop	{r3, r4, r5, pc}
 800747c:	20000460 	.word	0x20000460

08007480 <_write_r>:
 8007480:	b538      	push	{r3, r4, r5, lr}
 8007482:	4604      	mov	r4, r0
 8007484:	4608      	mov	r0, r1
 8007486:	4611      	mov	r1, r2
 8007488:	2200      	movs	r2, #0
 800748a:	4d05      	ldr	r5, [pc, #20]	@ (80074a0 <_write_r+0x20>)
 800748c:	602a      	str	r2, [r5, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	f7fa fc57 	bl	8001d42 <_write>
 8007494:	1c43      	adds	r3, r0, #1
 8007496:	d102      	bne.n	800749e <_write_r+0x1e>
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	b103      	cbz	r3, 800749e <_write_r+0x1e>
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	bd38      	pop	{r3, r4, r5, pc}
 80074a0:	20000460 	.word	0x20000460

080074a4 <__errno>:
 80074a4:	4b01      	ldr	r3, [pc, #4]	@ (80074ac <__errno+0x8>)
 80074a6:	6818      	ldr	r0, [r3, #0]
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	200001c4 	.word	0x200001c4

080074b0 <__libc_init_array>:
 80074b0:	b570      	push	{r4, r5, r6, lr}
 80074b2:	2600      	movs	r6, #0
 80074b4:	4d0c      	ldr	r5, [pc, #48]	@ (80074e8 <__libc_init_array+0x38>)
 80074b6:	4c0d      	ldr	r4, [pc, #52]	@ (80074ec <__libc_init_array+0x3c>)
 80074b8:	1b64      	subs	r4, r4, r5
 80074ba:	10a4      	asrs	r4, r4, #2
 80074bc:	42a6      	cmp	r6, r4
 80074be:	d109      	bne.n	80074d4 <__libc_init_array+0x24>
 80074c0:	f002 f814 	bl	80094ec <_init>
 80074c4:	2600      	movs	r6, #0
 80074c6:	4d0a      	ldr	r5, [pc, #40]	@ (80074f0 <__libc_init_array+0x40>)
 80074c8:	4c0a      	ldr	r4, [pc, #40]	@ (80074f4 <__libc_init_array+0x44>)
 80074ca:	1b64      	subs	r4, r4, r5
 80074cc:	10a4      	asrs	r4, r4, #2
 80074ce:	42a6      	cmp	r6, r4
 80074d0:	d105      	bne.n	80074de <__libc_init_array+0x2e>
 80074d2:	bd70      	pop	{r4, r5, r6, pc}
 80074d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80074d8:	4798      	blx	r3
 80074da:	3601      	adds	r6, #1
 80074dc:	e7ee      	b.n	80074bc <__libc_init_array+0xc>
 80074de:	f855 3b04 	ldr.w	r3, [r5], #4
 80074e2:	4798      	blx	r3
 80074e4:	3601      	adds	r6, #1
 80074e6:	e7f2      	b.n	80074ce <__libc_init_array+0x1e>
 80074e8:	080099b0 	.word	0x080099b0
 80074ec:	080099b0 	.word	0x080099b0
 80074f0:	080099b0 	.word	0x080099b0
 80074f4:	080099b4 	.word	0x080099b4

080074f8 <__retarget_lock_init_recursive>:
 80074f8:	4770      	bx	lr

080074fa <__retarget_lock_acquire_recursive>:
 80074fa:	4770      	bx	lr

080074fc <__retarget_lock_release_recursive>:
 80074fc:	4770      	bx	lr

080074fe <memcpy>:
 80074fe:	440a      	add	r2, r1
 8007500:	4291      	cmp	r1, r2
 8007502:	f100 33ff 	add.w	r3, r0, #4294967295
 8007506:	d100      	bne.n	800750a <memcpy+0xc>
 8007508:	4770      	bx	lr
 800750a:	b510      	push	{r4, lr}
 800750c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007510:	4291      	cmp	r1, r2
 8007512:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007516:	d1f9      	bne.n	800750c <memcpy+0xe>
 8007518:	bd10      	pop	{r4, pc}
	...

0800751c <nan>:
 800751c:	2000      	movs	r0, #0
 800751e:	4901      	ldr	r1, [pc, #4]	@ (8007524 <nan+0x8>)
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	7ff80000 	.word	0x7ff80000

08007528 <_free_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4605      	mov	r5, r0
 800752c:	2900      	cmp	r1, #0
 800752e:	d040      	beq.n	80075b2 <_free_r+0x8a>
 8007530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007534:	1f0c      	subs	r4, r1, #4
 8007536:	2b00      	cmp	r3, #0
 8007538:	bfb8      	it	lt
 800753a:	18e4      	addlt	r4, r4, r3
 800753c:	f000 fc2a 	bl	8007d94 <__malloc_lock>
 8007540:	4a1c      	ldr	r2, [pc, #112]	@ (80075b4 <_free_r+0x8c>)
 8007542:	6813      	ldr	r3, [r2, #0]
 8007544:	b933      	cbnz	r3, 8007554 <_free_r+0x2c>
 8007546:	6063      	str	r3, [r4, #4]
 8007548:	6014      	str	r4, [r2, #0]
 800754a:	4628      	mov	r0, r5
 800754c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007550:	f000 bc26 	b.w	8007da0 <__malloc_unlock>
 8007554:	42a3      	cmp	r3, r4
 8007556:	d908      	bls.n	800756a <_free_r+0x42>
 8007558:	6820      	ldr	r0, [r4, #0]
 800755a:	1821      	adds	r1, r4, r0
 800755c:	428b      	cmp	r3, r1
 800755e:	bf01      	itttt	eq
 8007560:	6819      	ldreq	r1, [r3, #0]
 8007562:	685b      	ldreq	r3, [r3, #4]
 8007564:	1809      	addeq	r1, r1, r0
 8007566:	6021      	streq	r1, [r4, #0]
 8007568:	e7ed      	b.n	8007546 <_free_r+0x1e>
 800756a:	461a      	mov	r2, r3
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	b10b      	cbz	r3, 8007574 <_free_r+0x4c>
 8007570:	42a3      	cmp	r3, r4
 8007572:	d9fa      	bls.n	800756a <_free_r+0x42>
 8007574:	6811      	ldr	r1, [r2, #0]
 8007576:	1850      	adds	r0, r2, r1
 8007578:	42a0      	cmp	r0, r4
 800757a:	d10b      	bne.n	8007594 <_free_r+0x6c>
 800757c:	6820      	ldr	r0, [r4, #0]
 800757e:	4401      	add	r1, r0
 8007580:	1850      	adds	r0, r2, r1
 8007582:	4283      	cmp	r3, r0
 8007584:	6011      	str	r1, [r2, #0]
 8007586:	d1e0      	bne.n	800754a <_free_r+0x22>
 8007588:	6818      	ldr	r0, [r3, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	4408      	add	r0, r1
 800758e:	6010      	str	r0, [r2, #0]
 8007590:	6053      	str	r3, [r2, #4]
 8007592:	e7da      	b.n	800754a <_free_r+0x22>
 8007594:	d902      	bls.n	800759c <_free_r+0x74>
 8007596:	230c      	movs	r3, #12
 8007598:	602b      	str	r3, [r5, #0]
 800759a:	e7d6      	b.n	800754a <_free_r+0x22>
 800759c:	6820      	ldr	r0, [r4, #0]
 800759e:	1821      	adds	r1, r4, r0
 80075a0:	428b      	cmp	r3, r1
 80075a2:	bf01      	itttt	eq
 80075a4:	6819      	ldreq	r1, [r3, #0]
 80075a6:	685b      	ldreq	r3, [r3, #4]
 80075a8:	1809      	addeq	r1, r1, r0
 80075aa:	6021      	streq	r1, [r4, #0]
 80075ac:	6063      	str	r3, [r4, #4]
 80075ae:	6054      	str	r4, [r2, #4]
 80075b0:	e7cb      	b.n	800754a <_free_r+0x22>
 80075b2:	bd38      	pop	{r3, r4, r5, pc}
 80075b4:	2000046c 	.word	0x2000046c

080075b8 <rshift>:
 80075b8:	6903      	ldr	r3, [r0, #16]
 80075ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80075c2:	f100 0414 	add.w	r4, r0, #20
 80075c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80075ca:	dd46      	ble.n	800765a <rshift+0xa2>
 80075cc:	f011 011f 	ands.w	r1, r1, #31
 80075d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80075d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80075d8:	d10c      	bne.n	80075f4 <rshift+0x3c>
 80075da:	4629      	mov	r1, r5
 80075dc:	f100 0710 	add.w	r7, r0, #16
 80075e0:	42b1      	cmp	r1, r6
 80075e2:	d335      	bcc.n	8007650 <rshift+0x98>
 80075e4:	1a9b      	subs	r3, r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	1eea      	subs	r2, r5, #3
 80075ea:	4296      	cmp	r6, r2
 80075ec:	bf38      	it	cc
 80075ee:	2300      	movcc	r3, #0
 80075f0:	4423      	add	r3, r4
 80075f2:	e015      	b.n	8007620 <rshift+0x68>
 80075f4:	46a1      	mov	r9, r4
 80075f6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80075fa:	f1c1 0820 	rsb	r8, r1, #32
 80075fe:	40cf      	lsrs	r7, r1
 8007600:	f105 0e04 	add.w	lr, r5, #4
 8007604:	4576      	cmp	r6, lr
 8007606:	46f4      	mov	ip, lr
 8007608:	d816      	bhi.n	8007638 <rshift+0x80>
 800760a:	1a9a      	subs	r2, r3, r2
 800760c:	0092      	lsls	r2, r2, #2
 800760e:	3a04      	subs	r2, #4
 8007610:	3501      	adds	r5, #1
 8007612:	42ae      	cmp	r6, r5
 8007614:	bf38      	it	cc
 8007616:	2200      	movcc	r2, #0
 8007618:	18a3      	adds	r3, r4, r2
 800761a:	50a7      	str	r7, [r4, r2]
 800761c:	b107      	cbz	r7, 8007620 <rshift+0x68>
 800761e:	3304      	adds	r3, #4
 8007620:	42a3      	cmp	r3, r4
 8007622:	eba3 0204 	sub.w	r2, r3, r4
 8007626:	bf08      	it	eq
 8007628:	2300      	moveq	r3, #0
 800762a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800762e:	6102      	str	r2, [r0, #16]
 8007630:	bf08      	it	eq
 8007632:	6143      	streq	r3, [r0, #20]
 8007634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007638:	f8dc c000 	ldr.w	ip, [ip]
 800763c:	fa0c fc08 	lsl.w	ip, ip, r8
 8007640:	ea4c 0707 	orr.w	r7, ip, r7
 8007644:	f849 7b04 	str.w	r7, [r9], #4
 8007648:	f85e 7b04 	ldr.w	r7, [lr], #4
 800764c:	40cf      	lsrs	r7, r1
 800764e:	e7d9      	b.n	8007604 <rshift+0x4c>
 8007650:	f851 cb04 	ldr.w	ip, [r1], #4
 8007654:	f847 cf04 	str.w	ip, [r7, #4]!
 8007658:	e7c2      	b.n	80075e0 <rshift+0x28>
 800765a:	4623      	mov	r3, r4
 800765c:	e7e0      	b.n	8007620 <rshift+0x68>

0800765e <__hexdig_fun>:
 800765e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007662:	2b09      	cmp	r3, #9
 8007664:	d802      	bhi.n	800766c <__hexdig_fun+0xe>
 8007666:	3820      	subs	r0, #32
 8007668:	b2c0      	uxtb	r0, r0
 800766a:	4770      	bx	lr
 800766c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007670:	2b05      	cmp	r3, #5
 8007672:	d801      	bhi.n	8007678 <__hexdig_fun+0x1a>
 8007674:	3847      	subs	r0, #71	@ 0x47
 8007676:	e7f7      	b.n	8007668 <__hexdig_fun+0xa>
 8007678:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800767c:	2b05      	cmp	r3, #5
 800767e:	d801      	bhi.n	8007684 <__hexdig_fun+0x26>
 8007680:	3827      	subs	r0, #39	@ 0x27
 8007682:	e7f1      	b.n	8007668 <__hexdig_fun+0xa>
 8007684:	2000      	movs	r0, #0
 8007686:	4770      	bx	lr

08007688 <__gethex>:
 8007688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768c:	468a      	mov	sl, r1
 800768e:	4690      	mov	r8, r2
 8007690:	b085      	sub	sp, #20
 8007692:	9302      	str	r3, [sp, #8]
 8007694:	680b      	ldr	r3, [r1, #0]
 8007696:	9001      	str	r0, [sp, #4]
 8007698:	1c9c      	adds	r4, r3, #2
 800769a:	46a1      	mov	r9, r4
 800769c:	f814 0b01 	ldrb.w	r0, [r4], #1
 80076a0:	2830      	cmp	r0, #48	@ 0x30
 80076a2:	d0fa      	beq.n	800769a <__gethex+0x12>
 80076a4:	eba9 0303 	sub.w	r3, r9, r3
 80076a8:	f1a3 0b02 	sub.w	fp, r3, #2
 80076ac:	f7ff ffd7 	bl	800765e <__hexdig_fun>
 80076b0:	4605      	mov	r5, r0
 80076b2:	2800      	cmp	r0, #0
 80076b4:	d168      	bne.n	8007788 <__gethex+0x100>
 80076b6:	2201      	movs	r2, #1
 80076b8:	4648      	mov	r0, r9
 80076ba:	499f      	ldr	r1, [pc, #636]	@ (8007938 <__gethex+0x2b0>)
 80076bc:	f7ff fe99 	bl	80073f2 <strncmp>
 80076c0:	4607      	mov	r7, r0
 80076c2:	2800      	cmp	r0, #0
 80076c4:	d167      	bne.n	8007796 <__gethex+0x10e>
 80076c6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80076ca:	4626      	mov	r6, r4
 80076cc:	f7ff ffc7 	bl	800765e <__hexdig_fun>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d062      	beq.n	800779a <__gethex+0x112>
 80076d4:	4623      	mov	r3, r4
 80076d6:	7818      	ldrb	r0, [r3, #0]
 80076d8:	4699      	mov	r9, r3
 80076da:	2830      	cmp	r0, #48	@ 0x30
 80076dc:	f103 0301 	add.w	r3, r3, #1
 80076e0:	d0f9      	beq.n	80076d6 <__gethex+0x4e>
 80076e2:	f7ff ffbc 	bl	800765e <__hexdig_fun>
 80076e6:	fab0 f580 	clz	r5, r0
 80076ea:	f04f 0b01 	mov.w	fp, #1
 80076ee:	096d      	lsrs	r5, r5, #5
 80076f0:	464a      	mov	r2, r9
 80076f2:	4616      	mov	r6, r2
 80076f4:	7830      	ldrb	r0, [r6, #0]
 80076f6:	3201      	adds	r2, #1
 80076f8:	f7ff ffb1 	bl	800765e <__hexdig_fun>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d1f8      	bne.n	80076f2 <__gethex+0x6a>
 8007700:	2201      	movs	r2, #1
 8007702:	4630      	mov	r0, r6
 8007704:	498c      	ldr	r1, [pc, #560]	@ (8007938 <__gethex+0x2b0>)
 8007706:	f7ff fe74 	bl	80073f2 <strncmp>
 800770a:	2800      	cmp	r0, #0
 800770c:	d13f      	bne.n	800778e <__gethex+0x106>
 800770e:	b944      	cbnz	r4, 8007722 <__gethex+0x9a>
 8007710:	1c74      	adds	r4, r6, #1
 8007712:	4622      	mov	r2, r4
 8007714:	4616      	mov	r6, r2
 8007716:	7830      	ldrb	r0, [r6, #0]
 8007718:	3201      	adds	r2, #1
 800771a:	f7ff ffa0 	bl	800765e <__hexdig_fun>
 800771e:	2800      	cmp	r0, #0
 8007720:	d1f8      	bne.n	8007714 <__gethex+0x8c>
 8007722:	1ba4      	subs	r4, r4, r6
 8007724:	00a7      	lsls	r7, r4, #2
 8007726:	7833      	ldrb	r3, [r6, #0]
 8007728:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800772c:	2b50      	cmp	r3, #80	@ 0x50
 800772e:	d13e      	bne.n	80077ae <__gethex+0x126>
 8007730:	7873      	ldrb	r3, [r6, #1]
 8007732:	2b2b      	cmp	r3, #43	@ 0x2b
 8007734:	d033      	beq.n	800779e <__gethex+0x116>
 8007736:	2b2d      	cmp	r3, #45	@ 0x2d
 8007738:	d034      	beq.n	80077a4 <__gethex+0x11c>
 800773a:	2400      	movs	r4, #0
 800773c:	1c71      	adds	r1, r6, #1
 800773e:	7808      	ldrb	r0, [r1, #0]
 8007740:	f7ff ff8d 	bl	800765e <__hexdig_fun>
 8007744:	1e43      	subs	r3, r0, #1
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b18      	cmp	r3, #24
 800774a:	d830      	bhi.n	80077ae <__gethex+0x126>
 800774c:	f1a0 0210 	sub.w	r2, r0, #16
 8007750:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007754:	f7ff ff83 	bl	800765e <__hexdig_fun>
 8007758:	f100 3cff 	add.w	ip, r0, #4294967295
 800775c:	fa5f fc8c 	uxtb.w	ip, ip
 8007760:	f1bc 0f18 	cmp.w	ip, #24
 8007764:	f04f 030a 	mov.w	r3, #10
 8007768:	d91e      	bls.n	80077a8 <__gethex+0x120>
 800776a:	b104      	cbz	r4, 800776e <__gethex+0xe6>
 800776c:	4252      	negs	r2, r2
 800776e:	4417      	add	r7, r2
 8007770:	f8ca 1000 	str.w	r1, [sl]
 8007774:	b1ed      	cbz	r5, 80077b2 <__gethex+0x12a>
 8007776:	f1bb 0f00 	cmp.w	fp, #0
 800777a:	bf0c      	ite	eq
 800777c:	2506      	moveq	r5, #6
 800777e:	2500      	movne	r5, #0
 8007780:	4628      	mov	r0, r5
 8007782:	b005      	add	sp, #20
 8007784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007788:	2500      	movs	r5, #0
 800778a:	462c      	mov	r4, r5
 800778c:	e7b0      	b.n	80076f0 <__gethex+0x68>
 800778e:	2c00      	cmp	r4, #0
 8007790:	d1c7      	bne.n	8007722 <__gethex+0x9a>
 8007792:	4627      	mov	r7, r4
 8007794:	e7c7      	b.n	8007726 <__gethex+0x9e>
 8007796:	464e      	mov	r6, r9
 8007798:	462f      	mov	r7, r5
 800779a:	2501      	movs	r5, #1
 800779c:	e7c3      	b.n	8007726 <__gethex+0x9e>
 800779e:	2400      	movs	r4, #0
 80077a0:	1cb1      	adds	r1, r6, #2
 80077a2:	e7cc      	b.n	800773e <__gethex+0xb6>
 80077a4:	2401      	movs	r4, #1
 80077a6:	e7fb      	b.n	80077a0 <__gethex+0x118>
 80077a8:	fb03 0002 	mla	r0, r3, r2, r0
 80077ac:	e7ce      	b.n	800774c <__gethex+0xc4>
 80077ae:	4631      	mov	r1, r6
 80077b0:	e7de      	b.n	8007770 <__gethex+0xe8>
 80077b2:	4629      	mov	r1, r5
 80077b4:	eba6 0309 	sub.w	r3, r6, r9
 80077b8:	3b01      	subs	r3, #1
 80077ba:	2b07      	cmp	r3, #7
 80077bc:	dc0a      	bgt.n	80077d4 <__gethex+0x14c>
 80077be:	9801      	ldr	r0, [sp, #4]
 80077c0:	f000 faf4 	bl	8007dac <_Balloc>
 80077c4:	4604      	mov	r4, r0
 80077c6:	b940      	cbnz	r0, 80077da <__gethex+0x152>
 80077c8:	4602      	mov	r2, r0
 80077ca:	21e4      	movs	r1, #228	@ 0xe4
 80077cc:	4b5b      	ldr	r3, [pc, #364]	@ (800793c <__gethex+0x2b4>)
 80077ce:	485c      	ldr	r0, [pc, #368]	@ (8007940 <__gethex+0x2b8>)
 80077d0:	f001 fb68 	bl	8008ea4 <__assert_func>
 80077d4:	3101      	adds	r1, #1
 80077d6:	105b      	asrs	r3, r3, #1
 80077d8:	e7ef      	b.n	80077ba <__gethex+0x132>
 80077da:	2300      	movs	r3, #0
 80077dc:	f100 0a14 	add.w	sl, r0, #20
 80077e0:	4655      	mov	r5, sl
 80077e2:	469b      	mov	fp, r3
 80077e4:	45b1      	cmp	r9, r6
 80077e6:	d337      	bcc.n	8007858 <__gethex+0x1d0>
 80077e8:	f845 bb04 	str.w	fp, [r5], #4
 80077ec:	eba5 050a 	sub.w	r5, r5, sl
 80077f0:	10ad      	asrs	r5, r5, #2
 80077f2:	6125      	str	r5, [r4, #16]
 80077f4:	4658      	mov	r0, fp
 80077f6:	f000 fbcb 	bl	8007f90 <__hi0bits>
 80077fa:	016d      	lsls	r5, r5, #5
 80077fc:	f8d8 6000 	ldr.w	r6, [r8]
 8007800:	1a2d      	subs	r5, r5, r0
 8007802:	42b5      	cmp	r5, r6
 8007804:	dd54      	ble.n	80078b0 <__gethex+0x228>
 8007806:	1bad      	subs	r5, r5, r6
 8007808:	4629      	mov	r1, r5
 800780a:	4620      	mov	r0, r4
 800780c:	f000 ff53 	bl	80086b6 <__any_on>
 8007810:	4681      	mov	r9, r0
 8007812:	b178      	cbz	r0, 8007834 <__gethex+0x1ac>
 8007814:	f04f 0901 	mov.w	r9, #1
 8007818:	1e6b      	subs	r3, r5, #1
 800781a:	1159      	asrs	r1, r3, #5
 800781c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007820:	f003 021f 	and.w	r2, r3, #31
 8007824:	fa09 f202 	lsl.w	r2, r9, r2
 8007828:	420a      	tst	r2, r1
 800782a:	d003      	beq.n	8007834 <__gethex+0x1ac>
 800782c:	454b      	cmp	r3, r9
 800782e:	dc36      	bgt.n	800789e <__gethex+0x216>
 8007830:	f04f 0902 	mov.w	r9, #2
 8007834:	4629      	mov	r1, r5
 8007836:	4620      	mov	r0, r4
 8007838:	f7ff febe 	bl	80075b8 <rshift>
 800783c:	442f      	add	r7, r5
 800783e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007842:	42bb      	cmp	r3, r7
 8007844:	da42      	bge.n	80078cc <__gethex+0x244>
 8007846:	4621      	mov	r1, r4
 8007848:	9801      	ldr	r0, [sp, #4]
 800784a:	f000 faef 	bl	8007e2c <_Bfree>
 800784e:	2300      	movs	r3, #0
 8007850:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007852:	25a3      	movs	r5, #163	@ 0xa3
 8007854:	6013      	str	r3, [r2, #0]
 8007856:	e793      	b.n	8007780 <__gethex+0xf8>
 8007858:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800785c:	2a2e      	cmp	r2, #46	@ 0x2e
 800785e:	d012      	beq.n	8007886 <__gethex+0x1fe>
 8007860:	2b20      	cmp	r3, #32
 8007862:	d104      	bne.n	800786e <__gethex+0x1e6>
 8007864:	f845 bb04 	str.w	fp, [r5], #4
 8007868:	f04f 0b00 	mov.w	fp, #0
 800786c:	465b      	mov	r3, fp
 800786e:	7830      	ldrb	r0, [r6, #0]
 8007870:	9303      	str	r3, [sp, #12]
 8007872:	f7ff fef4 	bl	800765e <__hexdig_fun>
 8007876:	9b03      	ldr	r3, [sp, #12]
 8007878:	f000 000f 	and.w	r0, r0, #15
 800787c:	4098      	lsls	r0, r3
 800787e:	ea4b 0b00 	orr.w	fp, fp, r0
 8007882:	3304      	adds	r3, #4
 8007884:	e7ae      	b.n	80077e4 <__gethex+0x15c>
 8007886:	45b1      	cmp	r9, r6
 8007888:	d8ea      	bhi.n	8007860 <__gethex+0x1d8>
 800788a:	2201      	movs	r2, #1
 800788c:	4630      	mov	r0, r6
 800788e:	492a      	ldr	r1, [pc, #168]	@ (8007938 <__gethex+0x2b0>)
 8007890:	9303      	str	r3, [sp, #12]
 8007892:	f7ff fdae 	bl	80073f2 <strncmp>
 8007896:	9b03      	ldr	r3, [sp, #12]
 8007898:	2800      	cmp	r0, #0
 800789a:	d1e1      	bne.n	8007860 <__gethex+0x1d8>
 800789c:	e7a2      	b.n	80077e4 <__gethex+0x15c>
 800789e:	4620      	mov	r0, r4
 80078a0:	1ea9      	subs	r1, r5, #2
 80078a2:	f000 ff08 	bl	80086b6 <__any_on>
 80078a6:	2800      	cmp	r0, #0
 80078a8:	d0c2      	beq.n	8007830 <__gethex+0x1a8>
 80078aa:	f04f 0903 	mov.w	r9, #3
 80078ae:	e7c1      	b.n	8007834 <__gethex+0x1ac>
 80078b0:	da09      	bge.n	80078c6 <__gethex+0x23e>
 80078b2:	1b75      	subs	r5, r6, r5
 80078b4:	4621      	mov	r1, r4
 80078b6:	462a      	mov	r2, r5
 80078b8:	9801      	ldr	r0, [sp, #4]
 80078ba:	f000 fccd 	bl	8008258 <__lshift>
 80078be:	4604      	mov	r4, r0
 80078c0:	1b7f      	subs	r7, r7, r5
 80078c2:	f100 0a14 	add.w	sl, r0, #20
 80078c6:	f04f 0900 	mov.w	r9, #0
 80078ca:	e7b8      	b.n	800783e <__gethex+0x1b6>
 80078cc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80078d0:	42bd      	cmp	r5, r7
 80078d2:	dd6f      	ble.n	80079b4 <__gethex+0x32c>
 80078d4:	1bed      	subs	r5, r5, r7
 80078d6:	42ae      	cmp	r6, r5
 80078d8:	dc34      	bgt.n	8007944 <__gethex+0x2bc>
 80078da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d022      	beq.n	8007928 <__gethex+0x2a0>
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d024      	beq.n	8007930 <__gethex+0x2a8>
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d115      	bne.n	8007916 <__gethex+0x28e>
 80078ea:	42ae      	cmp	r6, r5
 80078ec:	d113      	bne.n	8007916 <__gethex+0x28e>
 80078ee:	2e01      	cmp	r6, #1
 80078f0:	d10b      	bne.n	800790a <__gethex+0x282>
 80078f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80078f6:	9a02      	ldr	r2, [sp, #8]
 80078f8:	2562      	movs	r5, #98	@ 0x62
 80078fa:	6013      	str	r3, [r2, #0]
 80078fc:	2301      	movs	r3, #1
 80078fe:	6123      	str	r3, [r4, #16]
 8007900:	f8ca 3000 	str.w	r3, [sl]
 8007904:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007906:	601c      	str	r4, [r3, #0]
 8007908:	e73a      	b.n	8007780 <__gethex+0xf8>
 800790a:	4620      	mov	r0, r4
 800790c:	1e71      	subs	r1, r6, #1
 800790e:	f000 fed2 	bl	80086b6 <__any_on>
 8007912:	2800      	cmp	r0, #0
 8007914:	d1ed      	bne.n	80078f2 <__gethex+0x26a>
 8007916:	4621      	mov	r1, r4
 8007918:	9801      	ldr	r0, [sp, #4]
 800791a:	f000 fa87 	bl	8007e2c <_Bfree>
 800791e:	2300      	movs	r3, #0
 8007920:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007922:	2550      	movs	r5, #80	@ 0x50
 8007924:	6013      	str	r3, [r2, #0]
 8007926:	e72b      	b.n	8007780 <__gethex+0xf8>
 8007928:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1f3      	bne.n	8007916 <__gethex+0x28e>
 800792e:	e7e0      	b.n	80078f2 <__gethex+0x26a>
 8007930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1dd      	bne.n	80078f2 <__gethex+0x26a>
 8007936:	e7ee      	b.n	8007916 <__gethex+0x28e>
 8007938:	080095f0 	.word	0x080095f0
 800793c:	08009658 	.word	0x08009658
 8007940:	08009669 	.word	0x08009669
 8007944:	1e6f      	subs	r7, r5, #1
 8007946:	f1b9 0f00 	cmp.w	r9, #0
 800794a:	d130      	bne.n	80079ae <__gethex+0x326>
 800794c:	b127      	cbz	r7, 8007958 <__gethex+0x2d0>
 800794e:	4639      	mov	r1, r7
 8007950:	4620      	mov	r0, r4
 8007952:	f000 feb0 	bl	80086b6 <__any_on>
 8007956:	4681      	mov	r9, r0
 8007958:	2301      	movs	r3, #1
 800795a:	4629      	mov	r1, r5
 800795c:	1b76      	subs	r6, r6, r5
 800795e:	2502      	movs	r5, #2
 8007960:	117a      	asrs	r2, r7, #5
 8007962:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007966:	f007 071f 	and.w	r7, r7, #31
 800796a:	40bb      	lsls	r3, r7
 800796c:	4213      	tst	r3, r2
 800796e:	4620      	mov	r0, r4
 8007970:	bf18      	it	ne
 8007972:	f049 0902 	orrne.w	r9, r9, #2
 8007976:	f7ff fe1f 	bl	80075b8 <rshift>
 800797a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800797e:	f1b9 0f00 	cmp.w	r9, #0
 8007982:	d047      	beq.n	8007a14 <__gethex+0x38c>
 8007984:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007988:	2b02      	cmp	r3, #2
 800798a:	d015      	beq.n	80079b8 <__gethex+0x330>
 800798c:	2b03      	cmp	r3, #3
 800798e:	d017      	beq.n	80079c0 <__gethex+0x338>
 8007990:	2b01      	cmp	r3, #1
 8007992:	d109      	bne.n	80079a8 <__gethex+0x320>
 8007994:	f019 0f02 	tst.w	r9, #2
 8007998:	d006      	beq.n	80079a8 <__gethex+0x320>
 800799a:	f8da 3000 	ldr.w	r3, [sl]
 800799e:	ea49 0903 	orr.w	r9, r9, r3
 80079a2:	f019 0f01 	tst.w	r9, #1
 80079a6:	d10e      	bne.n	80079c6 <__gethex+0x33e>
 80079a8:	f045 0510 	orr.w	r5, r5, #16
 80079ac:	e032      	b.n	8007a14 <__gethex+0x38c>
 80079ae:	f04f 0901 	mov.w	r9, #1
 80079b2:	e7d1      	b.n	8007958 <__gethex+0x2d0>
 80079b4:	2501      	movs	r5, #1
 80079b6:	e7e2      	b.n	800797e <__gethex+0x2f6>
 80079b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079ba:	f1c3 0301 	rsb	r3, r3, #1
 80079be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80079c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d0f0      	beq.n	80079a8 <__gethex+0x320>
 80079c6:	f04f 0c00 	mov.w	ip, #0
 80079ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80079ce:	f104 0314 	add.w	r3, r4, #20
 80079d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80079d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80079da:	4618      	mov	r0, r3
 80079dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80079e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80079e4:	d01b      	beq.n	8007a1e <__gethex+0x396>
 80079e6:	3201      	adds	r2, #1
 80079e8:	6002      	str	r2, [r0, #0]
 80079ea:	2d02      	cmp	r5, #2
 80079ec:	f104 0314 	add.w	r3, r4, #20
 80079f0:	d13c      	bne.n	8007a6c <__gethex+0x3e4>
 80079f2:	f8d8 2000 	ldr.w	r2, [r8]
 80079f6:	3a01      	subs	r2, #1
 80079f8:	42b2      	cmp	r2, r6
 80079fa:	d109      	bne.n	8007a10 <__gethex+0x388>
 80079fc:	2201      	movs	r2, #1
 80079fe:	1171      	asrs	r1, r6, #5
 8007a00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a04:	f006 061f 	and.w	r6, r6, #31
 8007a08:	fa02 f606 	lsl.w	r6, r2, r6
 8007a0c:	421e      	tst	r6, r3
 8007a0e:	d13a      	bne.n	8007a86 <__gethex+0x3fe>
 8007a10:	f045 0520 	orr.w	r5, r5, #32
 8007a14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a16:	601c      	str	r4, [r3, #0]
 8007a18:	9b02      	ldr	r3, [sp, #8]
 8007a1a:	601f      	str	r7, [r3, #0]
 8007a1c:	e6b0      	b.n	8007780 <__gethex+0xf8>
 8007a1e:	4299      	cmp	r1, r3
 8007a20:	f843 cc04 	str.w	ip, [r3, #-4]
 8007a24:	d8d9      	bhi.n	80079da <__gethex+0x352>
 8007a26:	68a3      	ldr	r3, [r4, #8]
 8007a28:	459b      	cmp	fp, r3
 8007a2a:	db17      	blt.n	8007a5c <__gethex+0x3d4>
 8007a2c:	6861      	ldr	r1, [r4, #4]
 8007a2e:	9801      	ldr	r0, [sp, #4]
 8007a30:	3101      	adds	r1, #1
 8007a32:	f000 f9bb 	bl	8007dac <_Balloc>
 8007a36:	4681      	mov	r9, r0
 8007a38:	b918      	cbnz	r0, 8007a42 <__gethex+0x3ba>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	2184      	movs	r1, #132	@ 0x84
 8007a3e:	4b19      	ldr	r3, [pc, #100]	@ (8007aa4 <__gethex+0x41c>)
 8007a40:	e6c5      	b.n	80077ce <__gethex+0x146>
 8007a42:	6922      	ldr	r2, [r4, #16]
 8007a44:	f104 010c 	add.w	r1, r4, #12
 8007a48:	3202      	adds	r2, #2
 8007a4a:	0092      	lsls	r2, r2, #2
 8007a4c:	300c      	adds	r0, #12
 8007a4e:	f7ff fd56 	bl	80074fe <memcpy>
 8007a52:	4621      	mov	r1, r4
 8007a54:	9801      	ldr	r0, [sp, #4]
 8007a56:	f000 f9e9 	bl	8007e2c <_Bfree>
 8007a5a:	464c      	mov	r4, r9
 8007a5c:	6923      	ldr	r3, [r4, #16]
 8007a5e:	1c5a      	adds	r2, r3, #1
 8007a60:	6122      	str	r2, [r4, #16]
 8007a62:	2201      	movs	r2, #1
 8007a64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a68:	615a      	str	r2, [r3, #20]
 8007a6a:	e7be      	b.n	80079ea <__gethex+0x362>
 8007a6c:	6922      	ldr	r2, [r4, #16]
 8007a6e:	455a      	cmp	r2, fp
 8007a70:	dd0b      	ble.n	8007a8a <__gethex+0x402>
 8007a72:	2101      	movs	r1, #1
 8007a74:	4620      	mov	r0, r4
 8007a76:	f7ff fd9f 	bl	80075b8 <rshift>
 8007a7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a7e:	3701      	adds	r7, #1
 8007a80:	42bb      	cmp	r3, r7
 8007a82:	f6ff aee0 	blt.w	8007846 <__gethex+0x1be>
 8007a86:	2501      	movs	r5, #1
 8007a88:	e7c2      	b.n	8007a10 <__gethex+0x388>
 8007a8a:	f016 061f 	ands.w	r6, r6, #31
 8007a8e:	d0fa      	beq.n	8007a86 <__gethex+0x3fe>
 8007a90:	4453      	add	r3, sl
 8007a92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007a96:	f000 fa7b 	bl	8007f90 <__hi0bits>
 8007a9a:	f1c6 0620 	rsb	r6, r6, #32
 8007a9e:	42b0      	cmp	r0, r6
 8007aa0:	dbe7      	blt.n	8007a72 <__gethex+0x3ea>
 8007aa2:	e7f0      	b.n	8007a86 <__gethex+0x3fe>
 8007aa4:	08009658 	.word	0x08009658

08007aa8 <L_shift>:
 8007aa8:	f1c2 0208 	rsb	r2, r2, #8
 8007aac:	0092      	lsls	r2, r2, #2
 8007aae:	b570      	push	{r4, r5, r6, lr}
 8007ab0:	f1c2 0620 	rsb	r6, r2, #32
 8007ab4:	6843      	ldr	r3, [r0, #4]
 8007ab6:	6804      	ldr	r4, [r0, #0]
 8007ab8:	fa03 f506 	lsl.w	r5, r3, r6
 8007abc:	432c      	orrs	r4, r5
 8007abe:	40d3      	lsrs	r3, r2
 8007ac0:	6004      	str	r4, [r0, #0]
 8007ac2:	f840 3f04 	str.w	r3, [r0, #4]!
 8007ac6:	4288      	cmp	r0, r1
 8007ac8:	d3f4      	bcc.n	8007ab4 <L_shift+0xc>
 8007aca:	bd70      	pop	{r4, r5, r6, pc}

08007acc <__match>:
 8007acc:	b530      	push	{r4, r5, lr}
 8007ace:	6803      	ldr	r3, [r0, #0]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ad6:	b914      	cbnz	r4, 8007ade <__match+0x12>
 8007ad8:	6003      	str	r3, [r0, #0]
 8007ada:	2001      	movs	r0, #1
 8007adc:	bd30      	pop	{r4, r5, pc}
 8007ade:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ae2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007ae6:	2d19      	cmp	r5, #25
 8007ae8:	bf98      	it	ls
 8007aea:	3220      	addls	r2, #32
 8007aec:	42a2      	cmp	r2, r4
 8007aee:	d0f0      	beq.n	8007ad2 <__match+0x6>
 8007af0:	2000      	movs	r0, #0
 8007af2:	e7f3      	b.n	8007adc <__match+0x10>

08007af4 <__hexnan>:
 8007af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af8:	2500      	movs	r5, #0
 8007afa:	680b      	ldr	r3, [r1, #0]
 8007afc:	4682      	mov	sl, r0
 8007afe:	115e      	asrs	r6, r3, #5
 8007b00:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007b04:	f013 031f 	ands.w	r3, r3, #31
 8007b08:	bf18      	it	ne
 8007b0a:	3604      	addne	r6, #4
 8007b0c:	1f37      	subs	r7, r6, #4
 8007b0e:	4690      	mov	r8, r2
 8007b10:	46b9      	mov	r9, r7
 8007b12:	463c      	mov	r4, r7
 8007b14:	46ab      	mov	fp, r5
 8007b16:	b087      	sub	sp, #28
 8007b18:	6801      	ldr	r1, [r0, #0]
 8007b1a:	9301      	str	r3, [sp, #4]
 8007b1c:	f846 5c04 	str.w	r5, [r6, #-4]
 8007b20:	9502      	str	r5, [sp, #8]
 8007b22:	784a      	ldrb	r2, [r1, #1]
 8007b24:	1c4b      	adds	r3, r1, #1
 8007b26:	9303      	str	r3, [sp, #12]
 8007b28:	b342      	cbz	r2, 8007b7c <__hexnan+0x88>
 8007b2a:	4610      	mov	r0, r2
 8007b2c:	9105      	str	r1, [sp, #20]
 8007b2e:	9204      	str	r2, [sp, #16]
 8007b30:	f7ff fd95 	bl	800765e <__hexdig_fun>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	d151      	bne.n	8007bdc <__hexnan+0xe8>
 8007b38:	9a04      	ldr	r2, [sp, #16]
 8007b3a:	9905      	ldr	r1, [sp, #20]
 8007b3c:	2a20      	cmp	r2, #32
 8007b3e:	d818      	bhi.n	8007b72 <__hexnan+0x7e>
 8007b40:	9b02      	ldr	r3, [sp, #8]
 8007b42:	459b      	cmp	fp, r3
 8007b44:	dd13      	ble.n	8007b6e <__hexnan+0x7a>
 8007b46:	454c      	cmp	r4, r9
 8007b48:	d206      	bcs.n	8007b58 <__hexnan+0x64>
 8007b4a:	2d07      	cmp	r5, #7
 8007b4c:	dc04      	bgt.n	8007b58 <__hexnan+0x64>
 8007b4e:	462a      	mov	r2, r5
 8007b50:	4649      	mov	r1, r9
 8007b52:	4620      	mov	r0, r4
 8007b54:	f7ff ffa8 	bl	8007aa8 <L_shift>
 8007b58:	4544      	cmp	r4, r8
 8007b5a:	d952      	bls.n	8007c02 <__hexnan+0x10e>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	f1a4 0904 	sub.w	r9, r4, #4
 8007b62:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b66:	461d      	mov	r5, r3
 8007b68:	464c      	mov	r4, r9
 8007b6a:	f8cd b008 	str.w	fp, [sp, #8]
 8007b6e:	9903      	ldr	r1, [sp, #12]
 8007b70:	e7d7      	b.n	8007b22 <__hexnan+0x2e>
 8007b72:	2a29      	cmp	r2, #41	@ 0x29
 8007b74:	d157      	bne.n	8007c26 <__hexnan+0x132>
 8007b76:	3102      	adds	r1, #2
 8007b78:	f8ca 1000 	str.w	r1, [sl]
 8007b7c:	f1bb 0f00 	cmp.w	fp, #0
 8007b80:	d051      	beq.n	8007c26 <__hexnan+0x132>
 8007b82:	454c      	cmp	r4, r9
 8007b84:	d206      	bcs.n	8007b94 <__hexnan+0xa0>
 8007b86:	2d07      	cmp	r5, #7
 8007b88:	dc04      	bgt.n	8007b94 <__hexnan+0xa0>
 8007b8a:	462a      	mov	r2, r5
 8007b8c:	4649      	mov	r1, r9
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f7ff ff8a 	bl	8007aa8 <L_shift>
 8007b94:	4544      	cmp	r4, r8
 8007b96:	d936      	bls.n	8007c06 <__hexnan+0x112>
 8007b98:	4623      	mov	r3, r4
 8007b9a:	f1a8 0204 	sub.w	r2, r8, #4
 8007b9e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007ba2:	429f      	cmp	r7, r3
 8007ba4:	f842 1f04 	str.w	r1, [r2, #4]!
 8007ba8:	d2f9      	bcs.n	8007b9e <__hexnan+0xaa>
 8007baa:	1b3b      	subs	r3, r7, r4
 8007bac:	f023 0303 	bic.w	r3, r3, #3
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	3401      	adds	r4, #1
 8007bb4:	3e03      	subs	r6, #3
 8007bb6:	42b4      	cmp	r4, r6
 8007bb8:	bf88      	it	hi
 8007bba:	2304      	movhi	r3, #4
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	4443      	add	r3, r8
 8007bc0:	f843 2b04 	str.w	r2, [r3], #4
 8007bc4:	429f      	cmp	r7, r3
 8007bc6:	d2fb      	bcs.n	8007bc0 <__hexnan+0xcc>
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	b91b      	cbnz	r3, 8007bd4 <__hexnan+0xe0>
 8007bcc:	4547      	cmp	r7, r8
 8007bce:	d128      	bne.n	8007c22 <__hexnan+0x12e>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	2005      	movs	r0, #5
 8007bd6:	b007      	add	sp, #28
 8007bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bdc:	3501      	adds	r5, #1
 8007bde:	2d08      	cmp	r5, #8
 8007be0:	f10b 0b01 	add.w	fp, fp, #1
 8007be4:	dd06      	ble.n	8007bf4 <__hexnan+0x100>
 8007be6:	4544      	cmp	r4, r8
 8007be8:	d9c1      	bls.n	8007b6e <__hexnan+0x7a>
 8007bea:	2300      	movs	r3, #0
 8007bec:	2501      	movs	r5, #1
 8007bee:	f844 3c04 	str.w	r3, [r4, #-4]
 8007bf2:	3c04      	subs	r4, #4
 8007bf4:	6822      	ldr	r2, [r4, #0]
 8007bf6:	f000 000f 	and.w	r0, r0, #15
 8007bfa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007bfe:	6020      	str	r0, [r4, #0]
 8007c00:	e7b5      	b.n	8007b6e <__hexnan+0x7a>
 8007c02:	2508      	movs	r5, #8
 8007c04:	e7b3      	b.n	8007b6e <__hexnan+0x7a>
 8007c06:	9b01      	ldr	r3, [sp, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d0dd      	beq.n	8007bc8 <__hexnan+0xd4>
 8007c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c10:	f1c3 0320 	rsb	r3, r3, #32
 8007c14:	40da      	lsrs	r2, r3
 8007c16:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	f846 3c04 	str.w	r3, [r6, #-4]
 8007c20:	e7d2      	b.n	8007bc8 <__hexnan+0xd4>
 8007c22:	3f04      	subs	r7, #4
 8007c24:	e7d0      	b.n	8007bc8 <__hexnan+0xd4>
 8007c26:	2004      	movs	r0, #4
 8007c28:	e7d5      	b.n	8007bd6 <__hexnan+0xe2>
	...

08007c2c <sbrk_aligned>:
 8007c2c:	b570      	push	{r4, r5, r6, lr}
 8007c2e:	4e0f      	ldr	r6, [pc, #60]	@ (8007c6c <sbrk_aligned+0x40>)
 8007c30:	460c      	mov	r4, r1
 8007c32:	6831      	ldr	r1, [r6, #0]
 8007c34:	4605      	mov	r5, r0
 8007c36:	b911      	cbnz	r1, 8007c3e <sbrk_aligned+0x12>
 8007c38:	f001 f916 	bl	8008e68 <_sbrk_r>
 8007c3c:	6030      	str	r0, [r6, #0]
 8007c3e:	4621      	mov	r1, r4
 8007c40:	4628      	mov	r0, r5
 8007c42:	f001 f911 	bl	8008e68 <_sbrk_r>
 8007c46:	1c43      	adds	r3, r0, #1
 8007c48:	d103      	bne.n	8007c52 <sbrk_aligned+0x26>
 8007c4a:	f04f 34ff 	mov.w	r4, #4294967295
 8007c4e:	4620      	mov	r0, r4
 8007c50:	bd70      	pop	{r4, r5, r6, pc}
 8007c52:	1cc4      	adds	r4, r0, #3
 8007c54:	f024 0403 	bic.w	r4, r4, #3
 8007c58:	42a0      	cmp	r0, r4
 8007c5a:	d0f8      	beq.n	8007c4e <sbrk_aligned+0x22>
 8007c5c:	1a21      	subs	r1, r4, r0
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f001 f902 	bl	8008e68 <_sbrk_r>
 8007c64:	3001      	adds	r0, #1
 8007c66:	d1f2      	bne.n	8007c4e <sbrk_aligned+0x22>
 8007c68:	e7ef      	b.n	8007c4a <sbrk_aligned+0x1e>
 8007c6a:	bf00      	nop
 8007c6c:	20000468 	.word	0x20000468

08007c70 <_malloc_r>:
 8007c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c74:	1ccd      	adds	r5, r1, #3
 8007c76:	f025 0503 	bic.w	r5, r5, #3
 8007c7a:	3508      	adds	r5, #8
 8007c7c:	2d0c      	cmp	r5, #12
 8007c7e:	bf38      	it	cc
 8007c80:	250c      	movcc	r5, #12
 8007c82:	2d00      	cmp	r5, #0
 8007c84:	4606      	mov	r6, r0
 8007c86:	db01      	blt.n	8007c8c <_malloc_r+0x1c>
 8007c88:	42a9      	cmp	r1, r5
 8007c8a:	d904      	bls.n	8007c96 <_malloc_r+0x26>
 8007c8c:	230c      	movs	r3, #12
 8007c8e:	6033      	str	r3, [r6, #0]
 8007c90:	2000      	movs	r0, #0
 8007c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d6c <_malloc_r+0xfc>
 8007c9a:	f000 f87b 	bl	8007d94 <__malloc_lock>
 8007c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8007ca2:	461c      	mov	r4, r3
 8007ca4:	bb44      	cbnz	r4, 8007cf8 <_malloc_r+0x88>
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	4630      	mov	r0, r6
 8007caa:	f7ff ffbf 	bl	8007c2c <sbrk_aligned>
 8007cae:	1c43      	adds	r3, r0, #1
 8007cb0:	4604      	mov	r4, r0
 8007cb2:	d158      	bne.n	8007d66 <_malloc_r+0xf6>
 8007cb4:	f8d8 4000 	ldr.w	r4, [r8]
 8007cb8:	4627      	mov	r7, r4
 8007cba:	2f00      	cmp	r7, #0
 8007cbc:	d143      	bne.n	8007d46 <_malloc_r+0xd6>
 8007cbe:	2c00      	cmp	r4, #0
 8007cc0:	d04b      	beq.n	8007d5a <_malloc_r+0xea>
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	4639      	mov	r1, r7
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	eb04 0903 	add.w	r9, r4, r3
 8007ccc:	f001 f8cc 	bl	8008e68 <_sbrk_r>
 8007cd0:	4581      	cmp	r9, r0
 8007cd2:	d142      	bne.n	8007d5a <_malloc_r+0xea>
 8007cd4:	6821      	ldr	r1, [r4, #0]
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	1a6d      	subs	r5, r5, r1
 8007cda:	4629      	mov	r1, r5
 8007cdc:	f7ff ffa6 	bl	8007c2c <sbrk_aligned>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d03a      	beq.n	8007d5a <_malloc_r+0xea>
 8007ce4:	6823      	ldr	r3, [r4, #0]
 8007ce6:	442b      	add	r3, r5
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	f8d8 3000 	ldr.w	r3, [r8]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	bb62      	cbnz	r2, 8007d4c <_malloc_r+0xdc>
 8007cf2:	f8c8 7000 	str.w	r7, [r8]
 8007cf6:	e00f      	b.n	8007d18 <_malloc_r+0xa8>
 8007cf8:	6822      	ldr	r2, [r4, #0]
 8007cfa:	1b52      	subs	r2, r2, r5
 8007cfc:	d420      	bmi.n	8007d40 <_malloc_r+0xd0>
 8007cfe:	2a0b      	cmp	r2, #11
 8007d00:	d917      	bls.n	8007d32 <_malloc_r+0xc2>
 8007d02:	1961      	adds	r1, r4, r5
 8007d04:	42a3      	cmp	r3, r4
 8007d06:	6025      	str	r5, [r4, #0]
 8007d08:	bf18      	it	ne
 8007d0a:	6059      	strne	r1, [r3, #4]
 8007d0c:	6863      	ldr	r3, [r4, #4]
 8007d0e:	bf08      	it	eq
 8007d10:	f8c8 1000 	streq.w	r1, [r8]
 8007d14:	5162      	str	r2, [r4, r5]
 8007d16:	604b      	str	r3, [r1, #4]
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f000 f841 	bl	8007da0 <__malloc_unlock>
 8007d1e:	f104 000b 	add.w	r0, r4, #11
 8007d22:	1d23      	adds	r3, r4, #4
 8007d24:	f020 0007 	bic.w	r0, r0, #7
 8007d28:	1ac2      	subs	r2, r0, r3
 8007d2a:	bf1c      	itt	ne
 8007d2c:	1a1b      	subne	r3, r3, r0
 8007d2e:	50a3      	strne	r3, [r4, r2]
 8007d30:	e7af      	b.n	8007c92 <_malloc_r+0x22>
 8007d32:	6862      	ldr	r2, [r4, #4]
 8007d34:	42a3      	cmp	r3, r4
 8007d36:	bf0c      	ite	eq
 8007d38:	f8c8 2000 	streq.w	r2, [r8]
 8007d3c:	605a      	strne	r2, [r3, #4]
 8007d3e:	e7eb      	b.n	8007d18 <_malloc_r+0xa8>
 8007d40:	4623      	mov	r3, r4
 8007d42:	6864      	ldr	r4, [r4, #4]
 8007d44:	e7ae      	b.n	8007ca4 <_malloc_r+0x34>
 8007d46:	463c      	mov	r4, r7
 8007d48:	687f      	ldr	r7, [r7, #4]
 8007d4a:	e7b6      	b.n	8007cba <_malloc_r+0x4a>
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	42a3      	cmp	r3, r4
 8007d52:	d1fb      	bne.n	8007d4c <_malloc_r+0xdc>
 8007d54:	2300      	movs	r3, #0
 8007d56:	6053      	str	r3, [r2, #4]
 8007d58:	e7de      	b.n	8007d18 <_malloc_r+0xa8>
 8007d5a:	230c      	movs	r3, #12
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	6033      	str	r3, [r6, #0]
 8007d60:	f000 f81e 	bl	8007da0 <__malloc_unlock>
 8007d64:	e794      	b.n	8007c90 <_malloc_r+0x20>
 8007d66:	6005      	str	r5, [r0, #0]
 8007d68:	e7d6      	b.n	8007d18 <_malloc_r+0xa8>
 8007d6a:	bf00      	nop
 8007d6c:	2000046c 	.word	0x2000046c

08007d70 <__ascii_mbtowc>:
 8007d70:	b082      	sub	sp, #8
 8007d72:	b901      	cbnz	r1, 8007d76 <__ascii_mbtowc+0x6>
 8007d74:	a901      	add	r1, sp, #4
 8007d76:	b142      	cbz	r2, 8007d8a <__ascii_mbtowc+0x1a>
 8007d78:	b14b      	cbz	r3, 8007d8e <__ascii_mbtowc+0x1e>
 8007d7a:	7813      	ldrb	r3, [r2, #0]
 8007d7c:	600b      	str	r3, [r1, #0]
 8007d7e:	7812      	ldrb	r2, [r2, #0]
 8007d80:	1e10      	subs	r0, r2, #0
 8007d82:	bf18      	it	ne
 8007d84:	2001      	movne	r0, #1
 8007d86:	b002      	add	sp, #8
 8007d88:	4770      	bx	lr
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	e7fb      	b.n	8007d86 <__ascii_mbtowc+0x16>
 8007d8e:	f06f 0001 	mvn.w	r0, #1
 8007d92:	e7f8      	b.n	8007d86 <__ascii_mbtowc+0x16>

08007d94 <__malloc_lock>:
 8007d94:	4801      	ldr	r0, [pc, #4]	@ (8007d9c <__malloc_lock+0x8>)
 8007d96:	f7ff bbb0 	b.w	80074fa <__retarget_lock_acquire_recursive>
 8007d9a:	bf00      	nop
 8007d9c:	20000464 	.word	0x20000464

08007da0 <__malloc_unlock>:
 8007da0:	4801      	ldr	r0, [pc, #4]	@ (8007da8 <__malloc_unlock+0x8>)
 8007da2:	f7ff bbab 	b.w	80074fc <__retarget_lock_release_recursive>
 8007da6:	bf00      	nop
 8007da8:	20000464 	.word	0x20000464

08007dac <_Balloc>:
 8007dac:	b570      	push	{r4, r5, r6, lr}
 8007dae:	69c6      	ldr	r6, [r0, #28]
 8007db0:	4604      	mov	r4, r0
 8007db2:	460d      	mov	r5, r1
 8007db4:	b976      	cbnz	r6, 8007dd4 <_Balloc+0x28>
 8007db6:	2010      	movs	r0, #16
 8007db8:	f001 f8a6 	bl	8008f08 <malloc>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	61e0      	str	r0, [r4, #28]
 8007dc0:	b920      	cbnz	r0, 8007dcc <_Balloc+0x20>
 8007dc2:	216b      	movs	r1, #107	@ 0x6b
 8007dc4:	4b17      	ldr	r3, [pc, #92]	@ (8007e24 <_Balloc+0x78>)
 8007dc6:	4818      	ldr	r0, [pc, #96]	@ (8007e28 <_Balloc+0x7c>)
 8007dc8:	f001 f86c 	bl	8008ea4 <__assert_func>
 8007dcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007dd0:	6006      	str	r6, [r0, #0]
 8007dd2:	60c6      	str	r6, [r0, #12]
 8007dd4:	69e6      	ldr	r6, [r4, #28]
 8007dd6:	68f3      	ldr	r3, [r6, #12]
 8007dd8:	b183      	cbz	r3, 8007dfc <_Balloc+0x50>
 8007dda:	69e3      	ldr	r3, [r4, #28]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007de2:	b9b8      	cbnz	r0, 8007e14 <_Balloc+0x68>
 8007de4:	2101      	movs	r1, #1
 8007de6:	fa01 f605 	lsl.w	r6, r1, r5
 8007dea:	1d72      	adds	r2, r6, #5
 8007dec:	4620      	mov	r0, r4
 8007dee:	0092      	lsls	r2, r2, #2
 8007df0:	f001 f876 	bl	8008ee0 <_calloc_r>
 8007df4:	b160      	cbz	r0, 8007e10 <_Balloc+0x64>
 8007df6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007dfa:	e00e      	b.n	8007e1a <_Balloc+0x6e>
 8007dfc:	2221      	movs	r2, #33	@ 0x21
 8007dfe:	2104      	movs	r1, #4
 8007e00:	4620      	mov	r0, r4
 8007e02:	f001 f86d 	bl	8008ee0 <_calloc_r>
 8007e06:	69e3      	ldr	r3, [r4, #28]
 8007e08:	60f0      	str	r0, [r6, #12]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e4      	bne.n	8007dda <_Balloc+0x2e>
 8007e10:	2000      	movs	r0, #0
 8007e12:	bd70      	pop	{r4, r5, r6, pc}
 8007e14:	6802      	ldr	r2, [r0, #0]
 8007e16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e20:	e7f7      	b.n	8007e12 <_Balloc+0x66>
 8007e22:	bf00      	nop
 8007e24:	080096c9 	.word	0x080096c9
 8007e28:	080096e0 	.word	0x080096e0

08007e2c <_Bfree>:
 8007e2c:	b570      	push	{r4, r5, r6, lr}
 8007e2e:	69c6      	ldr	r6, [r0, #28]
 8007e30:	4605      	mov	r5, r0
 8007e32:	460c      	mov	r4, r1
 8007e34:	b976      	cbnz	r6, 8007e54 <_Bfree+0x28>
 8007e36:	2010      	movs	r0, #16
 8007e38:	f001 f866 	bl	8008f08 <malloc>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	61e8      	str	r0, [r5, #28]
 8007e40:	b920      	cbnz	r0, 8007e4c <_Bfree+0x20>
 8007e42:	218f      	movs	r1, #143	@ 0x8f
 8007e44:	4b08      	ldr	r3, [pc, #32]	@ (8007e68 <_Bfree+0x3c>)
 8007e46:	4809      	ldr	r0, [pc, #36]	@ (8007e6c <_Bfree+0x40>)
 8007e48:	f001 f82c 	bl	8008ea4 <__assert_func>
 8007e4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e50:	6006      	str	r6, [r0, #0]
 8007e52:	60c6      	str	r6, [r0, #12]
 8007e54:	b13c      	cbz	r4, 8007e66 <_Bfree+0x3a>
 8007e56:	69eb      	ldr	r3, [r5, #28]
 8007e58:	6862      	ldr	r2, [r4, #4]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e60:	6021      	str	r1, [r4, #0]
 8007e62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e66:	bd70      	pop	{r4, r5, r6, pc}
 8007e68:	080096c9 	.word	0x080096c9
 8007e6c:	080096e0 	.word	0x080096e0

08007e70 <__multadd>:
 8007e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e74:	4607      	mov	r7, r0
 8007e76:	460c      	mov	r4, r1
 8007e78:	461e      	mov	r6, r3
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	690d      	ldr	r5, [r1, #16]
 8007e7e:	f101 0c14 	add.w	ip, r1, #20
 8007e82:	f8dc 3000 	ldr.w	r3, [ip]
 8007e86:	3001      	adds	r0, #1
 8007e88:	b299      	uxth	r1, r3
 8007e8a:	fb02 6101 	mla	r1, r2, r1, r6
 8007e8e:	0c1e      	lsrs	r6, r3, #16
 8007e90:	0c0b      	lsrs	r3, r1, #16
 8007e92:	fb02 3306 	mla	r3, r2, r6, r3
 8007e96:	b289      	uxth	r1, r1
 8007e98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e9c:	4285      	cmp	r5, r0
 8007e9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ea2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ea6:	dcec      	bgt.n	8007e82 <__multadd+0x12>
 8007ea8:	b30e      	cbz	r6, 8007eee <__multadd+0x7e>
 8007eaa:	68a3      	ldr	r3, [r4, #8]
 8007eac:	42ab      	cmp	r3, r5
 8007eae:	dc19      	bgt.n	8007ee4 <__multadd+0x74>
 8007eb0:	6861      	ldr	r1, [r4, #4]
 8007eb2:	4638      	mov	r0, r7
 8007eb4:	3101      	adds	r1, #1
 8007eb6:	f7ff ff79 	bl	8007dac <_Balloc>
 8007eba:	4680      	mov	r8, r0
 8007ebc:	b928      	cbnz	r0, 8007eca <__multadd+0x5a>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	21ba      	movs	r1, #186	@ 0xba
 8007ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef4 <__multadd+0x84>)
 8007ec4:	480c      	ldr	r0, [pc, #48]	@ (8007ef8 <__multadd+0x88>)
 8007ec6:	f000 ffed 	bl	8008ea4 <__assert_func>
 8007eca:	6922      	ldr	r2, [r4, #16]
 8007ecc:	f104 010c 	add.w	r1, r4, #12
 8007ed0:	3202      	adds	r2, #2
 8007ed2:	0092      	lsls	r2, r2, #2
 8007ed4:	300c      	adds	r0, #12
 8007ed6:	f7ff fb12 	bl	80074fe <memcpy>
 8007eda:	4621      	mov	r1, r4
 8007edc:	4638      	mov	r0, r7
 8007ede:	f7ff ffa5 	bl	8007e2c <_Bfree>
 8007ee2:	4644      	mov	r4, r8
 8007ee4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ee8:	3501      	adds	r5, #1
 8007eea:	615e      	str	r6, [r3, #20]
 8007eec:	6125      	str	r5, [r4, #16]
 8007eee:	4620      	mov	r0, r4
 8007ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef4:	08009658 	.word	0x08009658
 8007ef8:	080096e0 	.word	0x080096e0

08007efc <__s2b>:
 8007efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f00:	4615      	mov	r5, r2
 8007f02:	2209      	movs	r2, #9
 8007f04:	461f      	mov	r7, r3
 8007f06:	3308      	adds	r3, #8
 8007f08:	460c      	mov	r4, r1
 8007f0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f0e:	4606      	mov	r6, r0
 8007f10:	2201      	movs	r2, #1
 8007f12:	2100      	movs	r1, #0
 8007f14:	429a      	cmp	r2, r3
 8007f16:	db09      	blt.n	8007f2c <__s2b+0x30>
 8007f18:	4630      	mov	r0, r6
 8007f1a:	f7ff ff47 	bl	8007dac <_Balloc>
 8007f1e:	b940      	cbnz	r0, 8007f32 <__s2b+0x36>
 8007f20:	4602      	mov	r2, r0
 8007f22:	21d3      	movs	r1, #211	@ 0xd3
 8007f24:	4b18      	ldr	r3, [pc, #96]	@ (8007f88 <__s2b+0x8c>)
 8007f26:	4819      	ldr	r0, [pc, #100]	@ (8007f8c <__s2b+0x90>)
 8007f28:	f000 ffbc 	bl	8008ea4 <__assert_func>
 8007f2c:	0052      	lsls	r2, r2, #1
 8007f2e:	3101      	adds	r1, #1
 8007f30:	e7f0      	b.n	8007f14 <__s2b+0x18>
 8007f32:	9b08      	ldr	r3, [sp, #32]
 8007f34:	2d09      	cmp	r5, #9
 8007f36:	6143      	str	r3, [r0, #20]
 8007f38:	f04f 0301 	mov.w	r3, #1
 8007f3c:	6103      	str	r3, [r0, #16]
 8007f3e:	dd16      	ble.n	8007f6e <__s2b+0x72>
 8007f40:	f104 0909 	add.w	r9, r4, #9
 8007f44:	46c8      	mov	r8, r9
 8007f46:	442c      	add	r4, r5
 8007f48:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007f4c:	4601      	mov	r1, r0
 8007f4e:	220a      	movs	r2, #10
 8007f50:	4630      	mov	r0, r6
 8007f52:	3b30      	subs	r3, #48	@ 0x30
 8007f54:	f7ff ff8c 	bl	8007e70 <__multadd>
 8007f58:	45a0      	cmp	r8, r4
 8007f5a:	d1f5      	bne.n	8007f48 <__s2b+0x4c>
 8007f5c:	f1a5 0408 	sub.w	r4, r5, #8
 8007f60:	444c      	add	r4, r9
 8007f62:	1b2d      	subs	r5, r5, r4
 8007f64:	1963      	adds	r3, r4, r5
 8007f66:	42bb      	cmp	r3, r7
 8007f68:	db04      	blt.n	8007f74 <__s2b+0x78>
 8007f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f6e:	2509      	movs	r5, #9
 8007f70:	340a      	adds	r4, #10
 8007f72:	e7f6      	b.n	8007f62 <__s2b+0x66>
 8007f74:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007f78:	4601      	mov	r1, r0
 8007f7a:	220a      	movs	r2, #10
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	3b30      	subs	r3, #48	@ 0x30
 8007f80:	f7ff ff76 	bl	8007e70 <__multadd>
 8007f84:	e7ee      	b.n	8007f64 <__s2b+0x68>
 8007f86:	bf00      	nop
 8007f88:	08009658 	.word	0x08009658
 8007f8c:	080096e0 	.word	0x080096e0

08007f90 <__hi0bits>:
 8007f90:	4603      	mov	r3, r0
 8007f92:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007f96:	bf3a      	itte	cc
 8007f98:	0403      	lslcc	r3, r0, #16
 8007f9a:	2010      	movcc	r0, #16
 8007f9c:	2000      	movcs	r0, #0
 8007f9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fa2:	bf3c      	itt	cc
 8007fa4:	021b      	lslcc	r3, r3, #8
 8007fa6:	3008      	addcc	r0, #8
 8007fa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fac:	bf3c      	itt	cc
 8007fae:	011b      	lslcc	r3, r3, #4
 8007fb0:	3004      	addcc	r0, #4
 8007fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fb6:	bf3c      	itt	cc
 8007fb8:	009b      	lslcc	r3, r3, #2
 8007fba:	3002      	addcc	r0, #2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	db05      	blt.n	8007fcc <__hi0bits+0x3c>
 8007fc0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007fc4:	f100 0001 	add.w	r0, r0, #1
 8007fc8:	bf08      	it	eq
 8007fca:	2020      	moveq	r0, #32
 8007fcc:	4770      	bx	lr

08007fce <__lo0bits>:
 8007fce:	6803      	ldr	r3, [r0, #0]
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	f013 0007 	ands.w	r0, r3, #7
 8007fd6:	d00b      	beq.n	8007ff0 <__lo0bits+0x22>
 8007fd8:	07d9      	lsls	r1, r3, #31
 8007fda:	d421      	bmi.n	8008020 <__lo0bits+0x52>
 8007fdc:	0798      	lsls	r0, r3, #30
 8007fde:	bf49      	itett	mi
 8007fe0:	085b      	lsrmi	r3, r3, #1
 8007fe2:	089b      	lsrpl	r3, r3, #2
 8007fe4:	2001      	movmi	r0, #1
 8007fe6:	6013      	strmi	r3, [r2, #0]
 8007fe8:	bf5c      	itt	pl
 8007fea:	2002      	movpl	r0, #2
 8007fec:	6013      	strpl	r3, [r2, #0]
 8007fee:	4770      	bx	lr
 8007ff0:	b299      	uxth	r1, r3
 8007ff2:	b909      	cbnz	r1, 8007ff8 <__lo0bits+0x2a>
 8007ff4:	2010      	movs	r0, #16
 8007ff6:	0c1b      	lsrs	r3, r3, #16
 8007ff8:	b2d9      	uxtb	r1, r3
 8007ffa:	b909      	cbnz	r1, 8008000 <__lo0bits+0x32>
 8007ffc:	3008      	adds	r0, #8
 8007ffe:	0a1b      	lsrs	r3, r3, #8
 8008000:	0719      	lsls	r1, r3, #28
 8008002:	bf04      	itt	eq
 8008004:	091b      	lsreq	r3, r3, #4
 8008006:	3004      	addeq	r0, #4
 8008008:	0799      	lsls	r1, r3, #30
 800800a:	bf04      	itt	eq
 800800c:	089b      	lsreq	r3, r3, #2
 800800e:	3002      	addeq	r0, #2
 8008010:	07d9      	lsls	r1, r3, #31
 8008012:	d403      	bmi.n	800801c <__lo0bits+0x4e>
 8008014:	085b      	lsrs	r3, r3, #1
 8008016:	f100 0001 	add.w	r0, r0, #1
 800801a:	d003      	beq.n	8008024 <__lo0bits+0x56>
 800801c:	6013      	str	r3, [r2, #0]
 800801e:	4770      	bx	lr
 8008020:	2000      	movs	r0, #0
 8008022:	4770      	bx	lr
 8008024:	2020      	movs	r0, #32
 8008026:	4770      	bx	lr

08008028 <__i2b>:
 8008028:	b510      	push	{r4, lr}
 800802a:	460c      	mov	r4, r1
 800802c:	2101      	movs	r1, #1
 800802e:	f7ff febd 	bl	8007dac <_Balloc>
 8008032:	4602      	mov	r2, r0
 8008034:	b928      	cbnz	r0, 8008042 <__i2b+0x1a>
 8008036:	f240 1145 	movw	r1, #325	@ 0x145
 800803a:	4b04      	ldr	r3, [pc, #16]	@ (800804c <__i2b+0x24>)
 800803c:	4804      	ldr	r0, [pc, #16]	@ (8008050 <__i2b+0x28>)
 800803e:	f000 ff31 	bl	8008ea4 <__assert_func>
 8008042:	2301      	movs	r3, #1
 8008044:	6144      	str	r4, [r0, #20]
 8008046:	6103      	str	r3, [r0, #16]
 8008048:	bd10      	pop	{r4, pc}
 800804a:	bf00      	nop
 800804c:	08009658 	.word	0x08009658
 8008050:	080096e0 	.word	0x080096e0

08008054 <__multiply>:
 8008054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008058:	4614      	mov	r4, r2
 800805a:	690a      	ldr	r2, [r1, #16]
 800805c:	6923      	ldr	r3, [r4, #16]
 800805e:	460f      	mov	r7, r1
 8008060:	429a      	cmp	r2, r3
 8008062:	bfa2      	ittt	ge
 8008064:	4623      	movge	r3, r4
 8008066:	460c      	movge	r4, r1
 8008068:	461f      	movge	r7, r3
 800806a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800806e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008072:	68a3      	ldr	r3, [r4, #8]
 8008074:	6861      	ldr	r1, [r4, #4]
 8008076:	eb0a 0609 	add.w	r6, sl, r9
 800807a:	42b3      	cmp	r3, r6
 800807c:	b085      	sub	sp, #20
 800807e:	bfb8      	it	lt
 8008080:	3101      	addlt	r1, #1
 8008082:	f7ff fe93 	bl	8007dac <_Balloc>
 8008086:	b930      	cbnz	r0, 8008096 <__multiply+0x42>
 8008088:	4602      	mov	r2, r0
 800808a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800808e:	4b43      	ldr	r3, [pc, #268]	@ (800819c <__multiply+0x148>)
 8008090:	4843      	ldr	r0, [pc, #268]	@ (80081a0 <__multiply+0x14c>)
 8008092:	f000 ff07 	bl	8008ea4 <__assert_func>
 8008096:	f100 0514 	add.w	r5, r0, #20
 800809a:	462b      	mov	r3, r5
 800809c:	2200      	movs	r2, #0
 800809e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80080a2:	4543      	cmp	r3, r8
 80080a4:	d321      	bcc.n	80080ea <__multiply+0x96>
 80080a6:	f107 0114 	add.w	r1, r7, #20
 80080aa:	f104 0214 	add.w	r2, r4, #20
 80080ae:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80080b2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80080b6:	9302      	str	r3, [sp, #8]
 80080b8:	1b13      	subs	r3, r2, r4
 80080ba:	3b15      	subs	r3, #21
 80080bc:	f023 0303 	bic.w	r3, r3, #3
 80080c0:	3304      	adds	r3, #4
 80080c2:	f104 0715 	add.w	r7, r4, #21
 80080c6:	42ba      	cmp	r2, r7
 80080c8:	bf38      	it	cc
 80080ca:	2304      	movcc	r3, #4
 80080cc:	9301      	str	r3, [sp, #4]
 80080ce:	9b02      	ldr	r3, [sp, #8]
 80080d0:	9103      	str	r1, [sp, #12]
 80080d2:	428b      	cmp	r3, r1
 80080d4:	d80c      	bhi.n	80080f0 <__multiply+0x9c>
 80080d6:	2e00      	cmp	r6, #0
 80080d8:	dd03      	ble.n	80080e2 <__multiply+0x8e>
 80080da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d05a      	beq.n	8008198 <__multiply+0x144>
 80080e2:	6106      	str	r6, [r0, #16]
 80080e4:	b005      	add	sp, #20
 80080e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ea:	f843 2b04 	str.w	r2, [r3], #4
 80080ee:	e7d8      	b.n	80080a2 <__multiply+0x4e>
 80080f0:	f8b1 a000 	ldrh.w	sl, [r1]
 80080f4:	f1ba 0f00 	cmp.w	sl, #0
 80080f8:	d023      	beq.n	8008142 <__multiply+0xee>
 80080fa:	46a9      	mov	r9, r5
 80080fc:	f04f 0c00 	mov.w	ip, #0
 8008100:	f104 0e14 	add.w	lr, r4, #20
 8008104:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008108:	f8d9 3000 	ldr.w	r3, [r9]
 800810c:	fa1f fb87 	uxth.w	fp, r7
 8008110:	b29b      	uxth	r3, r3
 8008112:	fb0a 330b 	mla	r3, sl, fp, r3
 8008116:	4463      	add	r3, ip
 8008118:	f8d9 c000 	ldr.w	ip, [r9]
 800811c:	0c3f      	lsrs	r7, r7, #16
 800811e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008122:	fb0a c707 	mla	r7, sl, r7, ip
 8008126:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800812a:	b29b      	uxth	r3, r3
 800812c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008130:	4572      	cmp	r2, lr
 8008132:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008136:	f849 3b04 	str.w	r3, [r9], #4
 800813a:	d8e3      	bhi.n	8008104 <__multiply+0xb0>
 800813c:	9b01      	ldr	r3, [sp, #4]
 800813e:	f845 c003 	str.w	ip, [r5, r3]
 8008142:	9b03      	ldr	r3, [sp, #12]
 8008144:	3104      	adds	r1, #4
 8008146:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800814a:	f1b9 0f00 	cmp.w	r9, #0
 800814e:	d021      	beq.n	8008194 <__multiply+0x140>
 8008150:	46ae      	mov	lr, r5
 8008152:	f04f 0a00 	mov.w	sl, #0
 8008156:	682b      	ldr	r3, [r5, #0]
 8008158:	f104 0c14 	add.w	ip, r4, #20
 800815c:	f8bc b000 	ldrh.w	fp, [ip]
 8008160:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008164:	b29b      	uxth	r3, r3
 8008166:	fb09 770b 	mla	r7, r9, fp, r7
 800816a:	4457      	add	r7, sl
 800816c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008170:	f84e 3b04 	str.w	r3, [lr], #4
 8008174:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008178:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800817c:	f8be 3000 	ldrh.w	r3, [lr]
 8008180:	4562      	cmp	r2, ip
 8008182:	fb09 330a 	mla	r3, r9, sl, r3
 8008186:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800818a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800818e:	d8e5      	bhi.n	800815c <__multiply+0x108>
 8008190:	9f01      	ldr	r7, [sp, #4]
 8008192:	51eb      	str	r3, [r5, r7]
 8008194:	3504      	adds	r5, #4
 8008196:	e79a      	b.n	80080ce <__multiply+0x7a>
 8008198:	3e01      	subs	r6, #1
 800819a:	e79c      	b.n	80080d6 <__multiply+0x82>
 800819c:	08009658 	.word	0x08009658
 80081a0:	080096e0 	.word	0x080096e0

080081a4 <__pow5mult>:
 80081a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a8:	4615      	mov	r5, r2
 80081aa:	f012 0203 	ands.w	r2, r2, #3
 80081ae:	4607      	mov	r7, r0
 80081b0:	460e      	mov	r6, r1
 80081b2:	d007      	beq.n	80081c4 <__pow5mult+0x20>
 80081b4:	4c25      	ldr	r4, [pc, #148]	@ (800824c <__pow5mult+0xa8>)
 80081b6:	3a01      	subs	r2, #1
 80081b8:	2300      	movs	r3, #0
 80081ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081be:	f7ff fe57 	bl	8007e70 <__multadd>
 80081c2:	4606      	mov	r6, r0
 80081c4:	10ad      	asrs	r5, r5, #2
 80081c6:	d03d      	beq.n	8008244 <__pow5mult+0xa0>
 80081c8:	69fc      	ldr	r4, [r7, #28]
 80081ca:	b97c      	cbnz	r4, 80081ec <__pow5mult+0x48>
 80081cc:	2010      	movs	r0, #16
 80081ce:	f000 fe9b 	bl	8008f08 <malloc>
 80081d2:	4602      	mov	r2, r0
 80081d4:	61f8      	str	r0, [r7, #28]
 80081d6:	b928      	cbnz	r0, 80081e4 <__pow5mult+0x40>
 80081d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80081dc:	4b1c      	ldr	r3, [pc, #112]	@ (8008250 <__pow5mult+0xac>)
 80081de:	481d      	ldr	r0, [pc, #116]	@ (8008254 <__pow5mult+0xb0>)
 80081e0:	f000 fe60 	bl	8008ea4 <__assert_func>
 80081e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081e8:	6004      	str	r4, [r0, #0]
 80081ea:	60c4      	str	r4, [r0, #12]
 80081ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80081f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081f4:	b94c      	cbnz	r4, 800820a <__pow5mult+0x66>
 80081f6:	f240 2171 	movw	r1, #625	@ 0x271
 80081fa:	4638      	mov	r0, r7
 80081fc:	f7ff ff14 	bl	8008028 <__i2b>
 8008200:	2300      	movs	r3, #0
 8008202:	4604      	mov	r4, r0
 8008204:	f8c8 0008 	str.w	r0, [r8, #8]
 8008208:	6003      	str	r3, [r0, #0]
 800820a:	f04f 0900 	mov.w	r9, #0
 800820e:	07eb      	lsls	r3, r5, #31
 8008210:	d50a      	bpl.n	8008228 <__pow5mult+0x84>
 8008212:	4631      	mov	r1, r6
 8008214:	4622      	mov	r2, r4
 8008216:	4638      	mov	r0, r7
 8008218:	f7ff ff1c 	bl	8008054 <__multiply>
 800821c:	4680      	mov	r8, r0
 800821e:	4631      	mov	r1, r6
 8008220:	4638      	mov	r0, r7
 8008222:	f7ff fe03 	bl	8007e2c <_Bfree>
 8008226:	4646      	mov	r6, r8
 8008228:	106d      	asrs	r5, r5, #1
 800822a:	d00b      	beq.n	8008244 <__pow5mult+0xa0>
 800822c:	6820      	ldr	r0, [r4, #0]
 800822e:	b938      	cbnz	r0, 8008240 <__pow5mult+0x9c>
 8008230:	4622      	mov	r2, r4
 8008232:	4621      	mov	r1, r4
 8008234:	4638      	mov	r0, r7
 8008236:	f7ff ff0d 	bl	8008054 <__multiply>
 800823a:	6020      	str	r0, [r4, #0]
 800823c:	f8c0 9000 	str.w	r9, [r0]
 8008240:	4604      	mov	r4, r0
 8008242:	e7e4      	b.n	800820e <__pow5mult+0x6a>
 8008244:	4630      	mov	r0, r6
 8008246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800824a:	bf00      	nop
 800824c:	0800973c 	.word	0x0800973c
 8008250:	080096c9 	.word	0x080096c9
 8008254:	080096e0 	.word	0x080096e0

08008258 <__lshift>:
 8008258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800825c:	460c      	mov	r4, r1
 800825e:	4607      	mov	r7, r0
 8008260:	4691      	mov	r9, r2
 8008262:	6923      	ldr	r3, [r4, #16]
 8008264:	6849      	ldr	r1, [r1, #4]
 8008266:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800826a:	68a3      	ldr	r3, [r4, #8]
 800826c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008270:	f108 0601 	add.w	r6, r8, #1
 8008274:	42b3      	cmp	r3, r6
 8008276:	db0b      	blt.n	8008290 <__lshift+0x38>
 8008278:	4638      	mov	r0, r7
 800827a:	f7ff fd97 	bl	8007dac <_Balloc>
 800827e:	4605      	mov	r5, r0
 8008280:	b948      	cbnz	r0, 8008296 <__lshift+0x3e>
 8008282:	4602      	mov	r2, r0
 8008284:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008288:	4b27      	ldr	r3, [pc, #156]	@ (8008328 <__lshift+0xd0>)
 800828a:	4828      	ldr	r0, [pc, #160]	@ (800832c <__lshift+0xd4>)
 800828c:	f000 fe0a 	bl	8008ea4 <__assert_func>
 8008290:	3101      	adds	r1, #1
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	e7ee      	b.n	8008274 <__lshift+0x1c>
 8008296:	2300      	movs	r3, #0
 8008298:	f100 0114 	add.w	r1, r0, #20
 800829c:	f100 0210 	add.w	r2, r0, #16
 80082a0:	4618      	mov	r0, r3
 80082a2:	4553      	cmp	r3, sl
 80082a4:	db33      	blt.n	800830e <__lshift+0xb6>
 80082a6:	6920      	ldr	r0, [r4, #16]
 80082a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082ac:	f104 0314 	add.w	r3, r4, #20
 80082b0:	f019 091f 	ands.w	r9, r9, #31
 80082b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082bc:	d02b      	beq.n	8008316 <__lshift+0xbe>
 80082be:	468a      	mov	sl, r1
 80082c0:	2200      	movs	r2, #0
 80082c2:	f1c9 0e20 	rsb	lr, r9, #32
 80082c6:	6818      	ldr	r0, [r3, #0]
 80082c8:	fa00 f009 	lsl.w	r0, r0, r9
 80082cc:	4310      	orrs	r0, r2
 80082ce:	f84a 0b04 	str.w	r0, [sl], #4
 80082d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80082d6:	459c      	cmp	ip, r3
 80082d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80082dc:	d8f3      	bhi.n	80082c6 <__lshift+0x6e>
 80082de:	ebac 0304 	sub.w	r3, ip, r4
 80082e2:	3b15      	subs	r3, #21
 80082e4:	f023 0303 	bic.w	r3, r3, #3
 80082e8:	3304      	adds	r3, #4
 80082ea:	f104 0015 	add.w	r0, r4, #21
 80082ee:	4584      	cmp	ip, r0
 80082f0:	bf38      	it	cc
 80082f2:	2304      	movcc	r3, #4
 80082f4:	50ca      	str	r2, [r1, r3]
 80082f6:	b10a      	cbz	r2, 80082fc <__lshift+0xa4>
 80082f8:	f108 0602 	add.w	r6, r8, #2
 80082fc:	3e01      	subs	r6, #1
 80082fe:	4638      	mov	r0, r7
 8008300:	4621      	mov	r1, r4
 8008302:	612e      	str	r6, [r5, #16]
 8008304:	f7ff fd92 	bl	8007e2c <_Bfree>
 8008308:	4628      	mov	r0, r5
 800830a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800830e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008312:	3301      	adds	r3, #1
 8008314:	e7c5      	b.n	80082a2 <__lshift+0x4a>
 8008316:	3904      	subs	r1, #4
 8008318:	f853 2b04 	ldr.w	r2, [r3], #4
 800831c:	459c      	cmp	ip, r3
 800831e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008322:	d8f9      	bhi.n	8008318 <__lshift+0xc0>
 8008324:	e7ea      	b.n	80082fc <__lshift+0xa4>
 8008326:	bf00      	nop
 8008328:	08009658 	.word	0x08009658
 800832c:	080096e0 	.word	0x080096e0

08008330 <__mcmp>:
 8008330:	4603      	mov	r3, r0
 8008332:	690a      	ldr	r2, [r1, #16]
 8008334:	6900      	ldr	r0, [r0, #16]
 8008336:	b530      	push	{r4, r5, lr}
 8008338:	1a80      	subs	r0, r0, r2
 800833a:	d10e      	bne.n	800835a <__mcmp+0x2a>
 800833c:	3314      	adds	r3, #20
 800833e:	3114      	adds	r1, #20
 8008340:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008344:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008348:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800834c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008350:	4295      	cmp	r5, r2
 8008352:	d003      	beq.n	800835c <__mcmp+0x2c>
 8008354:	d205      	bcs.n	8008362 <__mcmp+0x32>
 8008356:	f04f 30ff 	mov.w	r0, #4294967295
 800835a:	bd30      	pop	{r4, r5, pc}
 800835c:	42a3      	cmp	r3, r4
 800835e:	d3f3      	bcc.n	8008348 <__mcmp+0x18>
 8008360:	e7fb      	b.n	800835a <__mcmp+0x2a>
 8008362:	2001      	movs	r0, #1
 8008364:	e7f9      	b.n	800835a <__mcmp+0x2a>
	...

08008368 <__mdiff>:
 8008368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836c:	4689      	mov	r9, r1
 800836e:	4606      	mov	r6, r0
 8008370:	4611      	mov	r1, r2
 8008372:	4648      	mov	r0, r9
 8008374:	4614      	mov	r4, r2
 8008376:	f7ff ffdb 	bl	8008330 <__mcmp>
 800837a:	1e05      	subs	r5, r0, #0
 800837c:	d112      	bne.n	80083a4 <__mdiff+0x3c>
 800837e:	4629      	mov	r1, r5
 8008380:	4630      	mov	r0, r6
 8008382:	f7ff fd13 	bl	8007dac <_Balloc>
 8008386:	4602      	mov	r2, r0
 8008388:	b928      	cbnz	r0, 8008396 <__mdiff+0x2e>
 800838a:	f240 2137 	movw	r1, #567	@ 0x237
 800838e:	4b3e      	ldr	r3, [pc, #248]	@ (8008488 <__mdiff+0x120>)
 8008390:	483e      	ldr	r0, [pc, #248]	@ (800848c <__mdiff+0x124>)
 8008392:	f000 fd87 	bl	8008ea4 <__assert_func>
 8008396:	2301      	movs	r3, #1
 8008398:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800839c:	4610      	mov	r0, r2
 800839e:	b003      	add	sp, #12
 80083a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a4:	bfbc      	itt	lt
 80083a6:	464b      	movlt	r3, r9
 80083a8:	46a1      	movlt	r9, r4
 80083aa:	4630      	mov	r0, r6
 80083ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80083b0:	bfba      	itte	lt
 80083b2:	461c      	movlt	r4, r3
 80083b4:	2501      	movlt	r5, #1
 80083b6:	2500      	movge	r5, #0
 80083b8:	f7ff fcf8 	bl	8007dac <_Balloc>
 80083bc:	4602      	mov	r2, r0
 80083be:	b918      	cbnz	r0, 80083c8 <__mdiff+0x60>
 80083c0:	f240 2145 	movw	r1, #581	@ 0x245
 80083c4:	4b30      	ldr	r3, [pc, #192]	@ (8008488 <__mdiff+0x120>)
 80083c6:	e7e3      	b.n	8008390 <__mdiff+0x28>
 80083c8:	f100 0b14 	add.w	fp, r0, #20
 80083cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80083d0:	f109 0310 	add.w	r3, r9, #16
 80083d4:	60c5      	str	r5, [r0, #12]
 80083d6:	f04f 0c00 	mov.w	ip, #0
 80083da:	f109 0514 	add.w	r5, r9, #20
 80083de:	46d9      	mov	r9, fp
 80083e0:	6926      	ldr	r6, [r4, #16]
 80083e2:	f104 0e14 	add.w	lr, r4, #20
 80083e6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80083ea:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80083ee:	9301      	str	r3, [sp, #4]
 80083f0:	9b01      	ldr	r3, [sp, #4]
 80083f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80083f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80083fa:	b281      	uxth	r1, r0
 80083fc:	9301      	str	r3, [sp, #4]
 80083fe:	fa1f f38a 	uxth.w	r3, sl
 8008402:	1a5b      	subs	r3, r3, r1
 8008404:	0c00      	lsrs	r0, r0, #16
 8008406:	4463      	add	r3, ip
 8008408:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800840c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008410:	b29b      	uxth	r3, r3
 8008412:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008416:	4576      	cmp	r6, lr
 8008418:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800841c:	f849 3b04 	str.w	r3, [r9], #4
 8008420:	d8e6      	bhi.n	80083f0 <__mdiff+0x88>
 8008422:	1b33      	subs	r3, r6, r4
 8008424:	3b15      	subs	r3, #21
 8008426:	f023 0303 	bic.w	r3, r3, #3
 800842a:	3415      	adds	r4, #21
 800842c:	3304      	adds	r3, #4
 800842e:	42a6      	cmp	r6, r4
 8008430:	bf38      	it	cc
 8008432:	2304      	movcc	r3, #4
 8008434:	441d      	add	r5, r3
 8008436:	445b      	add	r3, fp
 8008438:	461e      	mov	r6, r3
 800843a:	462c      	mov	r4, r5
 800843c:	4544      	cmp	r4, r8
 800843e:	d30e      	bcc.n	800845e <__mdiff+0xf6>
 8008440:	f108 0103 	add.w	r1, r8, #3
 8008444:	1b49      	subs	r1, r1, r5
 8008446:	f021 0103 	bic.w	r1, r1, #3
 800844a:	3d03      	subs	r5, #3
 800844c:	45a8      	cmp	r8, r5
 800844e:	bf38      	it	cc
 8008450:	2100      	movcc	r1, #0
 8008452:	440b      	add	r3, r1
 8008454:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008458:	b199      	cbz	r1, 8008482 <__mdiff+0x11a>
 800845a:	6117      	str	r7, [r2, #16]
 800845c:	e79e      	b.n	800839c <__mdiff+0x34>
 800845e:	46e6      	mov	lr, ip
 8008460:	f854 1b04 	ldr.w	r1, [r4], #4
 8008464:	fa1f fc81 	uxth.w	ip, r1
 8008468:	44f4      	add	ip, lr
 800846a:	0c08      	lsrs	r0, r1, #16
 800846c:	4471      	add	r1, lr
 800846e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008472:	b289      	uxth	r1, r1
 8008474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008478:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800847c:	f846 1b04 	str.w	r1, [r6], #4
 8008480:	e7dc      	b.n	800843c <__mdiff+0xd4>
 8008482:	3f01      	subs	r7, #1
 8008484:	e7e6      	b.n	8008454 <__mdiff+0xec>
 8008486:	bf00      	nop
 8008488:	08009658 	.word	0x08009658
 800848c:	080096e0 	.word	0x080096e0

08008490 <__ulp>:
 8008490:	4b0e      	ldr	r3, [pc, #56]	@ (80084cc <__ulp+0x3c>)
 8008492:	400b      	ands	r3, r1
 8008494:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008498:	2b00      	cmp	r3, #0
 800849a:	dc08      	bgt.n	80084ae <__ulp+0x1e>
 800849c:	425b      	negs	r3, r3
 800849e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80084a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80084a6:	da04      	bge.n	80084b2 <__ulp+0x22>
 80084a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80084ac:	4113      	asrs	r3, r2
 80084ae:	2200      	movs	r2, #0
 80084b0:	e008      	b.n	80084c4 <__ulp+0x34>
 80084b2:	f1a2 0314 	sub.w	r3, r2, #20
 80084b6:	2b1e      	cmp	r3, #30
 80084b8:	bfd6      	itet	le
 80084ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80084be:	2201      	movgt	r2, #1
 80084c0:	40da      	lsrle	r2, r3
 80084c2:	2300      	movs	r3, #0
 80084c4:	4619      	mov	r1, r3
 80084c6:	4610      	mov	r0, r2
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	7ff00000 	.word	0x7ff00000

080084d0 <__b2d>:
 80084d0:	6902      	ldr	r2, [r0, #16]
 80084d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d4:	f100 0614 	add.w	r6, r0, #20
 80084d8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80084dc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80084e0:	4f1e      	ldr	r7, [pc, #120]	@ (800855c <__b2d+0x8c>)
 80084e2:	4620      	mov	r0, r4
 80084e4:	f7ff fd54 	bl	8007f90 <__hi0bits>
 80084e8:	4603      	mov	r3, r0
 80084ea:	f1c0 0020 	rsb	r0, r0, #32
 80084ee:	2b0a      	cmp	r3, #10
 80084f0:	f1a2 0504 	sub.w	r5, r2, #4
 80084f4:	6008      	str	r0, [r1, #0]
 80084f6:	dc12      	bgt.n	800851e <__b2d+0x4e>
 80084f8:	42ae      	cmp	r6, r5
 80084fa:	bf2c      	ite	cs
 80084fc:	2200      	movcs	r2, #0
 80084fe:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008502:	f1c3 0c0b 	rsb	ip, r3, #11
 8008506:	3315      	adds	r3, #21
 8008508:	fa24 fe0c 	lsr.w	lr, r4, ip
 800850c:	fa04 f303 	lsl.w	r3, r4, r3
 8008510:	fa22 f20c 	lsr.w	r2, r2, ip
 8008514:	ea4e 0107 	orr.w	r1, lr, r7
 8008518:	431a      	orrs	r2, r3
 800851a:	4610      	mov	r0, r2
 800851c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800851e:	42ae      	cmp	r6, r5
 8008520:	bf36      	itet	cc
 8008522:	f1a2 0508 	subcc.w	r5, r2, #8
 8008526:	2200      	movcs	r2, #0
 8008528:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800852c:	3b0b      	subs	r3, #11
 800852e:	d012      	beq.n	8008556 <__b2d+0x86>
 8008530:	f1c3 0720 	rsb	r7, r3, #32
 8008534:	fa22 f107 	lsr.w	r1, r2, r7
 8008538:	409c      	lsls	r4, r3
 800853a:	430c      	orrs	r4, r1
 800853c:	42b5      	cmp	r5, r6
 800853e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008542:	bf94      	ite	ls
 8008544:	2400      	movls	r4, #0
 8008546:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800854a:	409a      	lsls	r2, r3
 800854c:	40fc      	lsrs	r4, r7
 800854e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008552:	4322      	orrs	r2, r4
 8008554:	e7e1      	b.n	800851a <__b2d+0x4a>
 8008556:	ea44 0107 	orr.w	r1, r4, r7
 800855a:	e7de      	b.n	800851a <__b2d+0x4a>
 800855c:	3ff00000 	.word	0x3ff00000

08008560 <__d2b>:
 8008560:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008564:	2101      	movs	r1, #1
 8008566:	4690      	mov	r8, r2
 8008568:	4699      	mov	r9, r3
 800856a:	9e08      	ldr	r6, [sp, #32]
 800856c:	f7ff fc1e 	bl	8007dac <_Balloc>
 8008570:	4604      	mov	r4, r0
 8008572:	b930      	cbnz	r0, 8008582 <__d2b+0x22>
 8008574:	4602      	mov	r2, r0
 8008576:	f240 310f 	movw	r1, #783	@ 0x30f
 800857a:	4b23      	ldr	r3, [pc, #140]	@ (8008608 <__d2b+0xa8>)
 800857c:	4823      	ldr	r0, [pc, #140]	@ (800860c <__d2b+0xac>)
 800857e:	f000 fc91 	bl	8008ea4 <__assert_func>
 8008582:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008586:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800858a:	b10d      	cbz	r5, 8008590 <__d2b+0x30>
 800858c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008590:	9301      	str	r3, [sp, #4]
 8008592:	f1b8 0300 	subs.w	r3, r8, #0
 8008596:	d024      	beq.n	80085e2 <__d2b+0x82>
 8008598:	4668      	mov	r0, sp
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	f7ff fd17 	bl	8007fce <__lo0bits>
 80085a0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80085a4:	b1d8      	cbz	r0, 80085de <__d2b+0x7e>
 80085a6:	f1c0 0320 	rsb	r3, r0, #32
 80085aa:	fa02 f303 	lsl.w	r3, r2, r3
 80085ae:	430b      	orrs	r3, r1
 80085b0:	40c2      	lsrs	r2, r0
 80085b2:	6163      	str	r3, [r4, #20]
 80085b4:	9201      	str	r2, [sp, #4]
 80085b6:	9b01      	ldr	r3, [sp, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	bf0c      	ite	eq
 80085bc:	2201      	moveq	r2, #1
 80085be:	2202      	movne	r2, #2
 80085c0:	61a3      	str	r3, [r4, #24]
 80085c2:	6122      	str	r2, [r4, #16]
 80085c4:	b1ad      	cbz	r5, 80085f2 <__d2b+0x92>
 80085c6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80085ca:	4405      	add	r5, r0
 80085cc:	6035      	str	r5, [r6, #0]
 80085ce:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80085d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085d4:	6018      	str	r0, [r3, #0]
 80085d6:	4620      	mov	r0, r4
 80085d8:	b002      	add	sp, #8
 80085da:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80085de:	6161      	str	r1, [r4, #20]
 80085e0:	e7e9      	b.n	80085b6 <__d2b+0x56>
 80085e2:	a801      	add	r0, sp, #4
 80085e4:	f7ff fcf3 	bl	8007fce <__lo0bits>
 80085e8:	9b01      	ldr	r3, [sp, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	6163      	str	r3, [r4, #20]
 80085ee:	3020      	adds	r0, #32
 80085f0:	e7e7      	b.n	80085c2 <__d2b+0x62>
 80085f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80085f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085fa:	6030      	str	r0, [r6, #0]
 80085fc:	6918      	ldr	r0, [r3, #16]
 80085fe:	f7ff fcc7 	bl	8007f90 <__hi0bits>
 8008602:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008606:	e7e4      	b.n	80085d2 <__d2b+0x72>
 8008608:	08009658 	.word	0x08009658
 800860c:	080096e0 	.word	0x080096e0

08008610 <__ratio>:
 8008610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008614:	b085      	sub	sp, #20
 8008616:	e9cd 1000 	strd	r1, r0, [sp]
 800861a:	a902      	add	r1, sp, #8
 800861c:	f7ff ff58 	bl	80084d0 <__b2d>
 8008620:	468b      	mov	fp, r1
 8008622:	4606      	mov	r6, r0
 8008624:	460f      	mov	r7, r1
 8008626:	9800      	ldr	r0, [sp, #0]
 8008628:	a903      	add	r1, sp, #12
 800862a:	f7ff ff51 	bl	80084d0 <__b2d>
 800862e:	460d      	mov	r5, r1
 8008630:	9b01      	ldr	r3, [sp, #4]
 8008632:	4689      	mov	r9, r1
 8008634:	6919      	ldr	r1, [r3, #16]
 8008636:	9b00      	ldr	r3, [sp, #0]
 8008638:	4604      	mov	r4, r0
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	4630      	mov	r0, r6
 800863e:	1ac9      	subs	r1, r1, r3
 8008640:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008644:	1a9b      	subs	r3, r3, r2
 8008646:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800864a:	2b00      	cmp	r3, #0
 800864c:	bfcd      	iteet	gt
 800864e:	463a      	movgt	r2, r7
 8008650:	462a      	movle	r2, r5
 8008652:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008656:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800865a:	bfd8      	it	le
 800865c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008660:	464b      	mov	r3, r9
 8008662:	4622      	mov	r2, r4
 8008664:	4659      	mov	r1, fp
 8008666:	f7f8 f915 	bl	8000894 <__aeabi_ddiv>
 800866a:	b005      	add	sp, #20
 800866c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008670 <__copybits>:
 8008670:	3901      	subs	r1, #1
 8008672:	b570      	push	{r4, r5, r6, lr}
 8008674:	1149      	asrs	r1, r1, #5
 8008676:	6914      	ldr	r4, [r2, #16]
 8008678:	3101      	adds	r1, #1
 800867a:	f102 0314 	add.w	r3, r2, #20
 800867e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008682:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008686:	1f05      	subs	r5, r0, #4
 8008688:	42a3      	cmp	r3, r4
 800868a:	d30c      	bcc.n	80086a6 <__copybits+0x36>
 800868c:	1aa3      	subs	r3, r4, r2
 800868e:	3b11      	subs	r3, #17
 8008690:	f023 0303 	bic.w	r3, r3, #3
 8008694:	3211      	adds	r2, #17
 8008696:	42a2      	cmp	r2, r4
 8008698:	bf88      	it	hi
 800869a:	2300      	movhi	r3, #0
 800869c:	4418      	add	r0, r3
 800869e:	2300      	movs	r3, #0
 80086a0:	4288      	cmp	r0, r1
 80086a2:	d305      	bcc.n	80086b0 <__copybits+0x40>
 80086a4:	bd70      	pop	{r4, r5, r6, pc}
 80086a6:	f853 6b04 	ldr.w	r6, [r3], #4
 80086aa:	f845 6f04 	str.w	r6, [r5, #4]!
 80086ae:	e7eb      	b.n	8008688 <__copybits+0x18>
 80086b0:	f840 3b04 	str.w	r3, [r0], #4
 80086b4:	e7f4      	b.n	80086a0 <__copybits+0x30>

080086b6 <__any_on>:
 80086b6:	f100 0214 	add.w	r2, r0, #20
 80086ba:	6900      	ldr	r0, [r0, #16]
 80086bc:	114b      	asrs	r3, r1, #5
 80086be:	4298      	cmp	r0, r3
 80086c0:	b510      	push	{r4, lr}
 80086c2:	db11      	blt.n	80086e8 <__any_on+0x32>
 80086c4:	dd0a      	ble.n	80086dc <__any_on+0x26>
 80086c6:	f011 011f 	ands.w	r1, r1, #31
 80086ca:	d007      	beq.n	80086dc <__any_on+0x26>
 80086cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80086d0:	fa24 f001 	lsr.w	r0, r4, r1
 80086d4:	fa00 f101 	lsl.w	r1, r0, r1
 80086d8:	428c      	cmp	r4, r1
 80086da:	d10b      	bne.n	80086f4 <__any_on+0x3e>
 80086dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d803      	bhi.n	80086ec <__any_on+0x36>
 80086e4:	2000      	movs	r0, #0
 80086e6:	bd10      	pop	{r4, pc}
 80086e8:	4603      	mov	r3, r0
 80086ea:	e7f7      	b.n	80086dc <__any_on+0x26>
 80086ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086f0:	2900      	cmp	r1, #0
 80086f2:	d0f5      	beq.n	80086e0 <__any_on+0x2a>
 80086f4:	2001      	movs	r0, #1
 80086f6:	e7f6      	b.n	80086e6 <__any_on+0x30>

080086f8 <__ascii_wctomb>:
 80086f8:	4603      	mov	r3, r0
 80086fa:	4608      	mov	r0, r1
 80086fc:	b141      	cbz	r1, 8008710 <__ascii_wctomb+0x18>
 80086fe:	2aff      	cmp	r2, #255	@ 0xff
 8008700:	d904      	bls.n	800870c <__ascii_wctomb+0x14>
 8008702:	228a      	movs	r2, #138	@ 0x8a
 8008704:	f04f 30ff 	mov.w	r0, #4294967295
 8008708:	601a      	str	r2, [r3, #0]
 800870a:	4770      	bx	lr
 800870c:	2001      	movs	r0, #1
 800870e:	700a      	strb	r2, [r1, #0]
 8008710:	4770      	bx	lr

08008712 <__ssputs_r>:
 8008712:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008716:	461f      	mov	r7, r3
 8008718:	688e      	ldr	r6, [r1, #8]
 800871a:	4682      	mov	sl, r0
 800871c:	42be      	cmp	r6, r7
 800871e:	460c      	mov	r4, r1
 8008720:	4690      	mov	r8, r2
 8008722:	680b      	ldr	r3, [r1, #0]
 8008724:	d82d      	bhi.n	8008782 <__ssputs_r+0x70>
 8008726:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800872a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800872e:	d026      	beq.n	800877e <__ssputs_r+0x6c>
 8008730:	6965      	ldr	r5, [r4, #20]
 8008732:	6909      	ldr	r1, [r1, #16]
 8008734:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008738:	eba3 0901 	sub.w	r9, r3, r1
 800873c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008740:	1c7b      	adds	r3, r7, #1
 8008742:	444b      	add	r3, r9
 8008744:	106d      	asrs	r5, r5, #1
 8008746:	429d      	cmp	r5, r3
 8008748:	bf38      	it	cc
 800874a:	461d      	movcc	r5, r3
 800874c:	0553      	lsls	r3, r2, #21
 800874e:	d527      	bpl.n	80087a0 <__ssputs_r+0x8e>
 8008750:	4629      	mov	r1, r5
 8008752:	f7ff fa8d 	bl	8007c70 <_malloc_r>
 8008756:	4606      	mov	r6, r0
 8008758:	b360      	cbz	r0, 80087b4 <__ssputs_r+0xa2>
 800875a:	464a      	mov	r2, r9
 800875c:	6921      	ldr	r1, [r4, #16]
 800875e:	f7fe fece 	bl	80074fe <memcpy>
 8008762:	89a3      	ldrh	r3, [r4, #12]
 8008764:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800876c:	81a3      	strh	r3, [r4, #12]
 800876e:	6126      	str	r6, [r4, #16]
 8008770:	444e      	add	r6, r9
 8008772:	6026      	str	r6, [r4, #0]
 8008774:	463e      	mov	r6, r7
 8008776:	6165      	str	r5, [r4, #20]
 8008778:	eba5 0509 	sub.w	r5, r5, r9
 800877c:	60a5      	str	r5, [r4, #8]
 800877e:	42be      	cmp	r6, r7
 8008780:	d900      	bls.n	8008784 <__ssputs_r+0x72>
 8008782:	463e      	mov	r6, r7
 8008784:	4632      	mov	r2, r6
 8008786:	4641      	mov	r1, r8
 8008788:	6820      	ldr	r0, [r4, #0]
 800878a:	f000 fb53 	bl	8008e34 <memmove>
 800878e:	2000      	movs	r0, #0
 8008790:	68a3      	ldr	r3, [r4, #8]
 8008792:	1b9b      	subs	r3, r3, r6
 8008794:	60a3      	str	r3, [r4, #8]
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	4433      	add	r3, r6
 800879a:	6023      	str	r3, [r4, #0]
 800879c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a0:	462a      	mov	r2, r5
 80087a2:	f000 fbb9 	bl	8008f18 <_realloc_r>
 80087a6:	4606      	mov	r6, r0
 80087a8:	2800      	cmp	r0, #0
 80087aa:	d1e0      	bne.n	800876e <__ssputs_r+0x5c>
 80087ac:	4650      	mov	r0, sl
 80087ae:	6921      	ldr	r1, [r4, #16]
 80087b0:	f7fe feba 	bl	8007528 <_free_r>
 80087b4:	230c      	movs	r3, #12
 80087b6:	f8ca 3000 	str.w	r3, [sl]
 80087ba:	89a3      	ldrh	r3, [r4, #12]
 80087bc:	f04f 30ff 	mov.w	r0, #4294967295
 80087c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087c4:	81a3      	strh	r3, [r4, #12]
 80087c6:	e7e9      	b.n	800879c <__ssputs_r+0x8a>

080087c8 <_svfiprintf_r>:
 80087c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087cc:	4698      	mov	r8, r3
 80087ce:	898b      	ldrh	r3, [r1, #12]
 80087d0:	4607      	mov	r7, r0
 80087d2:	061b      	lsls	r3, r3, #24
 80087d4:	460d      	mov	r5, r1
 80087d6:	4614      	mov	r4, r2
 80087d8:	b09d      	sub	sp, #116	@ 0x74
 80087da:	d510      	bpl.n	80087fe <_svfiprintf_r+0x36>
 80087dc:	690b      	ldr	r3, [r1, #16]
 80087de:	b973      	cbnz	r3, 80087fe <_svfiprintf_r+0x36>
 80087e0:	2140      	movs	r1, #64	@ 0x40
 80087e2:	f7ff fa45 	bl	8007c70 <_malloc_r>
 80087e6:	6028      	str	r0, [r5, #0]
 80087e8:	6128      	str	r0, [r5, #16]
 80087ea:	b930      	cbnz	r0, 80087fa <_svfiprintf_r+0x32>
 80087ec:	230c      	movs	r3, #12
 80087ee:	603b      	str	r3, [r7, #0]
 80087f0:	f04f 30ff 	mov.w	r0, #4294967295
 80087f4:	b01d      	add	sp, #116	@ 0x74
 80087f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fa:	2340      	movs	r3, #64	@ 0x40
 80087fc:	616b      	str	r3, [r5, #20]
 80087fe:	2300      	movs	r3, #0
 8008800:	9309      	str	r3, [sp, #36]	@ 0x24
 8008802:	2320      	movs	r3, #32
 8008804:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008808:	2330      	movs	r3, #48	@ 0x30
 800880a:	f04f 0901 	mov.w	r9, #1
 800880e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008812:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80089ac <_svfiprintf_r+0x1e4>
 8008816:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800881a:	4623      	mov	r3, r4
 800881c:	469a      	mov	sl, r3
 800881e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008822:	b10a      	cbz	r2, 8008828 <_svfiprintf_r+0x60>
 8008824:	2a25      	cmp	r2, #37	@ 0x25
 8008826:	d1f9      	bne.n	800881c <_svfiprintf_r+0x54>
 8008828:	ebba 0b04 	subs.w	fp, sl, r4
 800882c:	d00b      	beq.n	8008846 <_svfiprintf_r+0x7e>
 800882e:	465b      	mov	r3, fp
 8008830:	4622      	mov	r2, r4
 8008832:	4629      	mov	r1, r5
 8008834:	4638      	mov	r0, r7
 8008836:	f7ff ff6c 	bl	8008712 <__ssputs_r>
 800883a:	3001      	adds	r0, #1
 800883c:	f000 80a7 	beq.w	800898e <_svfiprintf_r+0x1c6>
 8008840:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008842:	445a      	add	r2, fp
 8008844:	9209      	str	r2, [sp, #36]	@ 0x24
 8008846:	f89a 3000 	ldrb.w	r3, [sl]
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 809f 	beq.w	800898e <_svfiprintf_r+0x1c6>
 8008850:	2300      	movs	r3, #0
 8008852:	f04f 32ff 	mov.w	r2, #4294967295
 8008856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800885a:	f10a 0a01 	add.w	sl, sl, #1
 800885e:	9304      	str	r3, [sp, #16]
 8008860:	9307      	str	r3, [sp, #28]
 8008862:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008866:	931a      	str	r3, [sp, #104]	@ 0x68
 8008868:	4654      	mov	r4, sl
 800886a:	2205      	movs	r2, #5
 800886c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008870:	484e      	ldr	r0, [pc, #312]	@ (80089ac <_svfiprintf_r+0x1e4>)
 8008872:	f000 fb09 	bl	8008e88 <memchr>
 8008876:	9a04      	ldr	r2, [sp, #16]
 8008878:	b9d8      	cbnz	r0, 80088b2 <_svfiprintf_r+0xea>
 800887a:	06d0      	lsls	r0, r2, #27
 800887c:	bf44      	itt	mi
 800887e:	2320      	movmi	r3, #32
 8008880:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008884:	0711      	lsls	r1, r2, #28
 8008886:	bf44      	itt	mi
 8008888:	232b      	movmi	r3, #43	@ 0x2b
 800888a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800888e:	f89a 3000 	ldrb.w	r3, [sl]
 8008892:	2b2a      	cmp	r3, #42	@ 0x2a
 8008894:	d015      	beq.n	80088c2 <_svfiprintf_r+0xfa>
 8008896:	4654      	mov	r4, sl
 8008898:	2000      	movs	r0, #0
 800889a:	f04f 0c0a 	mov.w	ip, #10
 800889e:	9a07      	ldr	r2, [sp, #28]
 80088a0:	4621      	mov	r1, r4
 80088a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088a6:	3b30      	subs	r3, #48	@ 0x30
 80088a8:	2b09      	cmp	r3, #9
 80088aa:	d94b      	bls.n	8008944 <_svfiprintf_r+0x17c>
 80088ac:	b1b0      	cbz	r0, 80088dc <_svfiprintf_r+0x114>
 80088ae:	9207      	str	r2, [sp, #28]
 80088b0:	e014      	b.n	80088dc <_svfiprintf_r+0x114>
 80088b2:	eba0 0308 	sub.w	r3, r0, r8
 80088b6:	fa09 f303 	lsl.w	r3, r9, r3
 80088ba:	4313      	orrs	r3, r2
 80088bc:	46a2      	mov	sl, r4
 80088be:	9304      	str	r3, [sp, #16]
 80088c0:	e7d2      	b.n	8008868 <_svfiprintf_r+0xa0>
 80088c2:	9b03      	ldr	r3, [sp, #12]
 80088c4:	1d19      	adds	r1, r3, #4
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	9103      	str	r1, [sp, #12]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	bfbb      	ittet	lt
 80088ce:	425b      	neglt	r3, r3
 80088d0:	f042 0202 	orrlt.w	r2, r2, #2
 80088d4:	9307      	strge	r3, [sp, #28]
 80088d6:	9307      	strlt	r3, [sp, #28]
 80088d8:	bfb8      	it	lt
 80088da:	9204      	strlt	r2, [sp, #16]
 80088dc:	7823      	ldrb	r3, [r4, #0]
 80088de:	2b2e      	cmp	r3, #46	@ 0x2e
 80088e0:	d10a      	bne.n	80088f8 <_svfiprintf_r+0x130>
 80088e2:	7863      	ldrb	r3, [r4, #1]
 80088e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80088e6:	d132      	bne.n	800894e <_svfiprintf_r+0x186>
 80088e8:	9b03      	ldr	r3, [sp, #12]
 80088ea:	3402      	adds	r4, #2
 80088ec:	1d1a      	adds	r2, r3, #4
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	9203      	str	r2, [sp, #12]
 80088f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088f6:	9305      	str	r3, [sp, #20]
 80088f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80089b0 <_svfiprintf_r+0x1e8>
 80088fc:	2203      	movs	r2, #3
 80088fe:	4650      	mov	r0, sl
 8008900:	7821      	ldrb	r1, [r4, #0]
 8008902:	f000 fac1 	bl	8008e88 <memchr>
 8008906:	b138      	cbz	r0, 8008918 <_svfiprintf_r+0x150>
 8008908:	2240      	movs	r2, #64	@ 0x40
 800890a:	9b04      	ldr	r3, [sp, #16]
 800890c:	eba0 000a 	sub.w	r0, r0, sl
 8008910:	4082      	lsls	r2, r0
 8008912:	4313      	orrs	r3, r2
 8008914:	3401      	adds	r4, #1
 8008916:	9304      	str	r3, [sp, #16]
 8008918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800891c:	2206      	movs	r2, #6
 800891e:	4825      	ldr	r0, [pc, #148]	@ (80089b4 <_svfiprintf_r+0x1ec>)
 8008920:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008924:	f000 fab0 	bl	8008e88 <memchr>
 8008928:	2800      	cmp	r0, #0
 800892a:	d036      	beq.n	800899a <_svfiprintf_r+0x1d2>
 800892c:	4b22      	ldr	r3, [pc, #136]	@ (80089b8 <_svfiprintf_r+0x1f0>)
 800892e:	bb1b      	cbnz	r3, 8008978 <_svfiprintf_r+0x1b0>
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	3307      	adds	r3, #7
 8008934:	f023 0307 	bic.w	r3, r3, #7
 8008938:	3308      	adds	r3, #8
 800893a:	9303      	str	r3, [sp, #12]
 800893c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800893e:	4433      	add	r3, r6
 8008940:	9309      	str	r3, [sp, #36]	@ 0x24
 8008942:	e76a      	b.n	800881a <_svfiprintf_r+0x52>
 8008944:	460c      	mov	r4, r1
 8008946:	2001      	movs	r0, #1
 8008948:	fb0c 3202 	mla	r2, ip, r2, r3
 800894c:	e7a8      	b.n	80088a0 <_svfiprintf_r+0xd8>
 800894e:	2300      	movs	r3, #0
 8008950:	f04f 0c0a 	mov.w	ip, #10
 8008954:	4619      	mov	r1, r3
 8008956:	3401      	adds	r4, #1
 8008958:	9305      	str	r3, [sp, #20]
 800895a:	4620      	mov	r0, r4
 800895c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008960:	3a30      	subs	r2, #48	@ 0x30
 8008962:	2a09      	cmp	r2, #9
 8008964:	d903      	bls.n	800896e <_svfiprintf_r+0x1a6>
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0c6      	beq.n	80088f8 <_svfiprintf_r+0x130>
 800896a:	9105      	str	r1, [sp, #20]
 800896c:	e7c4      	b.n	80088f8 <_svfiprintf_r+0x130>
 800896e:	4604      	mov	r4, r0
 8008970:	2301      	movs	r3, #1
 8008972:	fb0c 2101 	mla	r1, ip, r1, r2
 8008976:	e7f0      	b.n	800895a <_svfiprintf_r+0x192>
 8008978:	ab03      	add	r3, sp, #12
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	462a      	mov	r2, r5
 800897e:	4638      	mov	r0, r7
 8008980:	4b0e      	ldr	r3, [pc, #56]	@ (80089bc <_svfiprintf_r+0x1f4>)
 8008982:	a904      	add	r1, sp, #16
 8008984:	f3af 8000 	nop.w
 8008988:	1c42      	adds	r2, r0, #1
 800898a:	4606      	mov	r6, r0
 800898c:	d1d6      	bne.n	800893c <_svfiprintf_r+0x174>
 800898e:	89ab      	ldrh	r3, [r5, #12]
 8008990:	065b      	lsls	r3, r3, #25
 8008992:	f53f af2d 	bmi.w	80087f0 <_svfiprintf_r+0x28>
 8008996:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008998:	e72c      	b.n	80087f4 <_svfiprintf_r+0x2c>
 800899a:	ab03      	add	r3, sp, #12
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	462a      	mov	r2, r5
 80089a0:	4638      	mov	r0, r7
 80089a2:	4b06      	ldr	r3, [pc, #24]	@ (80089bc <_svfiprintf_r+0x1f4>)
 80089a4:	a904      	add	r1, sp, #16
 80089a6:	f000 f87d 	bl	8008aa4 <_printf_i>
 80089aa:	e7ed      	b.n	8008988 <_svfiprintf_r+0x1c0>
 80089ac:	08009939 	.word	0x08009939
 80089b0:	0800993f 	.word	0x0800993f
 80089b4:	08009943 	.word	0x08009943
 80089b8:	00000000 	.word	0x00000000
 80089bc:	08008713 	.word	0x08008713

080089c0 <_printf_common>:
 80089c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c4:	4616      	mov	r6, r2
 80089c6:	4698      	mov	r8, r3
 80089c8:	688a      	ldr	r2, [r1, #8]
 80089ca:	690b      	ldr	r3, [r1, #16]
 80089cc:	4607      	mov	r7, r0
 80089ce:	4293      	cmp	r3, r2
 80089d0:	bfb8      	it	lt
 80089d2:	4613      	movlt	r3, r2
 80089d4:	6033      	str	r3, [r6, #0]
 80089d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089da:	460c      	mov	r4, r1
 80089dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089e0:	b10a      	cbz	r2, 80089e6 <_printf_common+0x26>
 80089e2:	3301      	adds	r3, #1
 80089e4:	6033      	str	r3, [r6, #0]
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	0699      	lsls	r1, r3, #26
 80089ea:	bf42      	ittt	mi
 80089ec:	6833      	ldrmi	r3, [r6, #0]
 80089ee:	3302      	addmi	r3, #2
 80089f0:	6033      	strmi	r3, [r6, #0]
 80089f2:	6825      	ldr	r5, [r4, #0]
 80089f4:	f015 0506 	ands.w	r5, r5, #6
 80089f8:	d106      	bne.n	8008a08 <_printf_common+0x48>
 80089fa:	f104 0a19 	add.w	sl, r4, #25
 80089fe:	68e3      	ldr	r3, [r4, #12]
 8008a00:	6832      	ldr	r2, [r6, #0]
 8008a02:	1a9b      	subs	r3, r3, r2
 8008a04:	42ab      	cmp	r3, r5
 8008a06:	dc2b      	bgt.n	8008a60 <_printf_common+0xa0>
 8008a08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a0c:	6822      	ldr	r2, [r4, #0]
 8008a0e:	3b00      	subs	r3, #0
 8008a10:	bf18      	it	ne
 8008a12:	2301      	movne	r3, #1
 8008a14:	0692      	lsls	r2, r2, #26
 8008a16:	d430      	bmi.n	8008a7a <_printf_common+0xba>
 8008a18:	4641      	mov	r1, r8
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a20:	47c8      	blx	r9
 8008a22:	3001      	adds	r0, #1
 8008a24:	d023      	beq.n	8008a6e <_printf_common+0xae>
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	6922      	ldr	r2, [r4, #16]
 8008a2a:	f003 0306 	and.w	r3, r3, #6
 8008a2e:	2b04      	cmp	r3, #4
 8008a30:	bf14      	ite	ne
 8008a32:	2500      	movne	r5, #0
 8008a34:	6833      	ldreq	r3, [r6, #0]
 8008a36:	f04f 0600 	mov.w	r6, #0
 8008a3a:	bf08      	it	eq
 8008a3c:	68e5      	ldreq	r5, [r4, #12]
 8008a3e:	f104 041a 	add.w	r4, r4, #26
 8008a42:	bf08      	it	eq
 8008a44:	1aed      	subeq	r5, r5, r3
 8008a46:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008a4a:	bf08      	it	eq
 8008a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a50:	4293      	cmp	r3, r2
 8008a52:	bfc4      	itt	gt
 8008a54:	1a9b      	subgt	r3, r3, r2
 8008a56:	18ed      	addgt	r5, r5, r3
 8008a58:	42b5      	cmp	r5, r6
 8008a5a:	d11a      	bne.n	8008a92 <_printf_common+0xd2>
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	e008      	b.n	8008a72 <_printf_common+0xb2>
 8008a60:	2301      	movs	r3, #1
 8008a62:	4652      	mov	r2, sl
 8008a64:	4641      	mov	r1, r8
 8008a66:	4638      	mov	r0, r7
 8008a68:	47c8      	blx	r9
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	d103      	bne.n	8008a76 <_printf_common+0xb6>
 8008a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a76:	3501      	adds	r5, #1
 8008a78:	e7c1      	b.n	80089fe <_printf_common+0x3e>
 8008a7a:	2030      	movs	r0, #48	@ 0x30
 8008a7c:	18e1      	adds	r1, r4, r3
 8008a7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a82:	1c5a      	adds	r2, r3, #1
 8008a84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a88:	4422      	add	r2, r4
 8008a8a:	3302      	adds	r3, #2
 8008a8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a90:	e7c2      	b.n	8008a18 <_printf_common+0x58>
 8008a92:	2301      	movs	r3, #1
 8008a94:	4622      	mov	r2, r4
 8008a96:	4641      	mov	r1, r8
 8008a98:	4638      	mov	r0, r7
 8008a9a:	47c8      	blx	r9
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	d0e6      	beq.n	8008a6e <_printf_common+0xae>
 8008aa0:	3601      	adds	r6, #1
 8008aa2:	e7d9      	b.n	8008a58 <_printf_common+0x98>

08008aa4 <_printf_i>:
 8008aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa8:	7e0f      	ldrb	r7, [r1, #24]
 8008aaa:	4691      	mov	r9, r2
 8008aac:	2f78      	cmp	r7, #120	@ 0x78
 8008aae:	4680      	mov	r8, r0
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	469a      	mov	sl, r3
 8008ab4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ab6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008aba:	d807      	bhi.n	8008acc <_printf_i+0x28>
 8008abc:	2f62      	cmp	r7, #98	@ 0x62
 8008abe:	d80a      	bhi.n	8008ad6 <_printf_i+0x32>
 8008ac0:	2f00      	cmp	r7, #0
 8008ac2:	f000 80d3 	beq.w	8008c6c <_printf_i+0x1c8>
 8008ac6:	2f58      	cmp	r7, #88	@ 0x58
 8008ac8:	f000 80ba 	beq.w	8008c40 <_printf_i+0x19c>
 8008acc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ad0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ad4:	e03a      	b.n	8008b4c <_printf_i+0xa8>
 8008ad6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ada:	2b15      	cmp	r3, #21
 8008adc:	d8f6      	bhi.n	8008acc <_printf_i+0x28>
 8008ade:	a101      	add	r1, pc, #4	@ (adr r1, 8008ae4 <_printf_i+0x40>)
 8008ae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ae4:	08008b3d 	.word	0x08008b3d
 8008ae8:	08008b51 	.word	0x08008b51
 8008aec:	08008acd 	.word	0x08008acd
 8008af0:	08008acd 	.word	0x08008acd
 8008af4:	08008acd 	.word	0x08008acd
 8008af8:	08008acd 	.word	0x08008acd
 8008afc:	08008b51 	.word	0x08008b51
 8008b00:	08008acd 	.word	0x08008acd
 8008b04:	08008acd 	.word	0x08008acd
 8008b08:	08008acd 	.word	0x08008acd
 8008b0c:	08008acd 	.word	0x08008acd
 8008b10:	08008c53 	.word	0x08008c53
 8008b14:	08008b7b 	.word	0x08008b7b
 8008b18:	08008c0d 	.word	0x08008c0d
 8008b1c:	08008acd 	.word	0x08008acd
 8008b20:	08008acd 	.word	0x08008acd
 8008b24:	08008c75 	.word	0x08008c75
 8008b28:	08008acd 	.word	0x08008acd
 8008b2c:	08008b7b 	.word	0x08008b7b
 8008b30:	08008acd 	.word	0x08008acd
 8008b34:	08008acd 	.word	0x08008acd
 8008b38:	08008c15 	.word	0x08008c15
 8008b3c:	6833      	ldr	r3, [r6, #0]
 8008b3e:	1d1a      	adds	r2, r3, #4
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6032      	str	r2, [r6, #0]
 8008b44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e09e      	b.n	8008c8e <_printf_i+0x1ea>
 8008b50:	6833      	ldr	r3, [r6, #0]
 8008b52:	6820      	ldr	r0, [r4, #0]
 8008b54:	1d19      	adds	r1, r3, #4
 8008b56:	6031      	str	r1, [r6, #0]
 8008b58:	0606      	lsls	r6, r0, #24
 8008b5a:	d501      	bpl.n	8008b60 <_printf_i+0xbc>
 8008b5c:	681d      	ldr	r5, [r3, #0]
 8008b5e:	e003      	b.n	8008b68 <_printf_i+0xc4>
 8008b60:	0645      	lsls	r5, r0, #25
 8008b62:	d5fb      	bpl.n	8008b5c <_printf_i+0xb8>
 8008b64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b68:	2d00      	cmp	r5, #0
 8008b6a:	da03      	bge.n	8008b74 <_printf_i+0xd0>
 8008b6c:	232d      	movs	r3, #45	@ 0x2d
 8008b6e:	426d      	negs	r5, r5
 8008b70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b74:	230a      	movs	r3, #10
 8008b76:	4859      	ldr	r0, [pc, #356]	@ (8008cdc <_printf_i+0x238>)
 8008b78:	e011      	b.n	8008b9e <_printf_i+0xfa>
 8008b7a:	6821      	ldr	r1, [r4, #0]
 8008b7c:	6833      	ldr	r3, [r6, #0]
 8008b7e:	0608      	lsls	r0, r1, #24
 8008b80:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b84:	d402      	bmi.n	8008b8c <_printf_i+0xe8>
 8008b86:	0649      	lsls	r1, r1, #25
 8008b88:	bf48      	it	mi
 8008b8a:	b2ad      	uxthmi	r5, r5
 8008b8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b8e:	6033      	str	r3, [r6, #0]
 8008b90:	bf14      	ite	ne
 8008b92:	230a      	movne	r3, #10
 8008b94:	2308      	moveq	r3, #8
 8008b96:	4851      	ldr	r0, [pc, #324]	@ (8008cdc <_printf_i+0x238>)
 8008b98:	2100      	movs	r1, #0
 8008b9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b9e:	6866      	ldr	r6, [r4, #4]
 8008ba0:	2e00      	cmp	r6, #0
 8008ba2:	bfa8      	it	ge
 8008ba4:	6821      	ldrge	r1, [r4, #0]
 8008ba6:	60a6      	str	r6, [r4, #8]
 8008ba8:	bfa4      	itt	ge
 8008baa:	f021 0104 	bicge.w	r1, r1, #4
 8008bae:	6021      	strge	r1, [r4, #0]
 8008bb0:	b90d      	cbnz	r5, 8008bb6 <_printf_i+0x112>
 8008bb2:	2e00      	cmp	r6, #0
 8008bb4:	d04b      	beq.n	8008c4e <_printf_i+0x1aa>
 8008bb6:	4616      	mov	r6, r2
 8008bb8:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bbc:	fb03 5711 	mls	r7, r3, r1, r5
 8008bc0:	5dc7      	ldrb	r7, [r0, r7]
 8008bc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bc6:	462f      	mov	r7, r5
 8008bc8:	42bb      	cmp	r3, r7
 8008bca:	460d      	mov	r5, r1
 8008bcc:	d9f4      	bls.n	8008bb8 <_printf_i+0x114>
 8008bce:	2b08      	cmp	r3, #8
 8008bd0:	d10b      	bne.n	8008bea <_printf_i+0x146>
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	07df      	lsls	r7, r3, #31
 8008bd6:	d508      	bpl.n	8008bea <_printf_i+0x146>
 8008bd8:	6923      	ldr	r3, [r4, #16]
 8008bda:	6861      	ldr	r1, [r4, #4]
 8008bdc:	4299      	cmp	r1, r3
 8008bde:	bfde      	ittt	le
 8008be0:	2330      	movle	r3, #48	@ 0x30
 8008be2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008be6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bea:	1b92      	subs	r2, r2, r6
 8008bec:	6122      	str	r2, [r4, #16]
 8008bee:	464b      	mov	r3, r9
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	4640      	mov	r0, r8
 8008bf4:	f8cd a000 	str.w	sl, [sp]
 8008bf8:	aa03      	add	r2, sp, #12
 8008bfa:	f7ff fee1 	bl	80089c0 <_printf_common>
 8008bfe:	3001      	adds	r0, #1
 8008c00:	d14a      	bne.n	8008c98 <_printf_i+0x1f4>
 8008c02:	f04f 30ff 	mov.w	r0, #4294967295
 8008c06:	b004      	add	sp, #16
 8008c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	f043 0320 	orr.w	r3, r3, #32
 8008c12:	6023      	str	r3, [r4, #0]
 8008c14:	2778      	movs	r7, #120	@ 0x78
 8008c16:	4832      	ldr	r0, [pc, #200]	@ (8008ce0 <_printf_i+0x23c>)
 8008c18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c1c:	6823      	ldr	r3, [r4, #0]
 8008c1e:	6831      	ldr	r1, [r6, #0]
 8008c20:	061f      	lsls	r7, r3, #24
 8008c22:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c26:	d402      	bmi.n	8008c2e <_printf_i+0x18a>
 8008c28:	065f      	lsls	r7, r3, #25
 8008c2a:	bf48      	it	mi
 8008c2c:	b2ad      	uxthmi	r5, r5
 8008c2e:	6031      	str	r1, [r6, #0]
 8008c30:	07d9      	lsls	r1, r3, #31
 8008c32:	bf44      	itt	mi
 8008c34:	f043 0320 	orrmi.w	r3, r3, #32
 8008c38:	6023      	strmi	r3, [r4, #0]
 8008c3a:	b11d      	cbz	r5, 8008c44 <_printf_i+0x1a0>
 8008c3c:	2310      	movs	r3, #16
 8008c3e:	e7ab      	b.n	8008b98 <_printf_i+0xf4>
 8008c40:	4826      	ldr	r0, [pc, #152]	@ (8008cdc <_printf_i+0x238>)
 8008c42:	e7e9      	b.n	8008c18 <_printf_i+0x174>
 8008c44:	6823      	ldr	r3, [r4, #0]
 8008c46:	f023 0320 	bic.w	r3, r3, #32
 8008c4a:	6023      	str	r3, [r4, #0]
 8008c4c:	e7f6      	b.n	8008c3c <_printf_i+0x198>
 8008c4e:	4616      	mov	r6, r2
 8008c50:	e7bd      	b.n	8008bce <_printf_i+0x12a>
 8008c52:	6833      	ldr	r3, [r6, #0]
 8008c54:	6825      	ldr	r5, [r4, #0]
 8008c56:	1d18      	adds	r0, r3, #4
 8008c58:	6961      	ldr	r1, [r4, #20]
 8008c5a:	6030      	str	r0, [r6, #0]
 8008c5c:	062e      	lsls	r6, r5, #24
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	d501      	bpl.n	8008c66 <_printf_i+0x1c2>
 8008c62:	6019      	str	r1, [r3, #0]
 8008c64:	e002      	b.n	8008c6c <_printf_i+0x1c8>
 8008c66:	0668      	lsls	r0, r5, #25
 8008c68:	d5fb      	bpl.n	8008c62 <_printf_i+0x1be>
 8008c6a:	8019      	strh	r1, [r3, #0]
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	4616      	mov	r6, r2
 8008c70:	6123      	str	r3, [r4, #16]
 8008c72:	e7bc      	b.n	8008bee <_printf_i+0x14a>
 8008c74:	6833      	ldr	r3, [r6, #0]
 8008c76:	2100      	movs	r1, #0
 8008c78:	1d1a      	adds	r2, r3, #4
 8008c7a:	6032      	str	r2, [r6, #0]
 8008c7c:	681e      	ldr	r6, [r3, #0]
 8008c7e:	6862      	ldr	r2, [r4, #4]
 8008c80:	4630      	mov	r0, r6
 8008c82:	f000 f901 	bl	8008e88 <memchr>
 8008c86:	b108      	cbz	r0, 8008c8c <_printf_i+0x1e8>
 8008c88:	1b80      	subs	r0, r0, r6
 8008c8a:	6060      	str	r0, [r4, #4]
 8008c8c:	6863      	ldr	r3, [r4, #4]
 8008c8e:	6123      	str	r3, [r4, #16]
 8008c90:	2300      	movs	r3, #0
 8008c92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c96:	e7aa      	b.n	8008bee <_printf_i+0x14a>
 8008c98:	4632      	mov	r2, r6
 8008c9a:	4649      	mov	r1, r9
 8008c9c:	4640      	mov	r0, r8
 8008c9e:	6923      	ldr	r3, [r4, #16]
 8008ca0:	47d0      	blx	sl
 8008ca2:	3001      	adds	r0, #1
 8008ca4:	d0ad      	beq.n	8008c02 <_printf_i+0x15e>
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	079b      	lsls	r3, r3, #30
 8008caa:	d413      	bmi.n	8008cd4 <_printf_i+0x230>
 8008cac:	68e0      	ldr	r0, [r4, #12]
 8008cae:	9b03      	ldr	r3, [sp, #12]
 8008cb0:	4298      	cmp	r0, r3
 8008cb2:	bfb8      	it	lt
 8008cb4:	4618      	movlt	r0, r3
 8008cb6:	e7a6      	b.n	8008c06 <_printf_i+0x162>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	4632      	mov	r2, r6
 8008cbc:	4649      	mov	r1, r9
 8008cbe:	4640      	mov	r0, r8
 8008cc0:	47d0      	blx	sl
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	d09d      	beq.n	8008c02 <_printf_i+0x15e>
 8008cc6:	3501      	adds	r5, #1
 8008cc8:	68e3      	ldr	r3, [r4, #12]
 8008cca:	9903      	ldr	r1, [sp, #12]
 8008ccc:	1a5b      	subs	r3, r3, r1
 8008cce:	42ab      	cmp	r3, r5
 8008cd0:	dcf2      	bgt.n	8008cb8 <_printf_i+0x214>
 8008cd2:	e7eb      	b.n	8008cac <_printf_i+0x208>
 8008cd4:	2500      	movs	r5, #0
 8008cd6:	f104 0619 	add.w	r6, r4, #25
 8008cda:	e7f5      	b.n	8008cc8 <_printf_i+0x224>
 8008cdc:	0800994a 	.word	0x0800994a
 8008ce0:	0800995b 	.word	0x0800995b

08008ce4 <__sflush_r>:
 8008ce4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cea:	0716      	lsls	r6, r2, #28
 8008cec:	4605      	mov	r5, r0
 8008cee:	460c      	mov	r4, r1
 8008cf0:	d454      	bmi.n	8008d9c <__sflush_r+0xb8>
 8008cf2:	684b      	ldr	r3, [r1, #4]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	dc02      	bgt.n	8008cfe <__sflush_r+0x1a>
 8008cf8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	dd48      	ble.n	8008d90 <__sflush_r+0xac>
 8008cfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d00:	2e00      	cmp	r6, #0
 8008d02:	d045      	beq.n	8008d90 <__sflush_r+0xac>
 8008d04:	2300      	movs	r3, #0
 8008d06:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008d0a:	682f      	ldr	r7, [r5, #0]
 8008d0c:	6a21      	ldr	r1, [r4, #32]
 8008d0e:	602b      	str	r3, [r5, #0]
 8008d10:	d030      	beq.n	8008d74 <__sflush_r+0x90>
 8008d12:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	0759      	lsls	r1, r3, #29
 8008d18:	d505      	bpl.n	8008d26 <__sflush_r+0x42>
 8008d1a:	6863      	ldr	r3, [r4, #4]
 8008d1c:	1ad2      	subs	r2, r2, r3
 8008d1e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d20:	b10b      	cbz	r3, 8008d26 <__sflush_r+0x42>
 8008d22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d24:	1ad2      	subs	r2, r2, r3
 8008d26:	2300      	movs	r3, #0
 8008d28:	4628      	mov	r0, r5
 8008d2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d2c:	6a21      	ldr	r1, [r4, #32]
 8008d2e:	47b0      	blx	r6
 8008d30:	1c43      	adds	r3, r0, #1
 8008d32:	89a3      	ldrh	r3, [r4, #12]
 8008d34:	d106      	bne.n	8008d44 <__sflush_r+0x60>
 8008d36:	6829      	ldr	r1, [r5, #0]
 8008d38:	291d      	cmp	r1, #29
 8008d3a:	d82b      	bhi.n	8008d94 <__sflush_r+0xb0>
 8008d3c:	4a28      	ldr	r2, [pc, #160]	@ (8008de0 <__sflush_r+0xfc>)
 8008d3e:	410a      	asrs	r2, r1
 8008d40:	07d6      	lsls	r6, r2, #31
 8008d42:	d427      	bmi.n	8008d94 <__sflush_r+0xb0>
 8008d44:	2200      	movs	r2, #0
 8008d46:	6062      	str	r2, [r4, #4]
 8008d48:	6922      	ldr	r2, [r4, #16]
 8008d4a:	04d9      	lsls	r1, r3, #19
 8008d4c:	6022      	str	r2, [r4, #0]
 8008d4e:	d504      	bpl.n	8008d5a <__sflush_r+0x76>
 8008d50:	1c42      	adds	r2, r0, #1
 8008d52:	d101      	bne.n	8008d58 <__sflush_r+0x74>
 8008d54:	682b      	ldr	r3, [r5, #0]
 8008d56:	b903      	cbnz	r3, 8008d5a <__sflush_r+0x76>
 8008d58:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d5a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d5c:	602f      	str	r7, [r5, #0]
 8008d5e:	b1b9      	cbz	r1, 8008d90 <__sflush_r+0xac>
 8008d60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d64:	4299      	cmp	r1, r3
 8008d66:	d002      	beq.n	8008d6e <__sflush_r+0x8a>
 8008d68:	4628      	mov	r0, r5
 8008d6a:	f7fe fbdd 	bl	8007528 <_free_r>
 8008d6e:	2300      	movs	r3, #0
 8008d70:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d72:	e00d      	b.n	8008d90 <__sflush_r+0xac>
 8008d74:	2301      	movs	r3, #1
 8008d76:	4628      	mov	r0, r5
 8008d78:	47b0      	blx	r6
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	1c50      	adds	r0, r2, #1
 8008d7e:	d1c9      	bne.n	8008d14 <__sflush_r+0x30>
 8008d80:	682b      	ldr	r3, [r5, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d0c6      	beq.n	8008d14 <__sflush_r+0x30>
 8008d86:	2b1d      	cmp	r3, #29
 8008d88:	d001      	beq.n	8008d8e <__sflush_r+0xaa>
 8008d8a:	2b16      	cmp	r3, #22
 8008d8c:	d11d      	bne.n	8008dca <__sflush_r+0xe6>
 8008d8e:	602f      	str	r7, [r5, #0]
 8008d90:	2000      	movs	r0, #0
 8008d92:	e021      	b.n	8008dd8 <__sflush_r+0xf4>
 8008d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d98:	b21b      	sxth	r3, r3
 8008d9a:	e01a      	b.n	8008dd2 <__sflush_r+0xee>
 8008d9c:	690f      	ldr	r7, [r1, #16]
 8008d9e:	2f00      	cmp	r7, #0
 8008da0:	d0f6      	beq.n	8008d90 <__sflush_r+0xac>
 8008da2:	0793      	lsls	r3, r2, #30
 8008da4:	bf18      	it	ne
 8008da6:	2300      	movne	r3, #0
 8008da8:	680e      	ldr	r6, [r1, #0]
 8008daa:	bf08      	it	eq
 8008dac:	694b      	ldreq	r3, [r1, #20]
 8008dae:	1bf6      	subs	r6, r6, r7
 8008db0:	600f      	str	r7, [r1, #0]
 8008db2:	608b      	str	r3, [r1, #8]
 8008db4:	2e00      	cmp	r6, #0
 8008db6:	ddeb      	ble.n	8008d90 <__sflush_r+0xac>
 8008db8:	4633      	mov	r3, r6
 8008dba:	463a      	mov	r2, r7
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	6a21      	ldr	r1, [r4, #32]
 8008dc0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008dc4:	47e0      	blx	ip
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	dc07      	bgt.n	8008dda <__sflush_r+0xf6>
 8008dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd6:	81a3      	strh	r3, [r4, #12]
 8008dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dda:	4407      	add	r7, r0
 8008ddc:	1a36      	subs	r6, r6, r0
 8008dde:	e7e9      	b.n	8008db4 <__sflush_r+0xd0>
 8008de0:	dfbffffe 	.word	0xdfbffffe

08008de4 <_fflush_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	690b      	ldr	r3, [r1, #16]
 8008de8:	4605      	mov	r5, r0
 8008dea:	460c      	mov	r4, r1
 8008dec:	b913      	cbnz	r3, 8008df4 <_fflush_r+0x10>
 8008dee:	2500      	movs	r5, #0
 8008df0:	4628      	mov	r0, r5
 8008df2:	bd38      	pop	{r3, r4, r5, pc}
 8008df4:	b118      	cbz	r0, 8008dfe <_fflush_r+0x1a>
 8008df6:	6a03      	ldr	r3, [r0, #32]
 8008df8:	b90b      	cbnz	r3, 8008dfe <_fflush_r+0x1a>
 8008dfa:	f7fe fa59 	bl	80072b0 <__sinit>
 8008dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d0f3      	beq.n	8008dee <_fflush_r+0xa>
 8008e06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e08:	07d0      	lsls	r0, r2, #31
 8008e0a:	d404      	bmi.n	8008e16 <_fflush_r+0x32>
 8008e0c:	0599      	lsls	r1, r3, #22
 8008e0e:	d402      	bmi.n	8008e16 <_fflush_r+0x32>
 8008e10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e12:	f7fe fb72 	bl	80074fa <__retarget_lock_acquire_recursive>
 8008e16:	4628      	mov	r0, r5
 8008e18:	4621      	mov	r1, r4
 8008e1a:	f7ff ff63 	bl	8008ce4 <__sflush_r>
 8008e1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e20:	4605      	mov	r5, r0
 8008e22:	07da      	lsls	r2, r3, #31
 8008e24:	d4e4      	bmi.n	8008df0 <_fflush_r+0xc>
 8008e26:	89a3      	ldrh	r3, [r4, #12]
 8008e28:	059b      	lsls	r3, r3, #22
 8008e2a:	d4e1      	bmi.n	8008df0 <_fflush_r+0xc>
 8008e2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e2e:	f7fe fb65 	bl	80074fc <__retarget_lock_release_recursive>
 8008e32:	e7dd      	b.n	8008df0 <_fflush_r+0xc>

08008e34 <memmove>:
 8008e34:	4288      	cmp	r0, r1
 8008e36:	b510      	push	{r4, lr}
 8008e38:	eb01 0402 	add.w	r4, r1, r2
 8008e3c:	d902      	bls.n	8008e44 <memmove+0x10>
 8008e3e:	4284      	cmp	r4, r0
 8008e40:	4623      	mov	r3, r4
 8008e42:	d807      	bhi.n	8008e54 <memmove+0x20>
 8008e44:	1e43      	subs	r3, r0, #1
 8008e46:	42a1      	cmp	r1, r4
 8008e48:	d008      	beq.n	8008e5c <memmove+0x28>
 8008e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e52:	e7f8      	b.n	8008e46 <memmove+0x12>
 8008e54:	4601      	mov	r1, r0
 8008e56:	4402      	add	r2, r0
 8008e58:	428a      	cmp	r2, r1
 8008e5a:	d100      	bne.n	8008e5e <memmove+0x2a>
 8008e5c:	bd10      	pop	{r4, pc}
 8008e5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e66:	e7f7      	b.n	8008e58 <memmove+0x24>

08008e68 <_sbrk_r>:
 8008e68:	b538      	push	{r3, r4, r5, lr}
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	4d05      	ldr	r5, [pc, #20]	@ (8008e84 <_sbrk_r+0x1c>)
 8008e6e:	4604      	mov	r4, r0
 8008e70:	4608      	mov	r0, r1
 8008e72:	602b      	str	r3, [r5, #0]
 8008e74:	f7f8 ffb2 	bl	8001ddc <_sbrk>
 8008e78:	1c43      	adds	r3, r0, #1
 8008e7a:	d102      	bne.n	8008e82 <_sbrk_r+0x1a>
 8008e7c:	682b      	ldr	r3, [r5, #0]
 8008e7e:	b103      	cbz	r3, 8008e82 <_sbrk_r+0x1a>
 8008e80:	6023      	str	r3, [r4, #0]
 8008e82:	bd38      	pop	{r3, r4, r5, pc}
 8008e84:	20000460 	.word	0x20000460

08008e88 <memchr>:
 8008e88:	4603      	mov	r3, r0
 8008e8a:	b510      	push	{r4, lr}
 8008e8c:	b2c9      	uxtb	r1, r1
 8008e8e:	4402      	add	r2, r0
 8008e90:	4293      	cmp	r3, r2
 8008e92:	4618      	mov	r0, r3
 8008e94:	d101      	bne.n	8008e9a <memchr+0x12>
 8008e96:	2000      	movs	r0, #0
 8008e98:	e003      	b.n	8008ea2 <memchr+0x1a>
 8008e9a:	7804      	ldrb	r4, [r0, #0]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	428c      	cmp	r4, r1
 8008ea0:	d1f6      	bne.n	8008e90 <memchr+0x8>
 8008ea2:	bd10      	pop	{r4, pc}

08008ea4 <__assert_func>:
 8008ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ea6:	4614      	mov	r4, r2
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	4b09      	ldr	r3, [pc, #36]	@ (8008ed0 <__assert_func+0x2c>)
 8008eac:	4605      	mov	r5, r0
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68d8      	ldr	r0, [r3, #12]
 8008eb2:	b954      	cbnz	r4, 8008eca <__assert_func+0x26>
 8008eb4:	4b07      	ldr	r3, [pc, #28]	@ (8008ed4 <__assert_func+0x30>)
 8008eb6:	461c      	mov	r4, r3
 8008eb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ebc:	9100      	str	r1, [sp, #0]
 8008ebe:	462b      	mov	r3, r5
 8008ec0:	4905      	ldr	r1, [pc, #20]	@ (8008ed8 <__assert_func+0x34>)
 8008ec2:	f000 f857 	bl	8008f74 <fiprintf>
 8008ec6:	f000 f867 	bl	8008f98 <abort>
 8008eca:	4b04      	ldr	r3, [pc, #16]	@ (8008edc <__assert_func+0x38>)
 8008ecc:	e7f4      	b.n	8008eb8 <__assert_func+0x14>
 8008ece:	bf00      	nop
 8008ed0:	200001c4 	.word	0x200001c4
 8008ed4:	080099a7 	.word	0x080099a7
 8008ed8:	08009979 	.word	0x08009979
 8008edc:	0800996c 	.word	0x0800996c

08008ee0 <_calloc_r>:
 8008ee0:	b570      	push	{r4, r5, r6, lr}
 8008ee2:	fba1 5402 	umull	r5, r4, r1, r2
 8008ee6:	b93c      	cbnz	r4, 8008ef8 <_calloc_r+0x18>
 8008ee8:	4629      	mov	r1, r5
 8008eea:	f7fe fec1 	bl	8007c70 <_malloc_r>
 8008eee:	4606      	mov	r6, r0
 8008ef0:	b928      	cbnz	r0, 8008efe <_calloc_r+0x1e>
 8008ef2:	2600      	movs	r6, #0
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}
 8008ef8:	220c      	movs	r2, #12
 8008efa:	6002      	str	r2, [r0, #0]
 8008efc:	e7f9      	b.n	8008ef2 <_calloc_r+0x12>
 8008efe:	462a      	mov	r2, r5
 8008f00:	4621      	mov	r1, r4
 8008f02:	f7fe fa6e 	bl	80073e2 <memset>
 8008f06:	e7f5      	b.n	8008ef4 <_calloc_r+0x14>

08008f08 <malloc>:
 8008f08:	4b02      	ldr	r3, [pc, #8]	@ (8008f14 <malloc+0xc>)
 8008f0a:	4601      	mov	r1, r0
 8008f0c:	6818      	ldr	r0, [r3, #0]
 8008f0e:	f7fe beaf 	b.w	8007c70 <_malloc_r>
 8008f12:	bf00      	nop
 8008f14:	200001c4 	.word	0x200001c4

08008f18 <_realloc_r>:
 8008f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f1c:	4680      	mov	r8, r0
 8008f1e:	4615      	mov	r5, r2
 8008f20:	460c      	mov	r4, r1
 8008f22:	b921      	cbnz	r1, 8008f2e <_realloc_r+0x16>
 8008f24:	4611      	mov	r1, r2
 8008f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f2a:	f7fe bea1 	b.w	8007c70 <_malloc_r>
 8008f2e:	b92a      	cbnz	r2, 8008f3c <_realloc_r+0x24>
 8008f30:	f7fe fafa 	bl	8007528 <_free_r>
 8008f34:	2400      	movs	r4, #0
 8008f36:	4620      	mov	r0, r4
 8008f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f3c:	f000 f833 	bl	8008fa6 <_malloc_usable_size_r>
 8008f40:	4285      	cmp	r5, r0
 8008f42:	4606      	mov	r6, r0
 8008f44:	d802      	bhi.n	8008f4c <_realloc_r+0x34>
 8008f46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008f4a:	d8f4      	bhi.n	8008f36 <_realloc_r+0x1e>
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	4640      	mov	r0, r8
 8008f50:	f7fe fe8e 	bl	8007c70 <_malloc_r>
 8008f54:	4607      	mov	r7, r0
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d0ec      	beq.n	8008f34 <_realloc_r+0x1c>
 8008f5a:	42b5      	cmp	r5, r6
 8008f5c:	462a      	mov	r2, r5
 8008f5e:	4621      	mov	r1, r4
 8008f60:	bf28      	it	cs
 8008f62:	4632      	movcs	r2, r6
 8008f64:	f7fe facb 	bl	80074fe <memcpy>
 8008f68:	4621      	mov	r1, r4
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	f7fe fadc 	bl	8007528 <_free_r>
 8008f70:	463c      	mov	r4, r7
 8008f72:	e7e0      	b.n	8008f36 <_realloc_r+0x1e>

08008f74 <fiprintf>:
 8008f74:	b40e      	push	{r1, r2, r3}
 8008f76:	b503      	push	{r0, r1, lr}
 8008f78:	4601      	mov	r1, r0
 8008f7a:	ab03      	add	r3, sp, #12
 8008f7c:	4805      	ldr	r0, [pc, #20]	@ (8008f94 <fiprintf+0x20>)
 8008f7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f82:	6800      	ldr	r0, [r0, #0]
 8008f84:	9301      	str	r3, [sp, #4]
 8008f86:	f000 f83d 	bl	8009004 <_vfiprintf_r>
 8008f8a:	b002      	add	sp, #8
 8008f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f90:	b003      	add	sp, #12
 8008f92:	4770      	bx	lr
 8008f94:	200001c4 	.word	0x200001c4

08008f98 <abort>:
 8008f98:	2006      	movs	r0, #6
 8008f9a:	b508      	push	{r3, lr}
 8008f9c:	f000 fa06 	bl	80093ac <raise>
 8008fa0:	2001      	movs	r0, #1
 8008fa2:	f7f8 fea6 	bl	8001cf2 <_exit>

08008fa6 <_malloc_usable_size_r>:
 8008fa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008faa:	1f18      	subs	r0, r3, #4
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	bfbc      	itt	lt
 8008fb0:	580b      	ldrlt	r3, [r1, r0]
 8008fb2:	18c0      	addlt	r0, r0, r3
 8008fb4:	4770      	bx	lr

08008fb6 <__sfputc_r>:
 8008fb6:	6893      	ldr	r3, [r2, #8]
 8008fb8:	b410      	push	{r4}
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	6093      	str	r3, [r2, #8]
 8008fc0:	da07      	bge.n	8008fd2 <__sfputc_r+0x1c>
 8008fc2:	6994      	ldr	r4, [r2, #24]
 8008fc4:	42a3      	cmp	r3, r4
 8008fc6:	db01      	blt.n	8008fcc <__sfputc_r+0x16>
 8008fc8:	290a      	cmp	r1, #10
 8008fca:	d102      	bne.n	8008fd2 <__sfputc_r+0x1c>
 8008fcc:	bc10      	pop	{r4}
 8008fce:	f000 b931 	b.w	8009234 <__swbuf_r>
 8008fd2:	6813      	ldr	r3, [r2, #0]
 8008fd4:	1c58      	adds	r0, r3, #1
 8008fd6:	6010      	str	r0, [r2, #0]
 8008fd8:	7019      	strb	r1, [r3, #0]
 8008fda:	4608      	mov	r0, r1
 8008fdc:	bc10      	pop	{r4}
 8008fde:	4770      	bx	lr

08008fe0 <__sfputs_r>:
 8008fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	460f      	mov	r7, r1
 8008fe6:	4614      	mov	r4, r2
 8008fe8:	18d5      	adds	r5, r2, r3
 8008fea:	42ac      	cmp	r4, r5
 8008fec:	d101      	bne.n	8008ff2 <__sfputs_r+0x12>
 8008fee:	2000      	movs	r0, #0
 8008ff0:	e007      	b.n	8009002 <__sfputs_r+0x22>
 8008ff2:	463a      	mov	r2, r7
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ffa:	f7ff ffdc 	bl	8008fb6 <__sfputc_r>
 8008ffe:	1c43      	adds	r3, r0, #1
 8009000:	d1f3      	bne.n	8008fea <__sfputs_r+0xa>
 8009002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009004 <_vfiprintf_r>:
 8009004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009008:	460d      	mov	r5, r1
 800900a:	4614      	mov	r4, r2
 800900c:	4698      	mov	r8, r3
 800900e:	4606      	mov	r6, r0
 8009010:	b09d      	sub	sp, #116	@ 0x74
 8009012:	b118      	cbz	r0, 800901c <_vfiprintf_r+0x18>
 8009014:	6a03      	ldr	r3, [r0, #32]
 8009016:	b90b      	cbnz	r3, 800901c <_vfiprintf_r+0x18>
 8009018:	f7fe f94a 	bl	80072b0 <__sinit>
 800901c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800901e:	07d9      	lsls	r1, r3, #31
 8009020:	d405      	bmi.n	800902e <_vfiprintf_r+0x2a>
 8009022:	89ab      	ldrh	r3, [r5, #12]
 8009024:	059a      	lsls	r2, r3, #22
 8009026:	d402      	bmi.n	800902e <_vfiprintf_r+0x2a>
 8009028:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800902a:	f7fe fa66 	bl	80074fa <__retarget_lock_acquire_recursive>
 800902e:	89ab      	ldrh	r3, [r5, #12]
 8009030:	071b      	lsls	r3, r3, #28
 8009032:	d501      	bpl.n	8009038 <_vfiprintf_r+0x34>
 8009034:	692b      	ldr	r3, [r5, #16]
 8009036:	b99b      	cbnz	r3, 8009060 <_vfiprintf_r+0x5c>
 8009038:	4629      	mov	r1, r5
 800903a:	4630      	mov	r0, r6
 800903c:	f000 f938 	bl	80092b0 <__swsetup_r>
 8009040:	b170      	cbz	r0, 8009060 <_vfiprintf_r+0x5c>
 8009042:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009044:	07dc      	lsls	r4, r3, #31
 8009046:	d504      	bpl.n	8009052 <_vfiprintf_r+0x4e>
 8009048:	f04f 30ff 	mov.w	r0, #4294967295
 800904c:	b01d      	add	sp, #116	@ 0x74
 800904e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009052:	89ab      	ldrh	r3, [r5, #12]
 8009054:	0598      	lsls	r0, r3, #22
 8009056:	d4f7      	bmi.n	8009048 <_vfiprintf_r+0x44>
 8009058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800905a:	f7fe fa4f 	bl	80074fc <__retarget_lock_release_recursive>
 800905e:	e7f3      	b.n	8009048 <_vfiprintf_r+0x44>
 8009060:	2300      	movs	r3, #0
 8009062:	9309      	str	r3, [sp, #36]	@ 0x24
 8009064:	2320      	movs	r3, #32
 8009066:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800906a:	2330      	movs	r3, #48	@ 0x30
 800906c:	f04f 0901 	mov.w	r9, #1
 8009070:	f8cd 800c 	str.w	r8, [sp, #12]
 8009074:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009220 <_vfiprintf_r+0x21c>
 8009078:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800907c:	4623      	mov	r3, r4
 800907e:	469a      	mov	sl, r3
 8009080:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009084:	b10a      	cbz	r2, 800908a <_vfiprintf_r+0x86>
 8009086:	2a25      	cmp	r2, #37	@ 0x25
 8009088:	d1f9      	bne.n	800907e <_vfiprintf_r+0x7a>
 800908a:	ebba 0b04 	subs.w	fp, sl, r4
 800908e:	d00b      	beq.n	80090a8 <_vfiprintf_r+0xa4>
 8009090:	465b      	mov	r3, fp
 8009092:	4622      	mov	r2, r4
 8009094:	4629      	mov	r1, r5
 8009096:	4630      	mov	r0, r6
 8009098:	f7ff ffa2 	bl	8008fe0 <__sfputs_r>
 800909c:	3001      	adds	r0, #1
 800909e:	f000 80a7 	beq.w	80091f0 <_vfiprintf_r+0x1ec>
 80090a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090a4:	445a      	add	r2, fp
 80090a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80090a8:	f89a 3000 	ldrb.w	r3, [sl]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 809f 	beq.w	80091f0 <_vfiprintf_r+0x1ec>
 80090b2:	2300      	movs	r3, #0
 80090b4:	f04f 32ff 	mov.w	r2, #4294967295
 80090b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090bc:	f10a 0a01 	add.w	sl, sl, #1
 80090c0:	9304      	str	r3, [sp, #16]
 80090c2:	9307      	str	r3, [sp, #28]
 80090c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80090ca:	4654      	mov	r4, sl
 80090cc:	2205      	movs	r2, #5
 80090ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090d2:	4853      	ldr	r0, [pc, #332]	@ (8009220 <_vfiprintf_r+0x21c>)
 80090d4:	f7ff fed8 	bl	8008e88 <memchr>
 80090d8:	9a04      	ldr	r2, [sp, #16]
 80090da:	b9d8      	cbnz	r0, 8009114 <_vfiprintf_r+0x110>
 80090dc:	06d1      	lsls	r1, r2, #27
 80090de:	bf44      	itt	mi
 80090e0:	2320      	movmi	r3, #32
 80090e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090e6:	0713      	lsls	r3, r2, #28
 80090e8:	bf44      	itt	mi
 80090ea:	232b      	movmi	r3, #43	@ 0x2b
 80090ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090f0:	f89a 3000 	ldrb.w	r3, [sl]
 80090f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80090f6:	d015      	beq.n	8009124 <_vfiprintf_r+0x120>
 80090f8:	4654      	mov	r4, sl
 80090fa:	2000      	movs	r0, #0
 80090fc:	f04f 0c0a 	mov.w	ip, #10
 8009100:	9a07      	ldr	r2, [sp, #28]
 8009102:	4621      	mov	r1, r4
 8009104:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009108:	3b30      	subs	r3, #48	@ 0x30
 800910a:	2b09      	cmp	r3, #9
 800910c:	d94b      	bls.n	80091a6 <_vfiprintf_r+0x1a2>
 800910e:	b1b0      	cbz	r0, 800913e <_vfiprintf_r+0x13a>
 8009110:	9207      	str	r2, [sp, #28]
 8009112:	e014      	b.n	800913e <_vfiprintf_r+0x13a>
 8009114:	eba0 0308 	sub.w	r3, r0, r8
 8009118:	fa09 f303 	lsl.w	r3, r9, r3
 800911c:	4313      	orrs	r3, r2
 800911e:	46a2      	mov	sl, r4
 8009120:	9304      	str	r3, [sp, #16]
 8009122:	e7d2      	b.n	80090ca <_vfiprintf_r+0xc6>
 8009124:	9b03      	ldr	r3, [sp, #12]
 8009126:	1d19      	adds	r1, r3, #4
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	9103      	str	r1, [sp, #12]
 800912c:	2b00      	cmp	r3, #0
 800912e:	bfbb      	ittet	lt
 8009130:	425b      	neglt	r3, r3
 8009132:	f042 0202 	orrlt.w	r2, r2, #2
 8009136:	9307      	strge	r3, [sp, #28]
 8009138:	9307      	strlt	r3, [sp, #28]
 800913a:	bfb8      	it	lt
 800913c:	9204      	strlt	r2, [sp, #16]
 800913e:	7823      	ldrb	r3, [r4, #0]
 8009140:	2b2e      	cmp	r3, #46	@ 0x2e
 8009142:	d10a      	bne.n	800915a <_vfiprintf_r+0x156>
 8009144:	7863      	ldrb	r3, [r4, #1]
 8009146:	2b2a      	cmp	r3, #42	@ 0x2a
 8009148:	d132      	bne.n	80091b0 <_vfiprintf_r+0x1ac>
 800914a:	9b03      	ldr	r3, [sp, #12]
 800914c:	3402      	adds	r4, #2
 800914e:	1d1a      	adds	r2, r3, #4
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	9203      	str	r2, [sp, #12]
 8009154:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009158:	9305      	str	r3, [sp, #20]
 800915a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009224 <_vfiprintf_r+0x220>
 800915e:	2203      	movs	r2, #3
 8009160:	4650      	mov	r0, sl
 8009162:	7821      	ldrb	r1, [r4, #0]
 8009164:	f7ff fe90 	bl	8008e88 <memchr>
 8009168:	b138      	cbz	r0, 800917a <_vfiprintf_r+0x176>
 800916a:	2240      	movs	r2, #64	@ 0x40
 800916c:	9b04      	ldr	r3, [sp, #16]
 800916e:	eba0 000a 	sub.w	r0, r0, sl
 8009172:	4082      	lsls	r2, r0
 8009174:	4313      	orrs	r3, r2
 8009176:	3401      	adds	r4, #1
 8009178:	9304      	str	r3, [sp, #16]
 800917a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800917e:	2206      	movs	r2, #6
 8009180:	4829      	ldr	r0, [pc, #164]	@ (8009228 <_vfiprintf_r+0x224>)
 8009182:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009186:	f7ff fe7f 	bl	8008e88 <memchr>
 800918a:	2800      	cmp	r0, #0
 800918c:	d03f      	beq.n	800920e <_vfiprintf_r+0x20a>
 800918e:	4b27      	ldr	r3, [pc, #156]	@ (800922c <_vfiprintf_r+0x228>)
 8009190:	bb1b      	cbnz	r3, 80091da <_vfiprintf_r+0x1d6>
 8009192:	9b03      	ldr	r3, [sp, #12]
 8009194:	3307      	adds	r3, #7
 8009196:	f023 0307 	bic.w	r3, r3, #7
 800919a:	3308      	adds	r3, #8
 800919c:	9303      	str	r3, [sp, #12]
 800919e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091a0:	443b      	add	r3, r7
 80091a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80091a4:	e76a      	b.n	800907c <_vfiprintf_r+0x78>
 80091a6:	460c      	mov	r4, r1
 80091a8:	2001      	movs	r0, #1
 80091aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80091ae:	e7a8      	b.n	8009102 <_vfiprintf_r+0xfe>
 80091b0:	2300      	movs	r3, #0
 80091b2:	f04f 0c0a 	mov.w	ip, #10
 80091b6:	4619      	mov	r1, r3
 80091b8:	3401      	adds	r4, #1
 80091ba:	9305      	str	r3, [sp, #20]
 80091bc:	4620      	mov	r0, r4
 80091be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091c2:	3a30      	subs	r2, #48	@ 0x30
 80091c4:	2a09      	cmp	r2, #9
 80091c6:	d903      	bls.n	80091d0 <_vfiprintf_r+0x1cc>
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d0c6      	beq.n	800915a <_vfiprintf_r+0x156>
 80091cc:	9105      	str	r1, [sp, #20]
 80091ce:	e7c4      	b.n	800915a <_vfiprintf_r+0x156>
 80091d0:	4604      	mov	r4, r0
 80091d2:	2301      	movs	r3, #1
 80091d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80091d8:	e7f0      	b.n	80091bc <_vfiprintf_r+0x1b8>
 80091da:	ab03      	add	r3, sp, #12
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	462a      	mov	r2, r5
 80091e0:	4630      	mov	r0, r6
 80091e2:	4b13      	ldr	r3, [pc, #76]	@ (8009230 <_vfiprintf_r+0x22c>)
 80091e4:	a904      	add	r1, sp, #16
 80091e6:	f3af 8000 	nop.w
 80091ea:	4607      	mov	r7, r0
 80091ec:	1c78      	adds	r0, r7, #1
 80091ee:	d1d6      	bne.n	800919e <_vfiprintf_r+0x19a>
 80091f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091f2:	07d9      	lsls	r1, r3, #31
 80091f4:	d405      	bmi.n	8009202 <_vfiprintf_r+0x1fe>
 80091f6:	89ab      	ldrh	r3, [r5, #12]
 80091f8:	059a      	lsls	r2, r3, #22
 80091fa:	d402      	bmi.n	8009202 <_vfiprintf_r+0x1fe>
 80091fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091fe:	f7fe f97d 	bl	80074fc <__retarget_lock_release_recursive>
 8009202:	89ab      	ldrh	r3, [r5, #12]
 8009204:	065b      	lsls	r3, r3, #25
 8009206:	f53f af1f 	bmi.w	8009048 <_vfiprintf_r+0x44>
 800920a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800920c:	e71e      	b.n	800904c <_vfiprintf_r+0x48>
 800920e:	ab03      	add	r3, sp, #12
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	462a      	mov	r2, r5
 8009214:	4630      	mov	r0, r6
 8009216:	4b06      	ldr	r3, [pc, #24]	@ (8009230 <_vfiprintf_r+0x22c>)
 8009218:	a904      	add	r1, sp, #16
 800921a:	f7ff fc43 	bl	8008aa4 <_printf_i>
 800921e:	e7e4      	b.n	80091ea <_vfiprintf_r+0x1e6>
 8009220:	08009939 	.word	0x08009939
 8009224:	0800993f 	.word	0x0800993f
 8009228:	08009943 	.word	0x08009943
 800922c:	00000000 	.word	0x00000000
 8009230:	08008fe1 	.word	0x08008fe1

08009234 <__swbuf_r>:
 8009234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009236:	460e      	mov	r6, r1
 8009238:	4614      	mov	r4, r2
 800923a:	4605      	mov	r5, r0
 800923c:	b118      	cbz	r0, 8009246 <__swbuf_r+0x12>
 800923e:	6a03      	ldr	r3, [r0, #32]
 8009240:	b90b      	cbnz	r3, 8009246 <__swbuf_r+0x12>
 8009242:	f7fe f835 	bl	80072b0 <__sinit>
 8009246:	69a3      	ldr	r3, [r4, #24]
 8009248:	60a3      	str	r3, [r4, #8]
 800924a:	89a3      	ldrh	r3, [r4, #12]
 800924c:	071a      	lsls	r2, r3, #28
 800924e:	d501      	bpl.n	8009254 <__swbuf_r+0x20>
 8009250:	6923      	ldr	r3, [r4, #16]
 8009252:	b943      	cbnz	r3, 8009266 <__swbuf_r+0x32>
 8009254:	4621      	mov	r1, r4
 8009256:	4628      	mov	r0, r5
 8009258:	f000 f82a 	bl	80092b0 <__swsetup_r>
 800925c:	b118      	cbz	r0, 8009266 <__swbuf_r+0x32>
 800925e:	f04f 37ff 	mov.w	r7, #4294967295
 8009262:	4638      	mov	r0, r7
 8009264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	6922      	ldr	r2, [r4, #16]
 800926a:	b2f6      	uxtb	r6, r6
 800926c:	1a98      	subs	r0, r3, r2
 800926e:	6963      	ldr	r3, [r4, #20]
 8009270:	4637      	mov	r7, r6
 8009272:	4283      	cmp	r3, r0
 8009274:	dc05      	bgt.n	8009282 <__swbuf_r+0x4e>
 8009276:	4621      	mov	r1, r4
 8009278:	4628      	mov	r0, r5
 800927a:	f7ff fdb3 	bl	8008de4 <_fflush_r>
 800927e:	2800      	cmp	r0, #0
 8009280:	d1ed      	bne.n	800925e <__swbuf_r+0x2a>
 8009282:	68a3      	ldr	r3, [r4, #8]
 8009284:	3b01      	subs	r3, #1
 8009286:	60a3      	str	r3, [r4, #8]
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	1c5a      	adds	r2, r3, #1
 800928c:	6022      	str	r2, [r4, #0]
 800928e:	701e      	strb	r6, [r3, #0]
 8009290:	6962      	ldr	r2, [r4, #20]
 8009292:	1c43      	adds	r3, r0, #1
 8009294:	429a      	cmp	r2, r3
 8009296:	d004      	beq.n	80092a2 <__swbuf_r+0x6e>
 8009298:	89a3      	ldrh	r3, [r4, #12]
 800929a:	07db      	lsls	r3, r3, #31
 800929c:	d5e1      	bpl.n	8009262 <__swbuf_r+0x2e>
 800929e:	2e0a      	cmp	r6, #10
 80092a0:	d1df      	bne.n	8009262 <__swbuf_r+0x2e>
 80092a2:	4621      	mov	r1, r4
 80092a4:	4628      	mov	r0, r5
 80092a6:	f7ff fd9d 	bl	8008de4 <_fflush_r>
 80092aa:	2800      	cmp	r0, #0
 80092ac:	d0d9      	beq.n	8009262 <__swbuf_r+0x2e>
 80092ae:	e7d6      	b.n	800925e <__swbuf_r+0x2a>

080092b0 <__swsetup_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	4b29      	ldr	r3, [pc, #164]	@ (8009358 <__swsetup_r+0xa8>)
 80092b4:	4605      	mov	r5, r0
 80092b6:	6818      	ldr	r0, [r3, #0]
 80092b8:	460c      	mov	r4, r1
 80092ba:	b118      	cbz	r0, 80092c4 <__swsetup_r+0x14>
 80092bc:	6a03      	ldr	r3, [r0, #32]
 80092be:	b90b      	cbnz	r3, 80092c4 <__swsetup_r+0x14>
 80092c0:	f7fd fff6 	bl	80072b0 <__sinit>
 80092c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092c8:	0719      	lsls	r1, r3, #28
 80092ca:	d422      	bmi.n	8009312 <__swsetup_r+0x62>
 80092cc:	06da      	lsls	r2, r3, #27
 80092ce:	d407      	bmi.n	80092e0 <__swsetup_r+0x30>
 80092d0:	2209      	movs	r2, #9
 80092d2:	602a      	str	r2, [r5, #0]
 80092d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092d8:	f04f 30ff 	mov.w	r0, #4294967295
 80092dc:	81a3      	strh	r3, [r4, #12]
 80092de:	e033      	b.n	8009348 <__swsetup_r+0x98>
 80092e0:	0758      	lsls	r0, r3, #29
 80092e2:	d512      	bpl.n	800930a <__swsetup_r+0x5a>
 80092e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092e6:	b141      	cbz	r1, 80092fa <__swsetup_r+0x4a>
 80092e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092ec:	4299      	cmp	r1, r3
 80092ee:	d002      	beq.n	80092f6 <__swsetup_r+0x46>
 80092f0:	4628      	mov	r0, r5
 80092f2:	f7fe f919 	bl	8007528 <_free_r>
 80092f6:	2300      	movs	r3, #0
 80092f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80092fa:	89a3      	ldrh	r3, [r4, #12]
 80092fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009300:	81a3      	strh	r3, [r4, #12]
 8009302:	2300      	movs	r3, #0
 8009304:	6063      	str	r3, [r4, #4]
 8009306:	6923      	ldr	r3, [r4, #16]
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	89a3      	ldrh	r3, [r4, #12]
 800930c:	f043 0308 	orr.w	r3, r3, #8
 8009310:	81a3      	strh	r3, [r4, #12]
 8009312:	6923      	ldr	r3, [r4, #16]
 8009314:	b94b      	cbnz	r3, 800932a <__swsetup_r+0x7a>
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800931c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009320:	d003      	beq.n	800932a <__swsetup_r+0x7a>
 8009322:	4621      	mov	r1, r4
 8009324:	4628      	mov	r0, r5
 8009326:	f000 f882 	bl	800942e <__smakebuf_r>
 800932a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800932e:	f013 0201 	ands.w	r2, r3, #1
 8009332:	d00a      	beq.n	800934a <__swsetup_r+0x9a>
 8009334:	2200      	movs	r2, #0
 8009336:	60a2      	str	r2, [r4, #8]
 8009338:	6962      	ldr	r2, [r4, #20]
 800933a:	4252      	negs	r2, r2
 800933c:	61a2      	str	r2, [r4, #24]
 800933e:	6922      	ldr	r2, [r4, #16]
 8009340:	b942      	cbnz	r2, 8009354 <__swsetup_r+0xa4>
 8009342:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009346:	d1c5      	bne.n	80092d4 <__swsetup_r+0x24>
 8009348:	bd38      	pop	{r3, r4, r5, pc}
 800934a:	0799      	lsls	r1, r3, #30
 800934c:	bf58      	it	pl
 800934e:	6962      	ldrpl	r2, [r4, #20]
 8009350:	60a2      	str	r2, [r4, #8]
 8009352:	e7f4      	b.n	800933e <__swsetup_r+0x8e>
 8009354:	2000      	movs	r0, #0
 8009356:	e7f7      	b.n	8009348 <__swsetup_r+0x98>
 8009358:	200001c4 	.word	0x200001c4

0800935c <_raise_r>:
 800935c:	291f      	cmp	r1, #31
 800935e:	b538      	push	{r3, r4, r5, lr}
 8009360:	4605      	mov	r5, r0
 8009362:	460c      	mov	r4, r1
 8009364:	d904      	bls.n	8009370 <_raise_r+0x14>
 8009366:	2316      	movs	r3, #22
 8009368:	6003      	str	r3, [r0, #0]
 800936a:	f04f 30ff 	mov.w	r0, #4294967295
 800936e:	bd38      	pop	{r3, r4, r5, pc}
 8009370:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009372:	b112      	cbz	r2, 800937a <_raise_r+0x1e>
 8009374:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009378:	b94b      	cbnz	r3, 800938e <_raise_r+0x32>
 800937a:	4628      	mov	r0, r5
 800937c:	f000 f830 	bl	80093e0 <_getpid_r>
 8009380:	4622      	mov	r2, r4
 8009382:	4601      	mov	r1, r0
 8009384:	4628      	mov	r0, r5
 8009386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800938a:	f000 b817 	b.w	80093bc <_kill_r>
 800938e:	2b01      	cmp	r3, #1
 8009390:	d00a      	beq.n	80093a8 <_raise_r+0x4c>
 8009392:	1c59      	adds	r1, r3, #1
 8009394:	d103      	bne.n	800939e <_raise_r+0x42>
 8009396:	2316      	movs	r3, #22
 8009398:	6003      	str	r3, [r0, #0]
 800939a:	2001      	movs	r0, #1
 800939c:	e7e7      	b.n	800936e <_raise_r+0x12>
 800939e:	2100      	movs	r1, #0
 80093a0:	4620      	mov	r0, r4
 80093a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80093a6:	4798      	blx	r3
 80093a8:	2000      	movs	r0, #0
 80093aa:	e7e0      	b.n	800936e <_raise_r+0x12>

080093ac <raise>:
 80093ac:	4b02      	ldr	r3, [pc, #8]	@ (80093b8 <raise+0xc>)
 80093ae:	4601      	mov	r1, r0
 80093b0:	6818      	ldr	r0, [r3, #0]
 80093b2:	f7ff bfd3 	b.w	800935c <_raise_r>
 80093b6:	bf00      	nop
 80093b8:	200001c4 	.word	0x200001c4

080093bc <_kill_r>:
 80093bc:	b538      	push	{r3, r4, r5, lr}
 80093be:	2300      	movs	r3, #0
 80093c0:	4d06      	ldr	r5, [pc, #24]	@ (80093dc <_kill_r+0x20>)
 80093c2:	4604      	mov	r4, r0
 80093c4:	4608      	mov	r0, r1
 80093c6:	4611      	mov	r1, r2
 80093c8:	602b      	str	r3, [r5, #0]
 80093ca:	f7f8 fc82 	bl	8001cd2 <_kill>
 80093ce:	1c43      	adds	r3, r0, #1
 80093d0:	d102      	bne.n	80093d8 <_kill_r+0x1c>
 80093d2:	682b      	ldr	r3, [r5, #0]
 80093d4:	b103      	cbz	r3, 80093d8 <_kill_r+0x1c>
 80093d6:	6023      	str	r3, [r4, #0]
 80093d8:	bd38      	pop	{r3, r4, r5, pc}
 80093da:	bf00      	nop
 80093dc:	20000460 	.word	0x20000460

080093e0 <_getpid_r>:
 80093e0:	f7f8 bc70 	b.w	8001cc4 <_getpid>

080093e4 <__swhatbuf_r>:
 80093e4:	b570      	push	{r4, r5, r6, lr}
 80093e6:	460c      	mov	r4, r1
 80093e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ec:	4615      	mov	r5, r2
 80093ee:	2900      	cmp	r1, #0
 80093f0:	461e      	mov	r6, r3
 80093f2:	b096      	sub	sp, #88	@ 0x58
 80093f4:	da0c      	bge.n	8009410 <__swhatbuf_r+0x2c>
 80093f6:	89a3      	ldrh	r3, [r4, #12]
 80093f8:	2100      	movs	r1, #0
 80093fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80093fe:	bf14      	ite	ne
 8009400:	2340      	movne	r3, #64	@ 0x40
 8009402:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009406:	2000      	movs	r0, #0
 8009408:	6031      	str	r1, [r6, #0]
 800940a:	602b      	str	r3, [r5, #0]
 800940c:	b016      	add	sp, #88	@ 0x58
 800940e:	bd70      	pop	{r4, r5, r6, pc}
 8009410:	466a      	mov	r2, sp
 8009412:	f000 f849 	bl	80094a8 <_fstat_r>
 8009416:	2800      	cmp	r0, #0
 8009418:	dbed      	blt.n	80093f6 <__swhatbuf_r+0x12>
 800941a:	9901      	ldr	r1, [sp, #4]
 800941c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009420:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009424:	4259      	negs	r1, r3
 8009426:	4159      	adcs	r1, r3
 8009428:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800942c:	e7eb      	b.n	8009406 <__swhatbuf_r+0x22>

0800942e <__smakebuf_r>:
 800942e:	898b      	ldrh	r3, [r1, #12]
 8009430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009432:	079d      	lsls	r5, r3, #30
 8009434:	4606      	mov	r6, r0
 8009436:	460c      	mov	r4, r1
 8009438:	d507      	bpl.n	800944a <__smakebuf_r+0x1c>
 800943a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800943e:	6023      	str	r3, [r4, #0]
 8009440:	6123      	str	r3, [r4, #16]
 8009442:	2301      	movs	r3, #1
 8009444:	6163      	str	r3, [r4, #20]
 8009446:	b003      	add	sp, #12
 8009448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800944a:	466a      	mov	r2, sp
 800944c:	ab01      	add	r3, sp, #4
 800944e:	f7ff ffc9 	bl	80093e4 <__swhatbuf_r>
 8009452:	9f00      	ldr	r7, [sp, #0]
 8009454:	4605      	mov	r5, r0
 8009456:	4639      	mov	r1, r7
 8009458:	4630      	mov	r0, r6
 800945a:	f7fe fc09 	bl	8007c70 <_malloc_r>
 800945e:	b948      	cbnz	r0, 8009474 <__smakebuf_r+0x46>
 8009460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009464:	059a      	lsls	r2, r3, #22
 8009466:	d4ee      	bmi.n	8009446 <__smakebuf_r+0x18>
 8009468:	f023 0303 	bic.w	r3, r3, #3
 800946c:	f043 0302 	orr.w	r3, r3, #2
 8009470:	81a3      	strh	r3, [r4, #12]
 8009472:	e7e2      	b.n	800943a <__smakebuf_r+0xc>
 8009474:	89a3      	ldrh	r3, [r4, #12]
 8009476:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800947a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800947e:	81a3      	strh	r3, [r4, #12]
 8009480:	9b01      	ldr	r3, [sp, #4]
 8009482:	6020      	str	r0, [r4, #0]
 8009484:	b15b      	cbz	r3, 800949e <__smakebuf_r+0x70>
 8009486:	4630      	mov	r0, r6
 8009488:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800948c:	f000 f81e 	bl	80094cc <_isatty_r>
 8009490:	b128      	cbz	r0, 800949e <__smakebuf_r+0x70>
 8009492:	89a3      	ldrh	r3, [r4, #12]
 8009494:	f023 0303 	bic.w	r3, r3, #3
 8009498:	f043 0301 	orr.w	r3, r3, #1
 800949c:	81a3      	strh	r3, [r4, #12]
 800949e:	89a3      	ldrh	r3, [r4, #12]
 80094a0:	431d      	orrs	r5, r3
 80094a2:	81a5      	strh	r5, [r4, #12]
 80094a4:	e7cf      	b.n	8009446 <__smakebuf_r+0x18>
	...

080094a8 <_fstat_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	2300      	movs	r3, #0
 80094ac:	4d06      	ldr	r5, [pc, #24]	@ (80094c8 <_fstat_r+0x20>)
 80094ae:	4604      	mov	r4, r0
 80094b0:	4608      	mov	r0, r1
 80094b2:	4611      	mov	r1, r2
 80094b4:	602b      	str	r3, [r5, #0]
 80094b6:	f7f8 fc6b 	bl	8001d90 <_fstat>
 80094ba:	1c43      	adds	r3, r0, #1
 80094bc:	d102      	bne.n	80094c4 <_fstat_r+0x1c>
 80094be:	682b      	ldr	r3, [r5, #0]
 80094c0:	b103      	cbz	r3, 80094c4 <_fstat_r+0x1c>
 80094c2:	6023      	str	r3, [r4, #0]
 80094c4:	bd38      	pop	{r3, r4, r5, pc}
 80094c6:	bf00      	nop
 80094c8:	20000460 	.word	0x20000460

080094cc <_isatty_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	2300      	movs	r3, #0
 80094d0:	4d05      	ldr	r5, [pc, #20]	@ (80094e8 <_isatty_r+0x1c>)
 80094d2:	4604      	mov	r4, r0
 80094d4:	4608      	mov	r0, r1
 80094d6:	602b      	str	r3, [r5, #0]
 80094d8:	f7f8 fc69 	bl	8001dae <_isatty>
 80094dc:	1c43      	adds	r3, r0, #1
 80094de:	d102      	bne.n	80094e6 <_isatty_r+0x1a>
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	b103      	cbz	r3, 80094e6 <_isatty_r+0x1a>
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	bd38      	pop	{r3, r4, r5, pc}
 80094e8:	20000460 	.word	0x20000460

080094ec <_init>:
 80094ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ee:	bf00      	nop
 80094f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094f2:	bc08      	pop	{r3}
 80094f4:	469e      	mov	lr, r3
 80094f6:	4770      	bx	lr

080094f8 <_fini>:
 80094f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fa:	bf00      	nop
 80094fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fe:	bc08      	pop	{r3}
 8009500:	469e      	mov	lr, r3
 8009502:	4770      	bx	lr
